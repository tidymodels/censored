[{"path":[]},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://censored.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://censored.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 censored authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"bag_tree-models","dir":"Articles","previous_headings":"","what":"bag_tree() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels) ## ── Attaching packages ───────────────────────────── tidymodels 1.2.0 ── ## ✔ broom        1.0.7     ✔ rsample      1.2.1   ## ✔ dials        1.4.0     ✔ tibble       3.2.1   ## ✔ dplyr        1.1.4     ✔ tidyr        1.3.1   ## ✔ infer        1.0.7     ✔ tune         1.2.1   ## ✔ modeldata    1.4.0     ✔ workflows    1.1.4   ## ✔ parsnip      1.3.0     ✔ workflowsets 1.1.0   ## ✔ purrr        1.0.4     ✔ yardstick    1.3.2   ## ✔ recipes      1.1.1 ## ── Conflicts ──────────────────────────────── tidymodels_conflicts() ──   ## ✖ purrr::discard() masks scales::discard()   ## ✖ dplyr::filter()  masks stats::filter()   ## ✖ dplyr::lag()     masks stats::lag()   ## ✖ recipes::step()  masks stats::step()   ## • Learn how to get started at https://www.tidymodels.org/start/ library(censored) ## Loading required package: survival tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] bt_spec <-      bag_tree(cost_complexity = 0) %>%     set_engine(\"rpart\") %>%      set_mode(\"censored regression\")    bt_spec ## Bagged Decision Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   cost_complexity = 0   ##   min_n = 2   ##    ## Computational engine: rpart set.seed(1)   bt_fit <- bt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   bt_fit ## parsnip model object   ##    ##    ## Bagging survival trees with 25 bootstrap replications    ##    ## Call: bagging.data.frame(formula = Surv(time, status) ~ ., data = data) predict(     bt_fit,      lung_test,      type = \"survival\",      eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100        0.946     ## 2        500        0.333     ## 3       1000        0.00496 predict(bt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        353   ## 2        293   ## 3        230   ## 4        201   ## 5        268"},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"boost_tree-models","dir":"Articles","previous_headings":"","what":"boost_tree() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor.","code":"library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] bt_spec <-      boost_tree(trees = 15) %>%     set_engine(\"mboost\") %>%      set_mode(\"censored regression\")    bt_spec ## Boosted Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   trees = 15   ##    ## Computational engine: mboost set.seed(1)   bt_fit <- bt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   bt_fit ## parsnip model object   ##    ##    ##     Model-based Boosting   ##    ## Call:   ## mboost::blackboost(formula = formula, data = data, family = family,     control = mboost::boost_control(mstop = 15), tree_controls = partykit::ctree_control(teststat = \"quadratic\",         testtype = \"Teststatistic\", mincriterion = 0, minsplit = 10,         minbucket = 4, maxdepth = 2, saveinfo = FALSE))   ##    ##    ##     Cox Partial Likelihood    ##    ## Loss function:     ##    ## Number of boosting iterations: mstop = 15    ## Step size:  0.1    ## Offset:  0    ## Number of baselearners:  1 predict(     bt_fit,      lung_test,     type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.867    ## 2        500         0.294    ## 3       1000         0.0441 predict(bt_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1            0.0823   ## 2           -0.455    ## 3            0.0661   ## 4           -0.724    ## 5           -0.724"},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"decision_tree-models","dir":"Articles","previous_headings":"","what":"decision_tree() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time. ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] dt_spec <-      decision_tree(cost_complexity = 0) %>%     set_engine(\"rpart\") %>%      set_mode(\"censored regression\")    dt_spec ## Decision Tree Model Specification (censored regression)   ##    ## Main Arguments:   ##   cost_complexity = 0   ##    ## Computational engine: rpart set.seed(1)   dt_fit <- dt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   dt_fit ## parsnip model object   ##    ## $rpart   ## n= 162    ##    ## node), split, n, deviance, yval   ##       * denotes terminal node   ##    ##   1) root 162 217.089100 1.0000000     ##     2) ph.ecog< 1.5 125 146.610800 0.8606149     ##       4) pat.karno>=65 117 134.248900 0.8042241     ##         8) sex>=1.5 47  58.371280 0.5920010     ##          16) inst>=12.5 16  17.696750 0.3469493 *   ##          17) inst< 12.5 31  36.986020 0.7601739     ##            34) ph.ecog< 0.5 14  21.869860 0.4765888 *   ##            35) ph.ecog>=0.5 17  12.197510 0.9977683 *   ##         9) sex< 1.5 70  71.035080 0.9843711     ##          18) wt.loss< -0.5 10   7.608541 0.6466464 *   ##          19) wt.loss>=-0.5 60  61.204860 1.0855380     ##            38) inst< 18.5 51  52.890560 0.9994210     ##              76) pat.karno< 85 27  30.835530 0.8204259     ##               152) age< 65.5 16  16.499450 0.6396414 *   ##               153) age>=65.5 11  12.211210 1.2318540 *   ##              77) pat.karno>=85 24  20.327560 1.2436570     ##               154) pat.karno>=95 10   6.634957 0.7568023 *   ##               155) pat.karno< 95 14  10.631990 1.6387150 *   ##            39) inst>=18.5 9   6.360874 1.6566500 *   ##       5) pat.karno< 65 8   5.011986 2.2376180 *   ##     3) ph.ecog>=1.5 37  59.992750 1.7157640     ##       6) wt.loss>=21 10  10.703230 0.6678083 *   ##       7) wt.loss< 21 27  29.918520 3.1500170     ##        14) sex>=1.5 12   7.395091 1.9066160 *   ##        15) sex< 1.5 15  16.563010 4.5917120 *   ##    ## $survfit   ##    ## Call: prodlim::prodlim(formula = form, data = data) ## Stratified Kaplan-Meier estimator for the conditional event time survival function ## Discrete predictor variable: rpartFactor (0.34694933272507, 0.47658881486553, 0.639641354557786, 0.646646427745816, 0.667808261569019, 0.756802251840104, 0.997768280401696, 1.23185367065451, 1.638714591616, 1.65664969973098, 1.90661557969861, 2.23761769770399, 4.59171172488878) ##    ## Right-censored response of a survival model   ##    ## No.Observations: 162    ##    ## Pattern:   ##                 Freq   ##  event          116    ##  right.censored 46     ##    ## $levels   ##  [1] \"0.34694933272507\"  \"0.47658881486553\"  \"0.639641354557786\"   ##  [4] \"0.646646427745816\" \"0.667808261569019\" \"0.756802251840104\"   ##  [7] \"0.997768280401696\" \"1.23185367065451\"  \"1.638714591616\"      ## [10] \"1.65664969973098\"  \"1.90661557969861\"  \"2.23761769770399\"    ## [13] \"4.59171172488878\"    ##    ## attr(,\"class\")   ## [1] \"pecRpart\" predict(     dt_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100          0.786   ## 2        500          0.143   ## 3       1000         NA predict(dt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       1.64   ## 2       2.24   ## 3       1.23   ## 4       1.91   ## 5       1.91 library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] dt_spec <-      decision_tree() %>%     set_engine(\"partykit\") %>%      set_mode(\"censored regression\")    dt_spec ## Decision Tree Model Specification (censored regression)   ##    ## Computational engine: partykit set.seed(1)   dt_fit <- dt_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   dt_fit ## parsnip model object   ##    ##    ## Model formula:   ## Surv(time, status) ~ inst + age + sex + ph.ecog + ph.karno +    ##     pat.karno + meal.cal + wt.loss   ##    ## Fitted party:   ## [1] root   ## |   [2] ph.ecog <= 1: 363.000 (n = 125)   ## |   [3] ph.ecog > 1   ## |   |   [4] wt.loss <= 20   ## |   |   |   [5] sex <= 1: 65.000 (n = 15)   ## |   |   |   [6] sex > 1: 201.000 (n = 12)   ## |   |   [7] wt.loss > 20: 524.000 (n = 10)   ##    ## Number of inner nodes:    3   ## Number of terminal nodes: 4 predict(     dt_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.896    ## 2        500         0.334    ## 3       1000         0.0719 predict(dt_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        363   ## 2        363   ## 3        363   ## 4        201   ## 5        201"},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"proportional_hazards-models","dir":"Articles","previous_headings":"","what":"proportional_hazards() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor event time. ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well linear predictor.","code":"library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] ph_spec <-      proportional_hazards() %>%     set_engine(\"survival\") %>%      set_mode(\"censored regression\")    ph_spec ## Proportional Hazards Model Specification (censored regression)   ##    ## Computational engine: survival set.seed(1)   ph_fit <- ph_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   ph_fit ## parsnip model object   ##    ## Call:   ## survival::coxph(formula = Surv(time, status) ~ ., data = data,    ##     model = TRUE, x = TRUE)   ##    ##                 coef  exp(coef)   se(coef)      z       p   ## inst      -0.0291726  0.9712488  0.0131293 -2.222 0.02629   ## age        0.0146341  1.0147417  0.0119705  1.223 0.22151   ## sex       -0.5977137  0.5500678  0.2051326 -2.914 0.00357   ## ph.ecog    0.7507039  2.1184906  0.2536100  2.960 0.00308   ## ph.karno   0.0137315  1.0138262  0.0132752  1.034 0.30096   ## pat.karno -0.0082098  0.9918238  0.0082560 -0.994 0.32002   ## meal.cal  -0.0001233  0.9998767  0.0002841 -0.434 0.66435   ## wt.loss   -0.0188464  0.9813301  0.0082051 -2.297 0.02162   ##    ## Likelihood ratio test=32.61  on 8 df, p=7.224e-05   ## n= 162, number of events= 116 predict(     ph_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.903    ## 2        500         0.410    ## 3       1000         0.0953 predict(ph_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1            -0.373   ## 2            -1.24    ## 3            -0.852   ## 4            -1.33    ## 5            -1.11 predict(ph_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       448.   ## 2       262.   ## 3       337.   ## 4       246.   ## 5       286. library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] ph_spec <-      proportional_hazards(penalty = 0.1) %>%     set_engine(\"glmnet\") %>%      set_mode(\"censored regression\")    ph_spec ## Proportional Hazards Model Specification (censored regression)   ##    ## Main Arguments:   ##   penalty = 0.1   ##    ## Computational engine: glmnet set.seed(1)   ph_fit <- ph_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   ph_fit ## parsnip model object   ##    ##    ## Call:  glmnet::glmnet(x = data_obj$x, y = data_obj$y, family = \"cox\",      weights = weights, alpha = alpha, lambda = lambda)    ##    ##    Df %Dev   Lambda   ## 1   0 0.00 0.221000   ## 2   1 0.23 0.201400   ## 3   2 0.43 0.183500   ## 4   2 0.72 0.167200   ## 5   2 0.96 0.152300   ## 6   2 1.17 0.138800   ## 7   2 1.33 0.126500   ## 8   3 1.48 0.115200   ## 9   4 1.61 0.105000   ## 10  4 1.74 0.095660   ## 11  5 1.87 0.087160   ## 12  6 2.02 0.079420   ## 13  6 2.22 0.072370   ## 14  6 2.40 0.065940   ## 15  6 2.54 0.060080   ## 16  6 2.66 0.054740   ## 17  6 2.77 0.049880   ## 18  6 2.85 0.045450   ## 19  6 2.92 0.041410   ## 20  6 2.98 0.037730   ## 21  7 3.04 0.034380   ## 22  7 3.08 0.031330   ## 23  7 3.12 0.028540   ## 24  7 3.16 0.026010   ## 25  7 3.19 0.023700   ## 26  7 3.21 0.021590   ## 27  8 3.23 0.019670   ## 28  8 3.27 0.017930   ## 29  8 3.30 0.016330   ## 30  8 3.32 0.014880   ## 31  8 3.34 0.013560   ## 32  8 3.36 0.012360   ## 33  8 3.37 0.011260   ## 34  8 3.39 0.010260   ## 35  8 3.40 0.009346   ## 36  8 3.40 0.008516   ## 37  8 3.41 0.007760   ## 38  8 3.42 0.007070   ## 39  8 3.42 0.006442   ## 40  8 3.43 0.005870   ## 41  8 3.43 0.005348   ## 42  8 3.43 0.004873   ## 43  8 3.43 0.004440   ## 44  8 3.44 0.004046   ## 45  8 3.44 0.003686   ## 46  8 3.44 0.003359   ## 47  8 3.44 0.003061   ## 48  8 3.44 0.002789   ## 49  8 3.44 0.002541   ## 50  8 3.44 0.002315   ## The training data has been saved for prediction. predict(     ph_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.874    ## 2        500         0.349    ## 3       1000         0.0804 predict(ph_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1         0.272       ## 2         0.0000798   ## 3         0.00575     ## 4        -0.0211      ## 5        -0.00345"},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"rand_forest-models","dir":"Articles","previous_headings":"","what":"rand_forest() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time. ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time.","code":"library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] rf_spec <-      rand_forest(trees = 200) %>%     set_engine(\"partykit\") %>%      set_mode(\"censored regression\")    rf_spec ## Random Forest Model Specification (censored regression)   ##    ## Main Arguments:   ##   trees = 200   ##    ## Computational engine: partykit set.seed(1)   rf_fit <- rf_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   rf_fit ## parsnip model object   ##    ## $nodes   ## $nodes[[1]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V3 <= 64   ## |   |   |   |   [5] V8 <= 1025 *   ## |   |   |   |   [6] V8 > 1025 *   ## |   |   |   [7] V3 > 64 *   ## |   |   [8] V5 > 1 *   ## |   [9] V4 > 1   ## |   |   [10] V5 <= 1   ## |   |   |   [11] V5 <= 0 *   ## |   |   |   [12] V5 > 0 *   ## |   |   [13] V5 > 1 *   ##    ## $nodes[[2]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V5 > 0   ## |   |   [6] V5 <= 1   ## |   |   |   [7] V9 <= 19   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V9 <= 6 *   ## |   |   |   |   |   [10] V9 > 6 *   ## |   |   |   |   [11] V4 > 1 *   ## |   |   |   [12] V9 > 19 *   ## |   |   [13] V5 > 1   ## |   |   |   [14] V4 <= 1 *   ## |   |   |   [15] V4 > 1 *   ##    ## $nodes[[3]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V2 <= 5 *   ## |   |   |   [5] V2 > 5   ## |   |   |   |   [6] V6 <= 90 *   ## |   |   |   |   [7] V6 > 90 *   ## |   |   [8] V5 > 0   ## |   |   |   [9] V6 <= 80   ## |   |   |   |   [10] V7 <= 70 *   ## |   |   |   |   [11] V7 > 70   ## |   |   |   |   |   [12] V2 <= 10 *   ## |   |   |   |   |   [13] V2 > 10 *   ## |   |   |   [14] V6 > 80 *   ## |   [15] V5 > 1   ## |   |   [16] V6 <= 60 *   ## |   |   [17] V6 > 60 *   ##    ## $nodes[[4]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V7 <= 80 *   ## |   |   [4] V7 > 80 *   ## |   [5] V5 > 0   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V6 <= 80   ## |   |   |   |   [8] V3 <= 65 *   ## |   |   |   |   [9] V3 > 65   ## |   |   |   |   |   [10] V9 <= 7 *   ## |   |   |   |   |   [11] V9 > 7 *   ## |   |   |   [12] V6 > 80 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V5 <= 1 *   ## |   |   |   [15] V5 > 1 *   ##    ## $nodes[[5]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V6 <= 80   ## |   |   |   |   [5] V7 <= 80 *   ## |   |   |   |   [6] V7 > 80 *   ## |   |   |   [7] V6 > 80   ## |   |   |   |   [8] V9 <= 12   ## |   |   |   |   |   [9] V2 <= 11 *   ## |   |   |   |   |   [10] V2 > 11 *   ## |   |   |   |   [11] V9 > 12 *   ## |   |   [12] V4 > 1   ## |   |   |   [13] V3 <= 53 *   ## |   |   |   [14] V3 > 53   ## |   |   |   |   [15] V3 <= 64 *   ## |   |   |   |   [16] V3 > 64 *   ## |   [17] V5 > 1   ## |   |   [18] V8 <= 925 *   ## |   |   [19] V8 > 925 *   ##    ## $nodes[[6]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V8 <= 613 *   ## |   |   |   [5] V8 > 613   ## |   |   |   |   [6] V2 <= 10 *   ## |   |   |   |   [7] V2 > 10 *   ## |   |   [8] V6 > 80   ## |   |   |   [9] V8 <= 875 *   ## |   |   |   [10] V8 > 875   ## |   |   |   |   [11] V9 <= 2 *   ## |   |   |   |   [12] V9 > 2 *   ## |   [13] V4 > 1   ## |   |   [14] V6 <= 70 *   ## |   |   [15] V6 > 70   ## |   |   |   [16] V2 <= 11 *   ## |   |   |   [17] V2 > 11 *   ##    ## $nodes[[7]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V3 <= 74   ## |   |   |   [5] V7 <= 90   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V7 <= 70 *   ## |   |   |   |   |   [9] V7 > 70   ## |   |   |   |   |   |   [10] V9 <= 4 *   ## |   |   |   |   |   |   [11] V9 > 4 *   ## |   |   |   [12] V7 > 90 *   ## |   |   [13] V3 > 74 *   ##    ## $nodes[[8]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V4 <= 1   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V4 > 1   ## |   |   |   |   [8] V9 <= 6 *   ## |   |   |   |   [9] V9 > 6 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V7 <= 80 *   ## |   |   |   [12] V7 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V4 <= 1 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[9]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V9 <= 20   ## |   |   |   |   [5] V6 <= 70 *   ## |   |   |   |   [6] V6 > 70 *   ## |   |   |   [7] V9 > 20 *   ## |   |   [8] V6 > 80   ## |   |   |   [9] V7 <= 80 *   ## |   |   |   [10] V7 > 80 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 90   ## |   |   |   [13] V9 <= 3 *   ## |   |   |   [14] V9 > 3 *   ## |   |   [15] V7 > 90 *   ##    ## $nodes[[10]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V9 <= 3 *   ## |   |   |   [5] V9 > 3 *   ## |   |   [6] V3 > 64 *   ## |   [7] V5 > 0   ## |   |   [8] V9 <= 27   ## |   |   |   [9] V5 <= 1   ## |   |   |   |   [10] V9 <= 14   ## |   |   |   |   |   [11] V4 <= 1 *   ## |   |   |   |   |   [12] V4 > 1 *   ## |   |   |   |   [13] V9 > 14 *   ## |   |   |   [14] V5 > 1 *   ## |   |   [15] V9 > 27 *   ##    ## $nodes[[11]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V3 <= 70   ## |   |   |   |   |   [7] V7 <= 80 *   ## |   |   |   |   |   [8] V7 > 80   ## |   |   |   |   |   |   [9] V3 <= 61 *   ## |   |   |   |   |   |   [10] V3 > 61 *   ## |   |   |   |   [11] V3 > 70 *   ## |   |   [12] V7 > 90 *   ## |   [13] V5 > 1   ## |   |   [14] V4 <= 1 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[12]]   ## [1] root   ## |   [2] V2 <= 21   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V6 <= 70 *   ## |   |   |   [6] V6 > 70   ## |   |   |   |   [7] V7 <= 90   ## |   |   |   |   |   [8] V5 <= 0 *   ## |   |   |   |   |   [9] V5 > 0   ## |   |   |   |   |   |   [10] V9 <= 14   ## |   |   |   |   |   |   |   [11] V7 <= 80 *   ## |   |   |   |   |   |   |   [12] V7 > 80 *   ## |   |   |   |   |   |   [13] V9 > 14 *   ## |   |   |   |   [14] V7 > 90 *   ## |   [15] V2 > 21 *   ##    ## $nodes[[13]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V5 <= 0 *   ## |   |   |   [6] V5 > 0   ## |   |   |   |   [7] V3 <= 60 *   ## |   |   |   |   [8] V3 > 60   ## |   |   |   |   |   [9] V7 <= 70 *   ## |   |   |   |   |   [10] V7 > 70 *   ## |   [11] V4 > 1   ## |   |   [12] V5 <= 0 *   ## |   |   [13] V5 > 0   ## |   |   |   [14] V5 <= 1 *   ## |   |   |   [15] V5 > 1 *   ##    ## $nodes[[14]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V3 <= 53 *   ## |   |   |   [5] V3 > 53   ## |   |   |   |   [6] V9 <= 14   ## |   |   |   |   |   [7] V9 <= 2 *   ## |   |   |   |   |   [8] V9 > 2 *   ## |   |   |   |   [9] V9 > 14 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V6 <= 80   ## |   |   |   [13] V5 <= 1 *   ## |   |   |   [14] V5 > 1 *   ## |   |   [15] V6 > 80   ## |   |   |   [16] V5 <= 0 *   ## |   |   |   [17] V5 > 0 *   ##    ## $nodes[[15]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V5 <= 1   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V8 <= 1275   ## |   |   |   |   |   [7] V3 <= 59 *   ## |   |   |   |   |   [8] V3 > 59   ## |   |   |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   |   |   [10] V5 > 0 *   ## |   |   |   |   [11] V8 > 1275 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V6 <= 90   ## |   |   |   |   |   [14] V8 <= 875 *   ## |   |   |   |   |   [15] V8 > 875 *   ## |   |   |   |   [16] V6 > 90 *   ## |   |   [17] V5 > 1 *   ##    ## $nodes[[16]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V9 <= 8 *   ## |   |   [4] V9 > 8 *   ## |   [5] V7 > 60   ## |   |   [6] V5 <= 1   ## |   |   |   [7] V5 <= 0   ## |   |   |   |   [8] V6 <= 90 *   ## |   |   |   |   [9] V6 > 90 *   ## |   |   |   [10] V5 > 0   ## |   |   |   |   [11] V4 <= 1   ## |   |   |   |   |   [12] V6 <= 80 *   ## |   |   |   |   |   [13] V6 > 80 *   ## |   |   |   |   [14] V4 > 1 *   ## |   |   [15] V5 > 1 *   ##    ## $nodes[[17]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V9 <= 10   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V9 > 10 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V6 <= 80 *   ## |   |   |   [10] V6 > 80 *   ## |   [11] V5 > 1   ## |   |   [12] V9 <= 10 *   ## |   |   [13] V9 > 10 *   ##    ## $nodes[[18]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 52 *   ## |   |   [4] V3 > 52   ## |   |   |   [5] V5 <= 0   ## |   |   |   |   [6] V6 <= 90 *   ## |   |   |   |   [7] V6 > 90 *   ## |   |   |   [8] V5 > 0   ## |   |   |   |   [9] V4 <= 1   ## |   |   |   |   |   [10] V3 <= 66 *   ## |   |   |   |   |   [11] V3 > 66 *   ## |   |   |   |   [12] V4 > 1 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 11 *   ## |   |   [15] V9 > 11 *   ##    ## $nodes[[19]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V9 <= 3 *   ## |   |   [4] V9 > 3 *   ## |   [5] V5 > 0   ## |   |   [6] V9 <= 27   ## |   |   |   [7] V5 <= 1   ## |   |   |   |   [8] V7 <= 80   ## |   |   |   |   |   [9] V7 <= 70 *   ## |   |   |   |   |   [10] V7 > 70 *   ## |   |   |   |   [11] V7 > 80 *   ## |   |   |   [12] V5 > 1 *   ## |   |   [13] V9 > 27 *   ##    ## $nodes[[20]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V9 <= 24   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70 *   ## |   |   [6] V9 > 24 *   ## |   [7] V7 > 70   ## |   |   [8] V4 <= 1   ## |   |   |   [9] V5 <= 0 *   ## |   |   |   [10] V5 > 0   ## |   |   |   |   [11] V9 <= 1 *   ## |   |   |   |   [12] V9 > 1 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V7 <= 90 *   ## |   |   |   [15] V7 > 90 *   ##    ## $nodes[[21]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V8 <= 1060   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V8 > 1060   ## |   |   |   |   [8] V6 <= 90 *   ## |   |   |   |   [9] V6 > 90 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V7 <= 80 *   ## |   |   |   [12] V7 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 20 *   ## |   |   [15] V9 > 20 *   ##    ## $nodes[[22]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0   ## |   |   |   |   [6] V4 <= 1   ## |   |   |   |   |   [7] V9 <= 10 *   ## |   |   |   |   |   [8] V9 > 10 *   ## |   |   |   |   [9] V4 > 1 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 11 *   ## |   |   [15] V9 > 11 *   ##    ## $nodes[[23]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70   ## |   |   |   |   [6] V2 <= 4 *   ## |   |   |   |   [7] V2 > 4   ## |   |   |   |   |   [8] V9 <= 5 *   ## |   |   |   |   |   [9] V9 > 5 *   ## |   |   [10] V9 > 20 *   ## |   [11] V4 > 1   ## |   |   [12] V5 <= 0 *   ## |   |   [13] V5 > 0   ## |   |   |   [14] V2 <= 12 *   ## |   |   |   [15] V2 > 12 *   ##    ## $nodes[[24]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V9 <= 13 *   ## |   |   [4] V9 > 13 *   ## |   [5] V7 > 60   ## |   |   [6] V3 <= 64   ## |   |   |   [7] V8 <= 1150   ## |   |   |   |   [8] V8 <= 925   ## |   |   |   |   |   [9] V8 <= 768 *   ## |   |   |   |   |   [10] V8 > 768 *   ## |   |   |   |   [11] V8 > 925 *   ## |   |   |   [12] V8 > 1150 *   ## |   |   [13] V3 > 64   ## |   |   |   [14] V7 <= 80 *   ## |   |   |   [15] V7 > 80 *   ##    ## $nodes[[25]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0 *   ## |   |   [8] V5 > 1 *   ## |   [9] V4 > 1   ## |   |   [10] V9 <= 3 *   ## |   |   [11] V9 > 3 *   ##    ## $nodes[[26]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V3 <= 64   ## |   |   |   |   [5] V7 <= 90 *   ## |   |   |   |   [6] V7 > 90 *   ## |   |   |   [7] V3 > 64 *   ## |   |   [8] V5 > 0   ## |   |   |   [9] V6 <= 80   ## |   |   |   |   [10] V2 <= 13   ## |   |   |   |   |   [11] V7 <= 70 *   ## |   |   |   |   |   [12] V7 > 70 *   ## |   |   |   |   [13] V2 > 13 *   ## |   |   |   [14] V6 > 80 *   ## |   [15] V5 > 1   ## |   |   [16] V9 <= 20 *   ## |   |   [17] V9 > 20 *   ##    ## $nodes[[27]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V7 <= 80   ## |   |   |   |   [5] V3 <= 66 *   ## |   |   |   |   [6] V3 > 66 *   ## |   |   |   [7] V7 > 80   ## |   |   |   |   [8] V8 <= 1025 *   ## |   |   |   |   [9] V8 > 1025 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= -1 *   ## |   |   [13] V9 > -1   ## |   |   |   [14] V6 <= 70 *   ## |   |   |   [15] V6 > 70   ## |   |   |   |   [16] V7 <= 80 *   ## |   |   |   |   [17] V7 > 80 *   ##    ## $nodes[[28]]   ## [1] root   ## |   [2] V7 <= 90   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V4 <= 1   ## |   |   |   |   [5] V8 <= 1225   ## |   |   |   |   |   [6] V8 <= 463 *   ## |   |   |   |   |   [7] V8 > 463   ## |   |   |   |   |   |   [8] V6 <= 80 *   ## |   |   |   |   |   |   [9] V6 > 80 *   ## |   |   |   |   [10] V8 > 1225 *   ## |   |   |   [11] V4 > 1   ## |   |   |   |   [12] V9 <= 4 *   ## |   |   |   |   [13] V9 > 4 *   ## |   |   [14] V5 > 1   ## |   |   |   [15] V4 <= 1 *   ## |   |   |   [16] V4 > 1 *   ## |   [17] V7 > 90 *   ##    ## $nodes[[29]]   ## [1] root   ## |   [2] V7 <= 90   ## |   |   [3] V8 <= 675   ## |   |   |   [4] V7 <= 80 *   ## |   |   |   [5] V7 > 80 *   ## |   |   [6] V8 > 675   ## |   |   |   [7] V7 <= 60 *   ## |   |   |   [8] V7 > 60   ## |   |   |   |   [9] V3 <= 64   ## |   |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   |   [11] V5 > 0   ## |   |   |   |   |   |   [12] V8 <= 975 *   ## |   |   |   |   |   |   [13] V8 > 975 *   ## |   |   |   |   [14] V3 > 64 *   ## |   [15] V7 > 90 *   ##    ## $nodes[[30]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V9 <= 18   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V2 <= 11 *   ## |   |   |   |   [7] V2 > 11 *   ## |   |   |   [8] V4 > 1   ## |   |   |   |   [9] V6 <= 90   ## |   |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   |   [11] V5 > 0   ## |   |   |   |   |   |   [12] V3 <= 56 *   ## |   |   |   |   |   |   [13] V3 > 56 *   ## |   |   |   |   [14] V6 > 90 *   ## |   |   [15] V9 > 18 *   ##    ## $nodes[[31]]   ## [1] root   ## |   [2] V7 <= 80   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 65 *   ## |   |   |   [5] V3 > 65 *   ## |   |   [6] V4 > 1   ## |   |   |   [7] V2 <= 10 *   ## |   |   |   [8] V2 > 10 *   ## |   [9] V7 > 80   ## |   |   [10] V5 <= 0 *   ## |   |   [11] V5 > 0   ## |   |   |   [12] V2 <= 13 *   ## |   |   |   [13] V2 > 13 *   ##    ## $nodes[[32]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V8 <= 575 *   ## |   |   |   [5] V8 > 575   ## |   |   |   |   [6] V2 <= 16   ## |   |   |   |   |   [7] V3 <= 60 *   ## |   |   |   |   |   [8] V3 > 60 *   ## |   |   |   |   [9] V2 > 16 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 80   ## |   |   |   [13] V9 <= 3 *   ## |   |   |   [14] V9 > 3 *   ## |   |   [15] V7 > 80 *   ##    ## $nodes[[33]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V9 <= 2 *   ## |   |   [4] V9 > 2 *   ## |   [5] V6 > 70   ## |   |   [6] V9 <= 3   ## |   |   |   [7] V4 <= 1 *   ## |   |   |   [8] V4 > 1 *   ## |   |   [9] V9 > 3   ## |   |   |   [10] V8 <= 575 *   ## |   |   |   [11] V8 > 575   ## |   |   |   |   [12] V7 <= 80 *   ## |   |   |   |   [13] V7 > 80 *   ##    ## $nodes[[34]]   ## [1] root   ## |   [2] V2 <= 12   ## |   |   [3] V8 <= 1175   ## |   |   |   [4] V7 <= 90   ## |   |   |   |   [5] V5 <= 1   ## |   |   |   |   |   [6] V3 <= 66 *   ## |   |   |   |   |   [7] V3 > 66 *   ## |   |   |   |   [8] V5 > 1 *   ## |   |   |   [9] V7 > 90 *   ## |   |   [10] V8 > 1175 *   ## |   [11] V2 > 12   ## |   |   [12] V7 <= 60 *   ## |   |   [13] V7 > 60   ## |   |   |   [14] V2 <= 15 *   ## |   |   |   [15] V2 > 15   ## |   |   |   |   [16] V2 <= 21 *   ## |   |   |   |   [17] V2 > 21 *   ##    ## $nodes[[35]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 45 *   ## |   |   [4] V3 > 45   ## |   |   |   [5] V9 <= 4   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   |   [9] V7 > 80 *   ## |   |   |   [10] V9 > 4   ## |   |   |   |   [11] V4 <= 1   ## |   |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   |   [13] V5 > 0   ## |   |   |   |   |   |   [14] V2 <= 11 *   ## |   |   |   |   |   |   [15] V2 > 11 *   ## |   |   |   |   [16] V4 > 1 *   ## |   [17] V5 > 1   ## |   |   [18] V9 <= 10 *   ## |   |   [19] V9 > 10 *   ##    ## $nodes[[36]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V9 <= 6   ## |   |   |   |   [5] V2 <= 5 *   ## |   |   |   |   [6] V2 > 5 *   ## |   |   |   [7] V9 > 6 *   ## |   |   [8] V5 > 0   ## |   |   |   [9] V4 <= 1   ## |   |   |   |   [10] V3 <= 59 *   ## |   |   |   |   [11] V3 > 59   ## |   |   |   |   |   [12] V8 <= 825 *   ## |   |   |   |   |   [13] V8 > 825 *   ## |   |   |   [14] V4 > 1 *   ## |   [15] V5 > 1   ## |   |   [16] V7 <= 60 *   ## |   |   [17] V7 > 60 *   ##    ## $nodes[[37]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V9 <= 12 *   ## |   |   [4] V9 > 12 *   ## |   [5] V7 > 60   ## |   |   [6] V8 <= 1100   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V9 <= 20   ## |   |   |   |   |   [9] V6 <= 80 *   ## |   |   |   |   |   [10] V6 > 80 *   ## |   |   |   |   [11] V9 > 20 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V7 <= 80 *   ## |   |   |   |   [14] V7 > 80 *   ## |   |   [15] V8 > 1100   ## |   |   |   [16] V9 <= 2 *   ## |   |   |   [17] V9 > 2 *   ##    ## $nodes[[38]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V5 <= 1   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V5 <= 0   ## |   |   |   |   |   [7] V9 <= 5 *   ## |   |   |   |   |   [8] V9 > 5 *   ## |   |   |   |   [9] V5 > 0   ## |   |   |   |   |   [10] V3 <= 63 *   ## |   |   |   |   |   [11] V3 > 63 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V9 <= 4 *   ## |   |   |   |   [14] V9 > 4 *   ## |   |   [15] V5 > 1 *   ##    ## $nodes[[39]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V4 <= 1 *   ## |   |   |   [5] V4 > 1 *   ## |   |   [6] V9 > 20 *   ## |   [7] V7 > 70   ## |   |   [8] V5 <= 0   ## |   |   |   [9] V6 <= 90 *   ## |   |   |   [10] V6 > 90 *   ## |   |   [11] V5 > 0   ## |   |   |   [12] V2 <= 12   ## |   |   |   |   [13] V6 <= 80   ## |   |   |   |   |   [14] V9 <= 14 *   ## |   |   |   |   |   [15] V9 > 14 *   ## |   |   |   |   [16] V6 > 80 *   ## |   |   |   [17] V2 > 12 *   ##    ## $nodes[[40]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V9 <= 4   ## |   |   |   |   [5] V4 <= 1 *   ## |   |   |   |   [6] V4 > 1 *   ## |   |   |   [7] V9 > 4   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V7 <= 80   ## |   |   |   |   |   |   [10] V7 <= 70 *   ## |   |   |   |   |   |   [11] V7 > 70 *   ## |   |   |   |   |   [12] V7 > 80 *   ## |   |   |   |   [13] V4 > 1 *   ## |   |   [14] V7 > 90 *   ## |   [15] V5 > 1   ## |   |   [16] V3 <= 65 *   ## |   |   [17] V3 > 65 *   ##    ## $nodes[[41]]   ## [1] root   ## |   [2] V3 <= 67   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V3 <= 56 *   ## |   |   |   [5] V3 > 56   ## |   |   |   |   [6] V2 <= 15 *   ## |   |   |   |   [7] V2 > 15 *   ## |   |   [8] V6 > 80   ## |   |   |   [9] V5 <= 0   ## |   |   |   |   [10] V3 <= 56 *   ## |   |   |   |   [11] V3 > 56 *   ## |   |   |   [12] V5 > 0 *   ## |   [13] V3 > 67   ## |   |   [14] V9 <= 14   ## |   |   |   [15] V6 <= 80   ## |   |   |   |   [16] V5 <= 1 *   ## |   |   |   |   [17] V5 > 1 *   ## |   |   |   [18] V6 > 80 *   ## |   |   [19] V9 > 14 *   ##    ## $nodes[[42]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 70   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V7 <= 70 *   ## |   |   |   |   [6] V7 > 70   ## |   |   |   |   |   [7] V5 <= 0 *   ## |   |   |   |   |   [8] V5 > 0 *   ## |   |   |   [9] V5 > 1 *   ## |   |   [10] V3 > 70 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 70 *   ## |   |   [13] V7 > 70   ## |   |   |   [14] V2 <= 12   ## |   |   |   |   [15] V5 <= 0 *   ## |   |   |   |   [16] V5 > 0 *   ## |   |   |   [17] V2 > 12 *   ##    ## $nodes[[43]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V6 <= 90 *   ## |   |   [4] V6 > 90 *   ## |   [5] V5 > 0   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V2 <= 7   ## |   |   |   |   [8] V7 <= 60 *   ## |   |   |   |   [9] V7 > 60 *   ## |   |   |   [10] V2 > 7   ## |   |   |   |   [11] V6 <= 70 *   ## |   |   |   |   [12] V6 > 70 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V8 <= 675 *   ## |   |   |   [15] V8 > 675 *   ##    ## $nodes[[44]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V6 <= 90 *   ## |   |   |   [5] V6 > 90 *   ## |   |   [6] V5 > 0   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V7 <= 60 *   ## |   |   |   |   [9] V7 > 60   ## |   |   |   |   |   [10] V6 <= 80 *   ## |   |   |   |   |   [11] V6 > 80 *   ## |   |   |   [12] V4 > 1 *   ## |   [13] V5 > 1   ## |   |   [14] V7 <= 60 *   ## |   |   [15] V7 > 60 *   ##    ## $nodes[[45]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 67   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V3 <= 57 *   ## |   |   |   |   |   [9] V3 > 57 *   ## |   |   [10] V3 > 67   ## |   |   |   [11] V9 <= 10 *   ## |   |   |   [12] V9 > 10 *   ## |   [13] V4 > 1   ## |   |   [14] V5 <= 0 *   ## |   |   [15] V5 > 0   ## |   |   |   [16] V9 <= 0 *   ## |   |   |   [17] V9 > 0 *   ##    ## $nodes[[46]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V7 <= 90 *   ## |   |   [4] V7 > 90 *   ## |   [5] V5 > 0   ## |   |   [6] V7 <= 60 *   ## |   |   [7] V7 > 60   ## |   |   |   [8] V2 <= 5 *   ## |   |   |   [9] V2 > 5   ## |   |   |   |   [10] V3 <= 59 *   ## |   |   |   |   [11] V3 > 59   ## |   |   |   |   |   [12] V5 <= 1   ## |   |   |   |   |   |   [13] V6 <= 80 *   ## |   |   |   |   |   |   [14] V6 > 80 *   ## |   |   |   |   |   [15] V5 > 1 *   ##    ## $nodes[[47]]   ## [1] root   ## |   [2] V3 <= 64   ## |   |   [3] V8 <= 1175   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0   ## |   |   |   |   [6] V8 <= 925   ## |   |   |   |   |   [7] V9 <= 14 *   ## |   |   |   |   |   [8] V9 > 14 *   ## |   |   |   |   [9] V8 > 925 *   ## |   |   [10] V8 > 1175 *   ## |   [11] V3 > 64   ## |   |   [12] V9 <= 20   ## |   |   |   [13] V6 <= 70 *   ## |   |   |   [14] V6 > 70   ## |   |   |   |   [15] V5 <= 0 *   ## |   |   |   |   [16] V5 > 0 *   ## |   |   [17] V9 > 20 *   ##    ## $nodes[[48]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60 *   ## |   [5] V6 > 70   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V3 <= 65   ## |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   [9] V7 > 80 *   ## |   |   |   [10] V3 > 65 *   ## |   |   [11] V4 > 1   ## |   |   |   [12] V5 <= 0 *   ## |   |   |   [13] V5 > 0 *   ##    ## $nodes[[49]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 70 *   ## |   |   [4] V7 > 70   ## |   |   |   [5] V9 <= 12   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80   ## |   |   |   |   |   [8] V5 <= 0   ## |   |   |   |   |   |   [9] V3 <= 51 *   ## |   |   |   |   |   |   [10] V3 > 51 *   ## |   |   |   |   |   [11] V5 > 0 *   ## |   |   |   [12] V9 > 12 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 20 *   ## |   |   [15] V9 > 20 *   ##    ## $nodes[[50]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V9 <= 20   ## |   |   |   |   [5] V6 <= 70 *   ## |   |   |   |   [6] V6 > 70 *   ## |   |   |   [7] V9 > 20 *   ## |   |   [8] V4 > 1 *   ## |   [9] V7 > 70   ## |   |   [10] V3 <= 63   ## |   |   |   [11] V4 <= 1   ## |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   [13] V5 > 0 *   ## |   |   |   [14] V4 > 1 *   ## |   |   [15] V3 > 63   ## |   |   |   [16] V9 <= 3 *   ## |   |   |   [17] V9 > 3 *   ##    ## $nodes[[51]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V2 <= 3 *   ## |   |   |   [5] V2 > 3 *   ## |   |   [6] V9 > 20 *   ## |   [7] V7 > 70   ## |   |   [8] V3 <= 63   ## |   |   |   [9] V4 <= 1 *   ## |   |   |   [10] V4 > 1 *   ## |   |   [11] V3 > 63   ## |   |   |   [12] V8 <= 1100   ## |   |   |   |   [13] V4 <= 1 *   ## |   |   |   |   [14] V4 > 1 *   ## |   |   |   [15] V8 > 1100 *   ##    ## $nodes[[52]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V6 > 70   ## |   |   [6] V5 <= 0   ## |   |   |   [7] V3 <= 63   ## |   |   |   |   [8] V8 <= 768 *   ## |   |   |   |   [9] V8 > 768 *   ## |   |   |   [10] V3 > 63 *   ## |   |   [11] V5 > 0   ## |   |   |   [12] V4 <= 1   ## |   |   |   |   [13] V8 <= 825 *   ## |   |   |   |   [14] V8 > 825 *   ## |   |   |   [15] V4 > 1   ## |   |   |   |   [16] V3 <= 63 *   ## |   |   |   |   [17] V3 > 63 *   ##    ## $nodes[[53]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V5 <= 1   ## |   |   |   |   [6] V3 <= 65   ## |   |   |   |   |   [7] V5 <= 0 *   ## |   |   |   |   |   [8] V5 > 0   ## |   |   |   |   |   |   [9] V3 <= 53 *   ## |   |   |   |   |   |   [10] V3 > 53 *   ## |   |   |   |   [11] V3 > 65 *   ## |   |   |   [12] V5 > 1 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V7 <= 80 *   ## |   |   |   [15] V7 > 80 *   ##    ## $nodes[[54]]   ## [1] root   ## |   [2] V3 <= 45 *   ## |   [3] V3 > 45   ## |   |   [4] V7 <= 70   ## |   |   |   [5] V2 <= 3 *   ## |   |   |   [6] V2 > 3   ## |   |   |   |   [7] V9 <= 13   ## |   |   |   |   |   [8] V8 <= 1025 *   ## |   |   |   |   |   [9] V8 > 1025 *   ## |   |   |   |   [10] V9 > 13 *   ## |   |   [11] V7 > 70   ## |   |   |   [12] V5 <= 0 *   ## |   |   |   [13] V5 > 0   ## |   |   |   |   [14] V4 <= 1   ## |   |   |   |   |   [15] V7 <= 90 *   ## |   |   |   |   |   [16] V7 > 90 *   ## |   |   |   |   [17] V4 > 1 *   ##    ## $nodes[[55]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V7 <= 80   ## |   |   |   [5] V8 <= 538 *   ## |   |   |   [6] V8 > 538   ## |   |   |   |   [7] V6 <= 80 *   ## |   |   |   |   [8] V6 > 80 *   ## |   |   [9] V7 > 80   ## |   |   |   [10] V2 <= 10   ## |   |   |   |   [11] V7 <= 90 *   ## |   |   |   |   [12] V7 > 90 *   ## |   |   |   [13] V2 > 10   ## |   |   |   |   [14] V4 <= 1 *   ## |   |   |   |   [15] V4 > 1 *   ##    ## $nodes[[56]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V7 <= 80 *   ## |   |   [4] V7 > 80 *   ## |   [5] V5 > 0   ## |   |   [6] V2 <= 10   ## |   |   |   [7] V5 <= 1 *   ## |   |   |   [8] V5 > 1 *   ## |   |   [9] V2 > 10   ## |   |   |   [10] V9 <= 20   ## |   |   |   |   [11] V7 <= 80 *   ## |   |   |   |   [12] V7 > 80 *   ## |   |   |   [13] V9 > 20 *   ##    ## $nodes[[57]]   ## [1] root   ## |   [2] V3 <= 48 *   ## |   [3] V3 > 48   ## |   |   [4] V7 <= 80   ## |   |   |   [5] V5 <= 0 *   ## |   |   |   [6] V5 > 0   ## |   |   |   |   [7] V3 <= 63 *   ## |   |   |   |   [8] V3 > 63   ## |   |   |   |   |   [9] V9 <= 20 *   ## |   |   |   |   |   [10] V9 > 20 *   ## |   |   [11] V7 > 80   ## |   |   |   [12] V5 <= 0 *   ## |   |   |   [13] V5 > 0   ## |   |   |   |   [14] V7 <= 90 *   ## |   |   |   |   [15] V7 > 90 *   ##    ## $nodes[[58]]   ## [1] root   ## |   [2] V3 <= 44 *   ## |   [3] V3 > 44   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V7 <= 60 *   ## |   |   |   [6] V7 > 60   ## |   |   |   |   [7] V2 <= 11   ## |   |   |   |   |   [8] V3 <= 64 *   ## |   |   |   |   |   [9] V3 > 64 *   ## |   |   |   |   [10] V2 > 11   ## |   |   |   |   |   [11] V9 <= 5 *   ## |   |   |   |   |   [12] V9 > 5 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V5 <= 1   ## |   |   |   |   [15] V2 <= 12 *   ## |   |   |   |   [16] V2 > 12 *   ## |   |   |   [17] V5 > 1 *   ##    ## $nodes[[59]]   ## [1] root   ## |   [2] V8 <= 488 *   ## |   [3] V8 > 488   ## |   |   [4] V5 <= 0   ## |   |   |   [5] V4 <= 1 *   ## |   |   |   [6] V4 > 1 *   ## |   |   [7] V5 > 0   ## |   |   |   [8] V9 <= 20   ## |   |   |   |   [9] V8 <= 1100   ## |   |   |   |   |   [10] V5 <= 1   ## |   |   |   |   |   |   [11] V2 <= 12 *   ## |   |   |   |   |   |   [12] V2 > 12 *   ## |   |   |   |   |   [13] V5 > 1 *   ## |   |   |   |   [14] V8 > 1100 *   ## |   |   |   [15] V9 > 20 *   ##    ## $nodes[[60]]   ## [1] root   ## |   [2] V6 <= 80   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V7 <= 80 *   ## |   |   |   |   [6] V7 > 80 *   ## |   |   |   [7] V5 > 1 *   ## |   |   [8] V9 > 20 *   ## |   [9] V6 > 80   ## |   |   [10] V4 <= 1   ## |   |   |   [11] V2 <= 13   ## |   |   |   |   [12] V9 <= 5 *   ## |   |   |   |   [13] V9 > 5 *   ## |   |   |   [14] V2 > 13 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[61]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V8 <= 1039 *   ## |   |   |   |   [7] V8 > 1039 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V6 <= 80 *   ## |   |   |   [10] V6 > 80   ## |   |   |   |   [11] V9 <= 2 *   ## |   |   |   |   [12] V9 > 2 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 10 *   ## |   |   [15] V9 > 10 *   ##    ## $nodes[[62]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 63   ## |   |   |   [4] V8 <= 1025   ## |   |   |   |   [5] V4 <= 1 *   ## |   |   |   |   [6] V4 > 1 *   ## |   |   |   [7] V8 > 1025   ## |   |   |   |   [8] V2 <= 5 *   ## |   |   |   |   [9] V2 > 5 *   ## |   |   [10] V3 > 63   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V2 <= 5 *   ## |   |   [15] V2 > 5 *   ##    ## $nodes[[63]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V8 <= 910   ## |   |   |   [4] V9 <= 20 *   ## |   |   |   [5] V9 > 20 *   ## |   |   [6] V8 > 910   ## |   |   |   [7] V8 <= 1225   ## |   |   |   |   [8] V5 <= 0 *   ## |   |   |   |   [9] V5 > 0 *   ## |   |   |   [10] V8 > 1225 *   ## |   [11] V4 > 1   ## |   |   [12] V8 <= 825   ## |   |   |   [13] V6 <= 80 *   ## |   |   |   [14] V6 > 80 *   ## |   |   [15] V8 > 825   ## |   |   |   [16] V5 <= 0 *   ## |   |   |   [17] V5 > 0 *   ##    ## $nodes[[64]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 65   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0 *   ## |   |   [6] V3 > 65   ## |   |   |   [7] V8 <= 925 *   ## |   |   |   [8] V8 > 925 *   ## |   [9] V4 > 1   ## |   |   [10] V5 <= 1   ## |   |   |   [11] V7 <= 80 *   ## |   |   |   [12] V7 > 80 *   ## |   |   [13] V5 > 1 *   ##    ## $nodes[[65]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V6 <= 90 *   ## |   |   [4] V6 > 90 *   ## |   [5] V5 > 0   ## |   |   [6] V5 <= 1   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V9 <= 2 *   ## |   |   |   |   [9] V9 > 2 *   ## |   |   |   [10] V4 > 1   ## |   |   |   |   [11] V8 <= 825 *   ## |   |   |   |   [12] V8 > 825 *   ## |   |   [13] V5 > 1   ## |   |   |   [14] V8 <= 925 *   ## |   |   |   [15] V8 > 925 *   ##    ## $nodes[[66]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V8 <= 730 *   ## |   |   |   [6] V8 > 730   ## |   |   |   |   [7] V6 <= 80 *   ## |   |   |   |   [8] V6 > 80   ## |   |   |   |   |   [9] V2 <= 13 *   ## |   |   |   |   |   [10] V2 > 13 *   ## |   |   [11] V4 > 1   ## |   |   |   [12] V3 <= 54 *   ## |   |   |   [13] V3 > 54   ## |   |   |   |   [14] V2 <= 10 *   ## |   |   |   |   [15] V2 > 10 *   ##    ## $nodes[[67]]   ## [1] root   ## |   [2] V3 <= 71   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80   ## |   |   |   |   |   [8] V5 <= 0 *   ## |   |   |   |   |   [9] V5 > 0 *   ## |   |   |   [10] V4 > 1   ## |   |   |   |   [11] V2 <= 12 *   ## |   |   |   |   [12] V2 > 12 *   ## |   [13] V3 > 71 *   ##    ## $nodes[[68]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V3 <= 69   ## |   |   |   |   [5] V2 <= 13 *   ## |   |   |   |   [6] V2 > 13 *   ## |   |   |   [7] V3 > 69 *   ## |   |   [8] V6 > 80   ## |   |   |   [9] V2 <= 13   ## |   |   |   |   [10] V2 <= 6 *   ## |   |   |   |   [11] V2 > 6 *   ## |   |   |   [12] V2 > 13 *   ## |   [13] V4 > 1   ## |   |   [14] V8 <= 1060   ## |   |   |   [15] V6 <= 80 *   ## |   |   |   [16] V6 > 80 *   ## |   |   [17] V8 > 1060 *   ##    ## $nodes[[69]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V2 <= 6 *   ## |   |   |   [6] V2 > 6   ## |   |   |   |   [7] V3 <= 63 *   ## |   |   |   |   [8] V3 > 63 *   ## |   [9] V4 > 1   ## |   |   [10] V7 <= 90   ## |   |   |   [11] V9 <= 0 *   ## |   |   |   [12] V9 > 0   ## |   |   |   |   [13] V5 <= 1 *   ## |   |   |   |   [14] V5 > 1 *   ## |   |   [15] V7 > 90 *   ##    ## $nodes[[70]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 71   ## |   |   |   [4] V9 <= 20   ## |   |   |   |   [5] V6 <= 90   ## |   |   |   |   |   [6] V8 <= 1125   ## |   |   |   |   |   |   [7] V9 <= 7 *   ## |   |   |   |   |   |   [8] V9 > 7 *   ## |   |   |   |   |   [9] V8 > 1125 *   ## |   |   |   |   [10] V6 > 90 *   ## |   |   |   [11] V9 > 20 *   ## |   |   [12] V3 > 71 *   ## |   [13] V4 > 1   ## |   |   [14] V5 <= 0 *   ## |   |   [15] V5 > 0   ## |   |   |   [16] V2 <= 12 *   ## |   |   |   [17] V2 > 12 *   ##    ## $nodes[[71]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V7 <= 90 *   ## |   |   |   [5] V7 > 90 *   ## |   |   [6] V3 > 64 *   ## |   [7] V5 > 0   ## |   |   [8] V7 <= 60 *   ## |   |   [9] V7 > 60   ## |   |   |   [10] V4 <= 1   ## |   |   |   |   [11] V9 <= 20   ## |   |   |   |   |   [12] V8 <= 1025 *   ## |   |   |   |   |   [13] V8 > 1025 *   ## |   |   |   |   [14] V9 > 20 *   ## |   |   |   [15] V4 > 1   ## |   |   |   |   [16] V2 <= 12 *   ## |   |   |   |   [17] V2 > 12 *   ##    ## $nodes[[72]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V2 <= 3 *   ## |   |   [4] V2 > 3   ## |   |   |   [5] V4 <= 1 *   ## |   |   |   [6] V4 > 1 *   ## |   [7] V7 > 70   ## |   |   [8] V5 <= 0   ## |   |   |   [9] V7 <= 90 *   ## |   |   |   [10] V7 > 90 *   ## |   |   [11] V5 > 0   ## |   |   |   [12] V4 <= 1   ## |   |   |   |   [13] V3 <= 59 *   ## |   |   |   |   [14] V3 > 59 *   ## |   |   |   [15] V4 > 1 *   ##    ## $nodes[[73]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V6 <= 80   ## |   |   |   |   [5] V7 <= 80 *   ## |   |   |   |   [6] V7 > 80 *   ## |   |   |   [7] V6 > 80   ## |   |   |   |   [8] V3 <= 65 *   ## |   |   |   |   [9] V3 > 65 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 11 *   ## |   |   [15] V9 > 11 *   ##    ## $nodes[[74]]   ## [1] root   ## |   [2] V6 <= 80   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V9 <= 20   ## |   |   |   |   [5] V9 <= 8 *   ## |   |   |   |   [6] V9 > 8 *   ## |   |   |   [7] V9 > 20 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V6 <= 60 *   ## |   |   |   [10] V6 > 60 *   ## |   [11] V6 > 80   ## |   |   [12] V4 <= 1   ## |   |   |   [13] V9 <= 5 *   ## |   |   |   [14] V9 > 5 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[75]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0   ## |   |   |   |   [6] V9 <= 14   ## |   |   |   |   |   [7] V7 <= 80 *   ## |   |   |   |   |   [8] V7 > 80 *   ## |   |   |   |   [9] V9 > 14 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V9 <= 10 *   ## |   |   |   [12] V9 > 10 *   ## |   [13] V5 > 1   ## |   |   [14] V2 <= 13 *   ## |   |   [15] V2 > 13 *   ##    ## $nodes[[76]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V3 <= 64   ## |   |   |   [5] V6 <= 80 *   ## |   |   |   [6] V6 > 80   ## |   |   |   |   [7] V2 <= 13 *   ## |   |   |   |   [8] V2 > 13 *   ## |   |   [9] V3 > 64   ## |   |   |   [10] V8 <= 575 *   ## |   |   |   [11] V8 > 575   ## |   |   |   |   [12] V8 <= 910 *   ## |   |   |   |   [13] V8 > 910   ## |   |   |   |   |   [14] V8 <= 1100 *   ## |   |   |   |   |   [15] V8 > 1100 *   ##    ## $nodes[[77]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V5 <= 1   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V8 <= 825 *   ## |   |   |   |   |   [9] V8 > 825   ## |   |   |   |   |   |   [10] V7 <= 80 *   ## |   |   |   |   |   |   [11] V7 > 80 *   ## |   |   |   [12] V5 > 1 *   ## |   [13] V4 > 1   ## |   |   [14] V9 <= -1 *   ## |   |   [15] V9 > -1   ## |   |   |   [16] V7 <= 80 *   ## |   |   |   [17] V7 > 80 *   ##    ## $nodes[[78]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V3 <= 68   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80   ## |   |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   |   [9] V7 > 80 *   ## |   |   |   [10] V3 > 68 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= -1 *   ## |   |   [13] V9 > -1   ## |   |   |   [14] V6 <= 70 *   ## |   |   |   [15] V6 > 70   ## |   |   |   |   [16] V8 <= 925 *   ## |   |   |   |   [17] V8 > 925 *   ##    ## $nodes[[79]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V8 <= 463 *   ## |   |   |   [5] V8 > 463   ## |   |   |   |   [6] V7 <= 80 *   ## |   |   |   |   [7] V7 > 80 *   ## |   |   [8] V5 > 0   ## |   |   |   [9] V6 <= 80   ## |   |   |   |   [10] V9 <= 0 *   ## |   |   |   |   [11] V9 > 0   ## |   |   |   |   |   [12] V3 <= 66 *   ## |   |   |   |   |   [13] V3 > 66 *   ## |   |   |   [14] V6 > 80   ## |   |   |   |   [15] V4 <= 1 *   ## |   |   |   |   [16] V4 > 1 *   ## |   [17] V5 > 1   ## |   |   [18] V4 <= 1 *   ## |   |   [19] V4 > 1 *   ##    ## $nodes[[80]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V6 <= 80   ## |   |   |   |   [5] V2 <= 11 *   ## |   |   |   |   [6] V2 > 11 *   ## |   |   |   [7] V6 > 80   ## |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   [9] V7 > 80 *   ## |   |   [10] V7 > 90 *   ## |   [11] V5 > 1   ## |   |   [12] V2 <= 13 *   ## |   |   [13] V2 > 13 *   ##    ## $nodes[[81]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V2 <= 11 *   ## |   |   [4] V2 > 11 *   ## |   [5] V5 > 0   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V9 <= 20   ## |   |   |   |   [8] V6 <= 70 *   ## |   |   |   |   [9] V6 > 70   ## |   |   |   |   |   [10] V9 <= 8 *   ## |   |   |   |   |   [11] V9 > 8 *   ## |   |   |   [12] V9 > 20 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V9 <= 10 *   ## |   |   |   [15] V9 > 10 *   ##    ## $nodes[[82]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 65   ## |   |   |   |   [5] V9 <= 1 *   ## |   |   |   |   [6] V9 > 1   ## |   |   |   |   |   [7] V2 <= 4 *   ## |   |   |   |   |   [8] V2 > 4 *   ## |   |   |   [9] V3 > 65   ## |   |   |   |   [10] V6 <= 80 *   ## |   |   |   |   [11] V6 > 80 *   ## |   |   [12] V4 > 1   ## |   |   |   [13] V7 <= 80 *   ## |   |   |   [14] V7 > 80 *   ## |   [15] V5 > 1   ## |   |   [16] V9 <= 20 *   ## |   |   [17] V9 > 20 *   ##    ## $nodes[[83]]   ## [1] root   ## |   [2] V3 <= 70   ## |   |   [3] V8 <= 925   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0   ## |   |   |   |   [6] V2 <= 6 *   ## |   |   |   |   [7] V2 > 6 *   ## |   |   [8] V8 > 925   ## |   |   |   [9] V4 <= 1   ## |   |   |   |   [10] V8 <= 1025 *   ## |   |   |   |   [11] V8 > 1025 *   ## |   |   |   [12] V4 > 1 *   ## |   [13] V3 > 70 *   ##    ## $nodes[[84]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V2 <= 12   ## |   |   |   [4] V9 <= 3 *   ## |   |   |   [5] V9 > 3 *   ## |   |   [6] V2 > 12 *   ## |   [7] V5 > 0   ## |   |   [8] V3 <= 50 *   ## |   |   [9] V3 > 50   ## |   |   |   [10] V5 <= 1   ## |   |   |   |   [11] V2 <= 13   ## |   |   |   |   |   [12] V9 <= 14 *   ## |   |   |   |   |   [13] V9 > 14 *   ## |   |   |   |   [14] V2 > 13 *   ## |   |   |   [15] V5 > 1   ## |   |   |   |   [16] V2 <= 13 *   ## |   |   |   |   [17] V2 > 13 *   ##    ## $nodes[[85]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V9 <= 13 *   ## |   |   [4] V9 > 13 *   ## |   [5] V7 > 60   ## |   |   [6] V6 <= 70 *   ## |   |   [7] V6 > 70   ## |   |   |   [8] V2 <= 13   ## |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   [10] V5 > 0   ## |   |   |   |   |   [11] V9 <= 13 *   ## |   |   |   |   |   [12] V9 > 13 *   ## |   |   |   [13] V2 > 13 *   ##    ## $nodes[[86]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V9 <= 2 *   ## |   |   [4] V9 > 2   ## |   |   |   [5] V3 <= 70   ## |   |   |   |   [6] V6 <= 80   ## |   |   |   |   |   [7] V3 <= 62 *   ## |   |   |   |   |   [8] V3 > 62 *   ## |   |   |   |   [9] V6 > 80 *   ## |   |   |   [10] V3 > 70 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 90   ## |   |   |   [13] V2 <= 12   ## |   |   |   |   [14] V2 <= 3 *   ## |   |   |   |   [15] V2 > 3 *   ## |   |   |   [16] V2 > 12 *   ## |   |   [17] V7 > 90 *   ##    ## $nodes[[87]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V9 <= 14 *   ## |   |   [4] V9 > 14 *   ## |   [5] V7 > 60   ## |   |   [6] V5 <= 1   ## |   |   |   [7] V9 <= 5   ## |   |   |   |   [8] V6 <= 80 *   ## |   |   |   |   [9] V6 > 80   ## |   |   |   |   |   [10] V7 <= 80 *   ## |   |   |   |   |   [11] V7 > 80   ## |   |   |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   |   |   [13] V5 > 0 *   ## |   |   |   [14] V9 > 5   ## |   |   |   |   [15] V4 <= 1 *   ## |   |   |   |   [16] V4 > 1 *   ## |   |   [17] V5 > 1 *   ##    ## $nodes[[88]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V8 <= 875   ## |   |   |   [4] V3 <= 64 *   ## |   |   |   [5] V3 > 64 *   ## |   |   [6] V8 > 875   ## |   |   |   [7] V7 <= 70 *   ## |   |   |   [8] V7 > 70   ## |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   [10] V5 > 0 *   ## |   [11] V4 > 1   ## |   |   [12] V6 <= 70 *   ## |   |   [13] V6 > 70   ## |   |   |   [14] V9 <= 3 *   ## |   |   |   [15] V9 > 3 *   ##    ## $nodes[[89]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V2 <= 16   ## |   |   |   |   [6] V8 <= 575 *   ## |   |   |   |   [7] V8 > 575   ## |   |   |   |   |   [8] V5 <= 0 *   ## |   |   |   |   |   [9] V5 > 0 *   ## |   |   |   [10] V2 > 16 *   ## |   [11] V4 > 1   ## |   |   [12] V6 <= 70 *   ## |   |   [13] V6 > 70   ## |   |   |   [14] V9 <= 14   ## |   |   |   |   [15] V2 <= 5 *   ## |   |   |   |   [16] V2 > 5 *   ## |   |   |   [17] V9 > 14 *   ##    ## $nodes[[90]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V8 <= 1275   ## |   |   |   |   [6] V5 <= 1   ## |   |   |   |   |   [7] V6 <= 80 *   ## |   |   |   |   |   [8] V6 > 80 *   ## |   |   |   |   [9] V5 > 1 *   ## |   |   |   [10] V8 > 1275 *   ## |   [11] V4 > 1   ## |   |   [12] V6 <= 70 *   ## |   |   [13] V6 > 70   ## |   |   |   [14] V7 <= 80 *   ## |   |   |   [15] V7 > 80 *   ##    ## $nodes[[91]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60 *   ## |   [5] V7 > 70   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V5 <= 0 *   ## |   |   |   [8] V5 > 0   ## |   |   |   |   [9] V7 <= 80 *   ## |   |   |   |   [10] V7 > 80 *   ## |   |   [11] V4 > 1   ## |   |   |   [12] V7 <= 80 *   ## |   |   |   [13] V7 > 80 *   ##    ## $nodes[[92]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 70 *   ## |   |   [4] V7 > 70   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V9 <= 5 *   ## |   |   |   |   [7] V9 > 5 *   ## |   |   |   [8] V4 > 1   ## |   |   |   |   [9] V2 <= 12   ## |   |   |   |   |   [10] V3 <= 64 *   ## |   |   |   |   |   [11] V3 > 64 *   ## |   |   |   |   [12] V2 > 12 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 11 *   ## |   |   [15] V9 > 11 *   ##    ## $nodes[[93]]   ## [1] root   ## |   [2] V3 <= 51 *   ## |   [3] V3 > 51   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V7 <= 80   ## |   |   |   |   [6] V3 <= 65 *   ## |   |   |   |   [7] V3 > 65   ## |   |   |   |   |   [8] V9 <= 17 *   ## |   |   |   |   |   [9] V9 > 17 *   ## |   |   |   [10] V7 > 80   ## |   |   |   |   [11] V8 <= 993 *   ## |   |   |   |   [12] V8 > 993 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0   ## |   |   |   |   [16] V3 <= 60 *   ## |   |   |   |   [17] V3 > 60 *   ##    ## $nodes[[94]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V9 <= 12   ## |   |   |   [4] V5 <= 0   ## |   |   |   |   [5] V4 <= 1 *   ## |   |   |   |   [6] V4 > 1 *   ## |   |   |   [7] V5 > 0   ## |   |   |   |   [8] V4 <= 1 *   ## |   |   |   |   [9] V4 > 1 *   ## |   |   [10] V9 > 12   ## |   |   |   [11] V4 <= 1 *   ## |   |   |   [12] V4 > 1 *   ## |   [13] V5 > 1   ## |   |   [14] V7 <= 60 *   ## |   |   [15] V7 > 60 *   ##    ## $nodes[[95]]   ## [1] root   ## |   [2] V3 <= 46 *   ## |   [3] V3 > 46   ## |   |   [4] V7 <= 60   ## |   |   |   [5] V9 <= 13 *   ## |   |   |   [6] V9 > 13 *   ## |   |   [7] V7 > 60   ## |   |   |   [8] V6 <= 70 *   ## |   |   |   [9] V6 > 70   ## |   |   |   |   [10] V3 <= 63   ## |   |   |   |   |   [11] V5 <= 0 *   ## |   |   |   |   |   [12] V5 > 0 *   ## |   |   |   |   [13] V3 > 63   ## |   |   |   |   |   [14] V8 <= 993 *   ## |   |   |   |   |   [15] V8 > 993 *   ##    ## $nodes[[96]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V3 <= 64   ## |   |   |   [5] V9 <= 3   ## |   |   |   |   [6] V9 <= -1 *   ## |   |   |   |   [7] V9 > -1 *   ## |   |   |   [8] V9 > 3   ## |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   [10] V5 > 0 *   ## |   |   [11] V3 > 64   ## |   |   |   [12] V5 <= 1   ## |   |   |   |   [13] V3 <= 68 *   ## |   |   |   |   [14] V3 > 68 *   ## |   |   |   [15] V5 > 1 *   ##    ## $nodes[[97]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V9 <= 24   ## |   |   |   |   [6] V6 <= 70 *   ## |   |   |   |   [7] V6 > 70 *   ## |   |   |   [8] V9 > 24 *   ## |   [9] V4 > 1   ## |   |   [10] V5 <= 1   ## |   |   |   [11] V9 <= 2 *   ## |   |   |   [12] V9 > 2 *   ## |   |   [13] V5 > 1 *   ##    ## $nodes[[98]]   ## [1] root   ## |   [2] V7 <= 90   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V9 <= 2   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V9 > 2   ## |   |   |   |   [8] V8 <= 1175   ## |   |   |   |   |   [9] V6 <= 80 *   ## |   |   |   |   |   [10] V6 > 80 *   ## |   |   |   |   [11] V8 > 1175 *   ## |   |   [12] V5 > 1   ## |   |   |   [13] V9 <= 20 *   ## |   |   |   [14] V9 > 20 *   ## |   [15] V7 > 90 *   ##    ## $nodes[[99]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V8 <= 925   ## |   |   |   |   [6] V8 <= 513 *   ## |   |   |   |   [7] V8 > 513 *   ## |   |   |   [8] V8 > 925   ## |   |   |   |   [9] V3 <= 68   ## |   |   |   |   |   [10] V2 <= 12 *   ## |   |   |   |   |   [11] V2 > 12 *   ## |   |   |   |   [12] V3 > 68 *   ## |   [13] V4 > 1   ## |   |   [14] V6 <= 80   ## |   |   |   [15] V2 <= 13 *   ## |   |   |   [16] V2 > 13 *   ## |   |   [17] V6 > 80 *   ##    ## $nodes[[100]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V5 <= 0 *   ## |   |   |   [6] V5 > 0   ## |   |   |   |   [7] V8 <= 993 *   ## |   |   |   |   [8] V8 > 993   ## |   |   |   |   |   [9] V5 <= 1 *   ## |   |   |   |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= 14   ## |   |   |   [13] V6 <= 80 *   ## |   |   |   [14] V6 > 80 *   ## |   |   [15] V9 > 14 *   ##    ## $nodes[[101]]   ## [1] root   ## |   [2] V8 <= 488   ## |   |   [3] V9 <= 20 *   ## |   |   [4] V9 > 20 *   ## |   [5] V8 > 488   ## |   |   [6] V5 <= 0   ## |   |   |   [7] V4 <= 1 *   ## |   |   |   [8] V4 > 1 *   ## |   |   [9] V5 > 0   ## |   |   |   [10] V7 <= 80   ## |   |   |   |   [11] V6 <= 80   ## |   |   |   |   |   [12] V3 <= 56 *   ## |   |   |   |   |   [13] V3 > 56   ## |   |   |   |   |   |   [14] V3 <= 65 *   ## |   |   |   |   |   |   [15] V3 > 65 *   ## |   |   |   |   [16] V6 > 80 *   ## |   |   |   [17] V7 > 80   ## |   |   |   |   [18] V8 <= 910 *   ## |   |   |   |   [19] V8 > 910 *   ##    ## $nodes[[102]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V2 <= 13 *   ## |   |   [4] V2 > 13 *   ## |   [5] V6 > 70   ## |   |   [6] V7 <= 90   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V3 <= 59 *   ## |   |   |   |   [9] V3 > 59   ## |   |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   |   [11] V5 > 0 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V3 <= 62 *   ## |   |   |   |   [14] V3 > 62 *   ## |   |   [15] V7 > 90 *   ##    ## $nodes[[103]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60 *   ## |   [5] V6 > 70   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V3 <= 60 *   ## |   |   |   [8] V3 > 60   ## |   |   |   |   [9] V7 <= 70 *   ## |   |   |   |   [10] V7 > 70 *   ## |   |   [11] V4 > 1   ## |   |   |   [12] V6 <= 80 *   ## |   |   |   [13] V6 > 80 *   ##    ## $nodes[[104]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V8 <= 463 *   ## |   |   [4] V8 > 463   ## |   |   |   [5] V4 <= 1 *   ## |   |   |   [6] V4 > 1 *   ## |   [7] V5 > 0   ## |   |   [8] V4 <= 1   ## |   |   |   [9] V3 <= 71   ## |   |   |   |   [10] V2 <= 15   ## |   |   |   |   |   [11] V9 <= 17   ## |   |   |   |   |   |   [12] V9 <= 1 *   ## |   |   |   |   |   |   [13] V9 > 1 *   ## |   |   |   |   |   [14] V9 > 17 *   ## |   |   |   |   [15] V2 > 15 *   ## |   |   |   [16] V3 > 71 *   ## |   |   [17] V4 > 1   ## |   |   |   [18] V5 <= 1 *   ## |   |   |   [19] V5 > 1 *   ##    ## $nodes[[105]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V6 > 70   ## |   |   [6] V5 <= 0   ## |   |   |   [7] V2 <= 13   ## |   |   |   |   [8] V8 <= 725 *   ## |   |   |   |   [9] V8 > 725 *   ## |   |   |   [10] V2 > 13 *   ## |   |   [11] V5 > 0   ## |   |   |   [12] V8 <= 588 *   ## |   |   |   [13] V8 > 588   ## |   |   |   |   [14] V7 <= 70 *   ## |   |   |   |   [15] V7 > 70   ## |   |   |   |   |   [16] V3 <= 64 *   ## |   |   |   |   |   [17] V3 > 64 *   ##    ## $nodes[[106]]   ## [1] root   ## |   [2] V2 <= 12   ## |   |   [3] V6 <= 90   ## |   |   |   [4] V2 <= 2 *   ## |   |   |   [5] V2 > 2   ## |   |   |   |   [6] V3 <= 59 *   ## |   |   |   |   [7] V3 > 59   ## |   |   |   |   |   [8] V4 <= 1 *   ## |   |   |   |   |   [9] V4 > 1 *   ## |   |   [10] V6 > 90 *   ## |   [11] V2 > 12   ## |   |   [12] V2 <= 16 *   ## |   |   [13] V2 > 16 *   ##    ## $nodes[[107]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V9 <= 8   ## |   |   |   |   |   [7] V5 <= 0 *   ## |   |   |   |   |   [8] V5 > 0 *   ## |   |   |   |   [9] V9 > 8 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= -2 *   ## |   |   [13] V9 > -2   ## |   |   |   [14] V6 <= 80 *   ## |   |   |   [15] V6 > 80 *   ##    ## $nodes[[108]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V9 <= 1 *   ## |   |   |   [5] V9 > 1   ## |   |   |   |   [6] V2 <= 11   ## |   |   |   |   |   [7] V7 <= 80 *   ## |   |   |   |   |   [8] V7 > 80 *   ## |   |   |   |   [9] V2 > 11 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V8 <= 538 *   ## |   |   |   [12] V8 > 538   ## |   |   |   |   [13] V9 <= 0 *   ## |   |   |   |   [14] V9 > 0 *   ## |   [15] V5 > 1 *   ##    ## $nodes[[109]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V9 <= 5   ## |   |   |   |   [6] V3 <= 63 *   ## |   |   |   |   [7] V3 > 63 *   ## |   |   |   [8] V9 > 5   ## |   |   |   |   [9] V8 <= 1100   ## |   |   |   |   |   [10] V9 <= 14 *   ## |   |   |   |   |   [11] V9 > 14 *   ## |   |   |   |   [12] V8 > 1100 *   ## |   [13] V4 > 1   ## |   |   [14] V6 <= 80 *   ## |   |   [15] V6 > 80 *   ##    ## $nodes[[110]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 71   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V2 <= 16   ## |   |   |   |   |   [6] V7 <= 80   ## |   |   |   |   |   |   [7] V9 <= 5 *   ## |   |   |   |   |   |   [8] V9 > 5 *   ## |   |   |   |   |   [9] V7 > 80 *   ## |   |   |   |   [10] V2 > 16 *   ## |   |   |   [11] V5 > 1 *   ## |   |   [12] V3 > 71 *   ## |   [13] V4 > 1   ## |   |   [14] V7 <= 80   ## |   |   |   [15] V5 <= 1 *   ## |   |   |   [16] V5 > 1 *   ## |   |   [17] V7 > 80 *   ##    ## $nodes[[111]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V7 <= 90   ## |   |   |   |   [6] V9 <= 14   ## |   |   |   |   |   [7] V8 <= 1175   ## |   |   |   |   |   |   [8] V9 <= 5 *   ## |   |   |   |   |   |   [9] V9 > 5 *   ## |   |   |   |   |   [10] V8 > 1175 *   ## |   |   |   |   [11] V9 > 14 *   ## |   |   |   [12] V7 > 90 *   ## |   [13] V4 > 1   ## |   |   [14] V9 <= 2 *   ## |   |   [15] V9 > 2   ## |   |   |   [16] V2 <= 12 *   ## |   |   |   [17] V2 > 12 *   ##    ## $nodes[[112]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V9 <= 6 *   ## |   |   [4] V9 > 6 *   ## |   [5] V5 > 0   ## |   |   [6] V9 <= 27   ## |   |   |   [7] V5 <= 1   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V2 <= 11 *   ## |   |   |   |   |   [10] V2 > 11 *   ## |   |   |   |   [11] V4 > 1 *   ## |   |   |   [12] V5 > 1 *   ## |   |   [13] V9 > 27 *   ##    ## $nodes[[113]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V9 <= 5   ## |   |   |   [4] V6 <= 80 *   ## |   |   |   [5] V6 > 80   ## |   |   |   |   [6] V6 <= 90 *   ## |   |   |   |   [7] V6 > 90 *   ## |   |   [8] V9 > 5   ## |   |   |   [9] V3 <= 64   ## |   |   |   |   [10] V7 <= 80 *   ## |   |   |   |   [11] V7 > 80 *   ## |   |   |   [12] V3 > 64 *   ## |   [13] V5 > 1   ## |   |   [14] V4 <= 1 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[114]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V8 <= 925   ## |   |   |   |   [6] V3 <= 64 *   ## |   |   |   |   [7] V3 > 64 *   ## |   |   |   [8] V8 > 925   ## |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   [10] V5 > 0 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 80 *   ## |   |   [13] V7 > 80   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0 *   ##    ## $nodes[[115]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V7 <= 90   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0   ## |   |   |   |   |   [7] V3 <= 53 *   ## |   |   |   |   |   [8] V3 > 53 *   ## |   |   |   [9] V7 > 90 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V6 <= 60 *   ## |   |   [15] V6 > 60 *   ##    ## $nodes[[116]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V8 <= 1275   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V9 <= 11   ## |   |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   |   [7] V5 > 0 *   ## |   |   |   |   [8] V9 > 11 *   ## |   |   |   [9] V5 > 1 *   ## |   |   [10] V8 > 1275 *   ## |   [11] V4 > 1   ## |   |   [12] V2 <= 11 *   ## |   |   [13] V2 > 11 *   ##    ## $nodes[[117]]   ## [1] root   ## |   [2] V6 <= 80   ## |   |   [3] V9 <= 27   ## |   |   |   [4] V9 <= 1 *   ## |   |   |   [5] V9 > 1   ## |   |   |   |   [6] V5 <= 1 *   ## |   |   |   |   [7] V5 > 1 *   ## |   |   [8] V9 > 27 *   ## |   [9] V6 > 80   ## |   |   [10] V3 <= 64   ## |   |   |   [11] V4 <= 1 *   ## |   |   |   [12] V4 > 1 *   ## |   |   [13] V3 > 64 *   ##    ## $nodes[[118]]   ## [1] root   ## |   [2] V3 <= 45 *   ## |   [3] V3 > 45   ## |   |   [4] V5 <= 1   ## |   |   |   [5] V2 <= 1 *   ## |   |   |   [6] V2 > 1   ## |   |   |   |   [7] V7 <= 90   ## |   |   |   |   |   [8] V3 <= 66   ## |   |   |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   |   |   [10] V5 > 0 *   ## |   |   |   |   |   [11] V3 > 66 *   ## |   |   |   |   [12] V7 > 90 *   ## |   |   [13] V5 > 1   ## |   |   |   [14] V2 <= 13 *   ## |   |   |   [15] V2 > 13 *   ##    ## $nodes[[119]]   ## [1] root   ## |   [2] V3 <= 64   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V3 <= 50 *   ## |   |   |   [6] V3 > 50   ## |   |   |   |   [7] V8 <= 768 *   ## |   |   |   |   [8] V8 > 768   ## |   |   |   |   |   [9] V9 <= 5 *   ## |   |   |   |   |   [10] V9 > 5 *   ## |   [11] V3 > 64   ## |   |   [12] V2 <= 5 *   ## |   |   [13] V2 > 5   ## |   |   |   [14] V8 <= 875 *   ## |   |   |   [15] V8 > 875   ## |   |   |   |   [16] V2 <= 15 *   ## |   |   |   |   [17] V2 > 15 *   ##    ## $nodes[[120]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V9 <= 1 *   ## |   |   |   [10] V9 > 1 *   ## |   [11] V5 > 1   ## |   |   [12] V8 <= 910 *   ## |   |   [13] V8 > 910 *   ##    ## $nodes[[121]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V7 <= 90   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0   ## |   |   |   |   |   [7] V7 <= 70 *   ## |   |   |   |   |   [8] V7 > 70 *   ## |   |   |   [9] V7 > 90 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V4 <= 1 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[122]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V5 <= 1 *   ## |   |   [4] V5 > 1 *   ## |   [5] V6 > 70   ## |   |   [6] V7 <= 70 *   ## |   |   [7] V7 > 70   ## |   |   |   [8] V3 <= 64   ## |   |   |   |   [9] V2 <= 12   ## |   |   |   |   |   [10] V9 <= 1 *   ## |   |   |   |   |   [11] V9 > 1 *   ## |   |   |   |   [12] V2 > 12 *   ## |   |   |   [13] V3 > 64   ## |   |   |   |   [14] V8 <= 1030 *   ## |   |   |   |   [15] V8 > 1030 *   ##    ## $nodes[[123]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V3 <= 60 *   ## |   |   [4] V3 > 60 *   ## |   [5] V5 > 0   ## |   |   [6] V6 <= 70   ## |   |   |   [7] V2 <= 13 *   ## |   |   |   [8] V2 > 13 *   ## |   |   [9] V6 > 70   ## |   |   |   [10] V7 <= 90   ## |   |   |   |   [11] V3 <= 54 *   ## |   |   |   |   [12] V3 > 54   ## |   |   |   |   |   [13] V4 <= 1 *   ## |   |   |   |   |   [14] V4 > 1 *   ## |   |   |   [15] V7 > 90 *   ##    ## $nodes[[124]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V5 <= 1   ## |   |   |   |   [6] V3 <= 63 *   ## |   |   |   |   [7] V3 > 63 *   ## |   |   |   [8] V5 > 1 *   ## |   [9] V4 > 1   ## |   |   [10] V6 <= 60 *   ## |   |   [11] V6 > 60   ## |   |   |   [12] V3 <= 64   ## |   |   |   |   [13] V3 <= 58 *   ## |   |   |   |   [14] V3 > 58 *   ## |   |   |   [15] V3 > 64 *   ##    ## $nodes[[125]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V9 <= 24   ## |   |   |   [4] V4 <= 1   ## |   |   |   |   [5] V5 <= 1 *   ## |   |   |   |   [6] V5 > 1 *   ## |   |   |   [7] V4 > 1 *   ## |   |   [8] V9 > 24 *   ## |   [9] V7 > 70   ## |   |   [10] V4 <= 1   ## |   |   |   [11] V9 <= 6   ## |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   [13] V5 > 0 *   ## |   |   |   [14] V9 > 6 *   ## |   |   [15] V4 > 1   ## |   |   |   [16] V7 <= 90   ## |   |   |   |   [17] V2 <= 12 *   ## |   |   |   |   [18] V2 > 12 *   ## |   |   |   [19] V7 > 90 *   ##    ## $nodes[[126]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V2 <= 3 *   ## |   |   [4] V2 > 3   ## |   |   |   [5] V3 <= 63 *   ## |   |   |   [6] V3 > 63   ## |   |   |   |   [7] V9 <= 11 *   ## |   |   |   |   [8] V9 > 11 *   ## |   [9] V7 > 70   ## |   |   [10] V7 <= 90   ## |   |   |   [11] V9 <= 6   ## |   |   |   |   [12] V6 <= 80 *   ## |   |   |   |   [13] V6 > 80 *   ## |   |   |   [14] V9 > 6   ## |   |   |   |   [15] V6 <= 80 *   ## |   |   |   |   [16] V6 > 80 *   ## |   |   [17] V7 > 90 *   ##    ## $nodes[[127]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V7 <= 80 *   ## |   |   |   [5] V7 > 80 *   ## |   |   [6] V6 > 80   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V8 <= 875 *   ## |   |   |   |   [9] V8 > 875   ## |   |   |   |   |   [10] V2 <= 13 *   ## |   |   |   |   |   [11] V2 > 13 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V3 <= 58 *   ## |   |   |   |   [14] V3 > 58 *   ## |   [15] V5 > 1   ## |   |   [16] V2 <= 12 *   ## |   |   [17] V2 > 12 *   ##    ## $nodes[[128]]   ## [1] root   ## |   [2] V3 <= 45 *   ## |   [3] V3 > 45   ## |   |   [4] V6 <= 80   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V9 <= 20   ## |   |   |   |   |   [7] V6 <= 70 *   ## |   |   |   |   |   [8] V6 > 70 *   ## |   |   |   |   [9] V9 > 20 *   ## |   |   |   [10] V4 > 1   ## |   |   |   |   [11] V6 <= 70 *   ## |   |   |   |   [12] V6 > 70 *   ## |   |   [13] V6 > 80   ## |   |   |   [14] V7 <= 80 *   ## |   |   |   [15] V7 > 80   ## |   |   |   |   [16] V9 <= 3 *   ## |   |   |   |   [17] V9 > 3 *   ##    ## $nodes[[129]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V5 > 0   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V5 <= 1   ## |   |   |   |   [8] V7 <= 80   ## |   |   |   |   |   [9] V7 <= 70 *   ## |   |   |   |   |   [10] V7 > 70 *   ## |   |   |   |   [11] V7 > 80 *   ## |   |   |   [12] V5 > 1 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V2 <= 12 *   ## |   |   |   [15] V2 > 12 *   ##    ## $nodes[[130]]   ## [1] root   ## |   [2] V3 <= 47 *   ## |   [3] V3 > 47   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V7 <= 60 *   ## |   |   |   [6] V7 > 60   ## |   |   |   |   [7] V2 <= 16   ## |   |   |   |   |   [8] V8 <= 875 *   ## |   |   |   |   |   [9] V8 > 875   ## |   |   |   |   |   |   [10] V7 <= 80 *   ## |   |   |   |   |   |   [11] V7 > 80 *   ## |   |   |   |   [12] V2 > 16 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V6 <= 90   ## |   |   |   |   [15] V7 <= 80 *   ## |   |   |   |   [16] V7 > 80 *   ## |   |   |   [17] V6 > 90 *   ##    ## $nodes[[131]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V3 <= 70   ## |   |   |   [5] V7 <= 90   ## |   |   |   |   [6] V5 <= 0   ## |   |   |   |   |   [7] V8 <= 1039 *   ## |   |   |   |   |   [8] V8 > 1039 *   ## |   |   |   |   [9] V5 > 0   ## |   |   |   |   |   [10] V9 <= 12 *   ## |   |   |   |   |   [11] V9 > 12 *   ## |   |   |   [12] V7 > 90 *   ## |   |   [13] V3 > 70 *   ##    ## $nodes[[132]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V2 <= 4 *   ## |   |   |   [6] V2 > 4   ## |   |   |   |   [7] V3 <= 60 *   ## |   |   |   |   [8] V3 > 60   ## |   |   |   |   |   [9] V8 <= 1030   ## |   |   |   |   |   |   [10] V6 <= 80 *   ## |   |   |   |   |   |   [11] V6 > 80 *   ## |   |   |   |   |   [12] V8 > 1030 *   ## |   [13] V4 > 1   ## |   |   [14] V5 <= 1   ## |   |   |   [15] V3 <= 60   ## |   |   |   |   [16] V6 <= 80 *   ## |   |   |   |   [17] V6 > 80 *   ## |   |   |   [18] V3 > 60 *   ## |   |   [19] V5 > 1 *   ##    ## $nodes[[133]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V8 <= 1125   ## |   |   |   |   [5] V9 <= 14   ## |   |   |   |   |   [6] V7 <= 70 *   ## |   |   |   |   |   [7] V7 > 70 *   ## |   |   |   |   [8] V9 > 14 *   ## |   |   |   [9] V8 > 1125 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V7 <= 90   ## |   |   |   |   [12] V2 <= 12   ## |   |   |   |   |   [13] V8 <= 925 *   ## |   |   |   |   |   [14] V8 > 925 *   ## |   |   |   |   [15] V2 > 12 *   ## |   |   |   [16] V7 > 90 *   ## |   [17] V5 > 1 *   ##    ## $nodes[[134]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V4 <= 1 *   ## |   |   |   [5] V4 > 1 *   ## |   |   [6] V9 > 20 *   ## |   [7] V6 > 70   ## |   |   [8] V7 <= 70 *   ## |   |   [9] V7 > 70   ## |   |   |   [10] V5 <= 0   ## |   |   |   |   [11] V7 <= 90 *   ## |   |   |   |   [12] V7 > 90 *   ## |   |   |   [13] V5 > 0   ## |   |   |   |   [14] V7 <= 90   ## |   |   |   |   |   [15] V2 <= 12 *   ## |   |   |   |   |   [16] V2 > 12 *   ## |   |   |   |   [17] V7 > 90 *   ##    ## $nodes[[135]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 65   ## |   |   |   |   [5] V2 <= 4 *   ## |   |   |   |   [6] V2 > 4   ## |   |   |   |   |   [7] V8 <= 1025 *   ## |   |   |   |   |   [8] V8 > 1025 *   ## |   |   |   [9] V3 > 65 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V7 <= 80 *   ## |   |   |   [12] V7 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V2 <= 13   ## |   |   |   [15] V8 <= 910 *   ## |   |   |   [16] V8 > 910 *   ## |   |   [17] V2 > 13 *   ##    ## $nodes[[136]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 65   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V3 > 65   ## |   |   |   |   [8] V9 <= 7 *   ## |   |   |   |   [9] V9 > 7 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V9 <= 0 *   ## |   |   |   [12] V9 > 0 *   ## |   [13] V5 > 1   ## |   |   [14] V2 <= 13 *   ## |   |   [15] V2 > 13 *   ##    ## $nodes[[137]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 71   ## |   |   |   [4] V8 <= 925 *   ## |   |   |   [5] V8 > 925   ## |   |   |   |   [6] V3 <= 53 *   ## |   |   |   |   [7] V3 > 53   ## |   |   |   |   |   [8] V6 <= 80 *   ## |   |   |   |   |   [9] V6 > 80 *   ## |   |   [10] V3 > 71 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 90   ## |   |   |   [13] V2 <= 15   ## |   |   |   |   [14] V5 <= 0 *   ## |   |   |   |   [15] V5 > 0 *   ## |   |   |   [16] V2 > 15 *   ## |   |   [17] V7 > 90 *   ##    ## $nodes[[138]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 64   ## |   |   |   |   [5] V9 <= 2 *   ## |   |   |   |   [6] V9 > 2 *   ## |   |   |   [7] V3 > 64 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V2 <= 11 *   ## |   |   |   [10] V2 > 11 *   ## |   [11] V5 > 1   ## |   |   [12] V4 <= 1 *   ## |   |   [13] V4 > 1 *   ##    ## $nodes[[139]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V3 <= 68   ## |   |   |   |   [5] V6 <= 80 *   ## |   |   |   |   [6] V6 > 80   ## |   |   |   |   |   [7] V2 <= 5 *   ## |   |   |   |   |   [8] V2 > 5 *   ## |   |   |   [9] V3 > 68 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= -1 *   ## |   |   [13] V9 > -1   ## |   |   |   [14] V7 <= 70 *   ## |   |   |   [15] V7 > 70   ## |   |   |   |   [16] V6 <= 80 *   ## |   |   |   |   [17] V6 > 80 *   ##    ## $nodes[[140]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V6 > 70   ## |   |   [6] V3 <= 64   ## |   |   |   [7] V2 <= 10   ## |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   [9] V7 > 80 *   ## |   |   |   [10] V2 > 10   ## |   |   |   |   [11] V6 <= 80 *   ## |   |   |   |   [12] V6 > 80 *   ## |   |   [13] V3 > 64   ## |   |   |   [14] V8 <= 1030 *   ## |   |   |   [15] V8 > 1030 *   ##    ## $nodes[[141]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 70 *   ## |   |   [4] V7 > 70   ## |   |   |   [5] V4 <= 1   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80   ## |   |   |   |   |   [8] V8 <= 1039 *   ## |   |   |   |   |   [9] V8 > 1039 *   ## |   |   |   [10] V4 > 1   ## |   |   |   |   [11] V3 <= 51 *   ## |   |   |   |   [12] V3 > 51   ## |   |   |   |   |   [13] V2 <= 6 *   ## |   |   |   |   |   [14] V2 > 6 *   ## |   [15] V5 > 1   ## |   |   [16] V2 <= 13 *   ## |   |   [17] V2 > 13 *   ##    ## $nodes[[142]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V7 <= 90   ## |   |   |   |   [5] V7 <= 70 *   ## |   |   |   |   [6] V7 > 70   ## |   |   |   |   |   [7] V9 <= 1 *   ## |   |   |   |   |   [8] V9 > 1 *   ## |   |   |   [9] V7 > 90 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V5 <= 0 *   ## |   |   |   [12] V5 > 0   ## |   |   |   |   [13] V3 <= 69 *   ## |   |   |   |   [14] V3 > 69 *   ## |   [15] V5 > 1   ## |   |   [16] V9 <= 20 *   ## |   |   [17] V9 > 20 *   ##    ## $nodes[[143]]   ## [1] root   ## |   [2] V6 <= 60 *   ## |   [3] V6 > 60   ## |   |   [4] V5 <= 1   ## |   |   |   [5] V9 <= 8   ## |   |   |   |   [6] V7 <= 80 *   ## |   |   |   |   [7] V7 > 80   ## |   |   |   |   |   [8] V6 <= 90   ## |   |   |   |   |   |   [9] V8 <= 975 *   ## |   |   |   |   |   |   [10] V8 > 975 *   ## |   |   |   |   |   [11] V6 > 90 *   ## |   |   |   [12] V9 > 8   ## |   |   |   |   [13] V4 <= 1   ## |   |   |   |   |   [14] V2 <= 11 *   ## |   |   |   |   |   [15] V2 > 11 *   ## |   |   |   |   [16] V4 > 1 *   ## |   |   [17] V5 > 1 *   ##    ## $nodes[[144]]   ## [1] root   ## |   [2] V3 <= 63   ## |   |   [3] V2 <= 10   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0 *   ## |   |   [6] V2 > 10   ## |   |   |   [7] V8 <= 1025 *   ## |   |   |   [8] V8 > 1025 *   ## |   [9] V3 > 63   ## |   |   [10] V9 <= 27   ## |   |   |   [11] V5 <= 1   ## |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   [13] V5 > 0   ## |   |   |   |   |   [14] V7 <= 70 *   ## |   |   |   |   |   [15] V7 > 70 *   ## |   |   |   [16] V5 > 1 *   ## |   |   [17] V9 > 27 *   ##    ## $nodes[[145]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V4 <= 1 *   ## |   |   |   [5] V4 > 1 *   ## |   |   [6] V9 > 20 *   ## |   [7] V6 > 70   ## |   |   [8] V4 <= 1   ## |   |   |   [9] V9 <= 6 *   ## |   |   |   [10] V9 > 6   ## |   |   |   |   [11] V7 <= 80 *   ## |   |   |   |   [12] V7 > 80 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V9 <= 14   ## |   |   |   |   [15] V2 <= 11 *   ## |   |   |   |   [16] V2 > 11 *   ## |   |   |   [17] V9 > 14 *   ##    ## $nodes[[146]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V5 <= 0   ## |   |   |   |   [5] V8 <= 775 *   ## |   |   |   |   [6] V8 > 775 *   ## |   |   |   [7] V5 > 0   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V7 <= 80 *   ## |   |   |   |   |   [10] V7 > 80 *   ## |   |   |   |   [11] V4 > 1 *   ## |   |   [12] V7 > 90 *   ## |   [13] V5 > 1   ## |   |   [14] V6 <= 60 *   ## |   |   [15] V6 > 60 *   ##    ## $nodes[[147]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V5 <= 0   ## |   |   |   [5] V3 <= 64 *   ## |   |   |   [6] V3 > 64 *   ## |   |   [7] V5 > 0   ## |   |   |   [8] V5 <= 1   ## |   |   |   |   [9] V6 <= 80   ## |   |   |   |   |   [10] V2 <= 13   ## |   |   |   |   |   |   [11] V7 <= 70 *   ## |   |   |   |   |   |   [12] V7 > 70 *   ## |   |   |   |   |   [13] V2 > 13 *   ## |   |   |   |   [14] V6 > 80 *   ## |   |   |   [15] V5 > 1 *   ##    ## $nodes[[148]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V6 <= 80 *   ## |   |   |   [5] V6 > 80   ## |   |   |   |   [6] V8 <= 1175   ## |   |   |   |   |   [7] V2 <= 11 *   ## |   |   |   |   |   [8] V2 > 11 *   ## |   |   |   |   [9] V8 > 1175 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V3 <= 63   ## |   |   |   |   [12] V2 <= 10 *   ## |   |   |   |   [13] V2 > 10 *   ## |   |   |   [14] V3 > 63 *   ## |   [15] V5 > 1   ## |   |   [16] V6 <= 60 *   ## |   |   [17] V6 > 60 *   ##    ## $nodes[[149]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V2 <= 4 *   ## |   |   |   [5] V2 > 4   ## |   |   |   |   [6] V9 <= 15   ## |   |   |   |   |   [7] V7 <= 90   ## |   |   |   |   |   |   [8] V8 <= 993 *   ## |   |   |   |   |   |   [9] V8 > 993 *   ## |   |   |   |   |   [10] V7 > 90 *   ## |   |   |   |   [11] V9 > 15 *   ## |   |   [12] V5 > 1 *   ## |   [13] V4 > 1   ## |   |   [14] V5 <= 0 *   ## |   |   [15] V5 > 0   ## |   |   |   [16] V5 <= 1 *   ## |   |   |   [17] V5 > 1 *   ##    ## $nodes[[150]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60 *   ## |   [5] V6 > 70   ## |   |   [6] V5 <= 0   ## |   |   |   [7] V7 <= 80 *   ## |   |   |   [8] V7 > 80 *   ## |   |   [9] V5 > 0   ## |   |   |   [10] V9 <= 14   ## |   |   |   |   [11] V7 <= 80   ## |   |   |   |   |   [12] V2 <= 13 *   ## |   |   |   |   |   [13] V2 > 13 *   ## |   |   |   |   [14] V7 > 80 *   ## |   |   |   [15] V9 > 14 *   ##    ## $nodes[[151]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V2 <= 12 *   ## |   |   [4] V2 > 12 *   ## |   [5] V6 > 70   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V3 <= 47 *   ## |   |   |   [8] V3 > 47   ## |   |   |   |   [9] V8 <= 1125   ## |   |   |   |   |   [10] V3 <= 60 *   ## |   |   |   |   |   [11] V3 > 60   ## |   |   |   |   |   |   [12] V7 <= 80 *   ## |   |   |   |   |   |   [13] V7 > 80 *   ## |   |   |   |   [14] V8 > 1125 *   ## |   |   [15] V4 > 1   ## |   |   |   [16] V9 <= 0 *   ## |   |   |   [17] V9 > 0 *   ##    ## $nodes[[152]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V7 <= 70   ## |   |   |   [4] V9 <= 3 *   ## |   |   |   [5] V9 > 3 *   ## |   |   [6] V7 > 70 *   ## |   [7] V6 > 70   ## |   |   [8] V4 <= 1   ## |   |   |   [9] V5 <= 0 *   ## |   |   |   [10] V5 > 0   ## |   |   |   |   [11] V6 <= 80 *   ## |   |   |   |   [12] V6 > 80 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V6 <= 90   ## |   |   |   |   [15] V7 <= 80 *   ## |   |   |   |   [16] V7 > 80 *   ## |   |   |   [17] V6 > 90 *   ##    ## $nodes[[153]]   ## [1] root   ## |   [2] V3 <= 65   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V9 <= 3 *   ## |   |   |   [5] V9 > 3   ## |   |   |   |   [6] V6 <= 70 *   ## |   |   |   |   [7] V6 > 70   ## |   |   |   |   |   [8] V2 <= 4 *   ## |   |   |   |   |   [9] V2 > 4 *   ## |   |   [10] V7 > 90 *   ## |   [11] V3 > 65   ## |   |   [12] V3 <= 71   ## |   |   |   [13] V8 <= 875 *   ## |   |   |   [14] V8 > 875   ## |   |   |   |   [15] V2 <= 12 *   ## |   |   |   |   [16] V2 > 12 *   ## |   |   [17] V3 > 71 *   ##    ## $nodes[[154]]   ## [1] root   ## |   [2] V3 <= 44 *   ## |   [3] V3 > 44   ## |   |   [4] V5 <= 1   ## |   |   |   [5] V9 <= 23   ## |   |   |   |   [6] V4 <= 1   ## |   |   |   |   |   [7] V6 <= 90   ## |   |   |   |   |   |   [8] V2 <= 7 *   ## |   |   |   |   |   |   [9] V2 > 7 *   ## |   |   |   |   |   [10] V6 > 90 *   ## |   |   |   |   [11] V4 > 1   ## |   |   |   |   |   [12] V2 <= 12 *   ## |   |   |   |   |   [13] V2 > 12 *   ## |   |   |   [14] V9 > 23 *   ## |   |   [15] V5 > 1   ## |   |   |   [16] V6 <= 60 *   ## |   |   |   [17] V6 > 60 *   ##    ## $nodes[[155]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V3 <= 70   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V2 <= 13   ## |   |   |   |   |   |   [9] V2 <= 11 *   ## |   |   |   |   |   |   [10] V2 > 11 *   ## |   |   |   |   |   [11] V2 > 13 *   ## |   |   |   [12] V3 > 70 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V7 <= 90   ## |   |   |   |   [15] V2 <= 12 *   ## |   |   |   |   [16] V2 > 12 *   ## |   |   |   [17] V7 > 90 *   ##    ## $nodes[[156]]   ## [1] root   ## |   [2] V7 <= 90   ## |   |   [3] V3 <= 63   ## |   |   |   [4] V7 <= 60 *   ## |   |   |   [5] V7 > 60   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0   ## |   |   |   |   |   [8] V4 <= 1 *   ## |   |   |   |   |   [9] V4 > 1 *   ## |   |   [10] V3 > 63   ## |   |   |   [11] V8 <= 1125   ## |   |   |   |   [12] V2 <= 15   ## |   |   |   |   |   [13] V3 <= 71   ## |   |   |   |   |   |   [14] V3 <= 68 *   ## |   |   |   |   |   |   [15] V3 > 68 *   ## |   |   |   |   |   [16] V3 > 71 *   ## |   |   |   |   [17] V2 > 15 *   ## |   |   |   [18] V8 > 1125 *   ## |   [19] V7 > 90 *   ##    ## $nodes[[157]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 60   ## |   |   |   [4] V5 <= 0 *   ## |   |   |   [5] V5 > 0 *   ## |   |   [6] V3 > 60   ## |   |   |   [7] V9 <= 14   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V9 <= 2 *   ## |   |   |   |   |   [10] V9 > 2 *   ## |   |   |   |   [11] V4 > 1 *   ## |   |   |   [12] V9 > 14 *   ## |   [13] V5 > 1   ## |   |   [14] V6 <= 60 *   ## |   |   [15] V6 > 60 *   ##    ## $nodes[[158]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V9 <= 16 *   ## |   |   [4] V9 > 16 *   ## |   [5] V6 > 70   ## |   |   [6] V7 <= 60 *   ## |   |   [7] V7 > 60   ## |   |   |   [8] V4 <= 1   ## |   |   |   |   [9] V3 <= 60 *   ## |   |   |   |   [10] V3 > 60   ## |   |   |   |   |   [11] V3 <= 68 *   ## |   |   |   |   |   [12] V3 > 68 *   ## |   |   |   [13] V4 > 1   ## |   |   |   |   [14] V5 <= 0 *   ## |   |   |   |   [15] V5 > 0 *   ##    ## $nodes[[159]]   ## [1] root   ## |   [2] V3 <= 45 *   ## |   [3] V3 > 45   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V9 <= 27   ## |   |   |   |   [6] V6 <= 70 *   ## |   |   |   |   [7] V6 > 70   ## |   |   |   |   |   [8] V7 <= 90   ## |   |   |   |   |   |   [9] V8 <= 1100   ## |   |   |   |   |   |   |   [10] V2 <= 11 *   ## |   |   |   |   |   |   |   [11] V2 > 11 *   ## |   |   |   |   |   |   [12] V8 > 1100 *   ## |   |   |   |   |   [13] V7 > 90 *   ## |   |   |   [14] V9 > 27 *   ## |   |   [15] V4 > 1   ## |   |   |   [16] V7 <= 80   ## |   |   |   |   [17] V5 <= 1 *   ## |   |   |   |   [18] V5 > 1 *   ## |   |   |   [19] V7 > 80 *   ##    ## $nodes[[160]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 70   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70   ## |   |   |   |   [6] V9 <= 6 *   ## |   |   |   |   [7] V9 > 6   ## |   |   |   |   |   [8] V8 <= 875 *   ## |   |   |   |   |   [9] V8 > 875 *   ## |   |   [10] V3 > 70 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= 0 *   ## |   |   [13] V9 > 0   ## |   |   |   [14] V8 <= 825 *   ## |   |   |   [15] V8 > 825 *   ##    ## $nodes[[161]]   ## [1] root   ## |   [2] V2 <= 15   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V5 <= 0   ## |   |   |   |   [5] V9 <= 5 *   ## |   |   |   |   [6] V9 > 5 *   ## |   |   |   [7] V5 > 0   ## |   |   |   |   [8] V4 <= 1   ## |   |   |   |   |   [9] V6 <= 80 *   ## |   |   |   |   |   [10] V6 > 80 *   ## |   |   |   |   [11] V4 > 1 *   ## |   |   [12] V5 > 1 *   ## |   [13] V2 > 15   ## |   |   [14] V2 <= 16 *   ## |   |   [15] V2 > 16 *   ##    ## $nodes[[162]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V9 <= 6   ## |   |   |   |   [5] V2 <= 12 *   ## |   |   |   |   [6] V2 > 12 *   ## |   |   |   [7] V9 > 6 *   ## |   |   [8] V5 > 0   ## |   |   |   [9] V8 <= 925   ## |   |   |   |   [10] V9 <= 14 *   ## |   |   |   |   [11] V9 > 14 *   ## |   |   |   [12] V8 > 925   ## |   |   |   |   [13] V8 <= 1060 *   ## |   |   |   |   [14] V8 > 1060 *   ## |   [15] V5 > 1   ## |   |   [16] V2 <= 7 *   ## |   |   [17] V2 > 7 *   ##    ## $nodes[[163]]   ## [1] root   ## |   [2] V3 <= 45 *   ## |   [3] V3 > 45   ## |   |   [4] V5 <= 0   ## |   |   |   [5] V3 <= 64 *   ## |   |   |   [6] V3 > 64 *   ## |   |   [7] V5 > 0   ## |   |   |   [8] V9 <= 27   ## |   |   |   |   [9] V6 <= 70   ## |   |   |   |   |   [10] V8 <= 1025 *   ## |   |   |   |   |   [11] V8 > 1025 *   ## |   |   |   |   [12] V6 > 70   ## |   |   |   |   |   [13] V4 <= 1   ## |   |   |   |   |   |   [14] V6 <= 80 *   ## |   |   |   |   |   |   [15] V6 > 80 *   ## |   |   |   |   |   [16] V4 > 1 *   ## |   |   |   [17] V9 > 27 *   ##    ## $nodes[[164]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V9 <= 12   ## |   |   |   |   |   [7] V3 <= 60 *   ## |   |   |   |   |   [8] V3 > 60 *   ## |   |   |   |   [9] V9 > 12 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V5 <= 0 *   ## |   |   |   [12] V5 > 0 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 10 *   ## |   |   [15] V9 > 10 *   ##    ## $nodes[[165]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V8 <= 1275   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70   ## |   |   |   |   [6] V2 <= 11   ## |   |   |   |   |   [7] V2 <= 6 *   ## |   |   |   |   |   [8] V2 > 6 *   ## |   |   |   |   [9] V2 > 11 *   ## |   |   [10] V8 > 1275 *   ## |   [11] V4 > 1   ## |   |   [12] V5 <= 0 *   ## |   |   [13] V5 > 0   ## |   |   |   [14] V2 <= 13 *   ## |   |   |   [15] V2 > 13 *   ##    ## $nodes[[166]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V5 <= 0   ## |   |   |   |   [5] V8 <= 1025 *   ## |   |   |   |   [6] V8 > 1025 *   ## |   |   |   [7] V5 > 0   ## |   |   |   |   [8] V8 <= 875 *   ## |   |   |   |   [9] V8 > 875 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V2 <= 13 *   ## |   |   [15] V2 > 13 *   ##    ## $nodes[[167]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V5 <= 1 *   ## |   |   |   [5] V5 > 1   ## |   |   |   |   [6] V9 <= 20 *   ## |   |   |   |   [7] V9 > 20 *   ## |   |   [8] V6 > 80 *   ## |   [9] V7 > 70   ## |   |   [10] V5 <= 0   ## |   |   |   [11] V2 <= 13 *   ## |   |   |   [12] V2 > 13 *   ## |   |   [13] V5 > 0   ## |   |   |   [14] V3 <= 53 *   ## |   |   |   [15] V3 > 53   ## |   |   |   |   [16] V6 <= 80 *   ## |   |   |   |   [17] V6 > 80 *   ##    ## $nodes[[168]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 71   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V8 <= 1150   ## |   |   |   |   |   [6] V3 <= 64 *   ## |   |   |   |   |   [7] V3 > 64 *   ## |   |   |   |   [8] V8 > 1150 *   ## |   |   |   [9] V5 > 1 *   ## |   |   [10] V3 > 71 *   ## |   [11] V4 > 1   ## |   |   [12] V2 <= 10 *   ## |   |   [13] V2 > 10   ## |   |   |   [14] V9 <= 3 *   ## |   |   |   [15] V9 > 3 *   ##    ## $nodes[[169]]   ## [1] root   ## |   [2] V3 <= 46 *   ## |   [3] V3 > 46   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V5 <= 1   ## |   |   |   |   [6] V7 <= 90   ## |   |   |   |   |   [7] V8 <= 1125   ## |   |   |   |   |   |   [8] V2 <= 11 *   ## |   |   |   |   |   |   [9] V2 > 11 *   ## |   |   |   |   |   [10] V8 > 1125 *   ## |   |   |   |   [11] V7 > 90 *   ## |   |   |   [12] V5 > 1 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0   ## |   |   |   |   [16] V2 <= 16 *   ## |   |   |   |   [17] V2 > 16 *   ##    ## $nodes[[170]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 48 *   ## |   |   [4] V3 > 48   ## |   |   |   [5] V5 <= 1   ## |   |   |   |   [6] V7 <= 90   ## |   |   |   |   |   [7] V7 <= 70 *   ## |   |   |   |   |   [8] V7 > 70 *   ## |   |   |   |   [9] V7 > 90 *   ## |   |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V5 <= 1   ## |   |   |   [13] V7 <= 80 *   ## |   |   |   [14] V7 > 80 *   ## |   |   [15] V5 > 1 *   ##    ## $nodes[[171]]   ## [1] root   ## |   [2] V3 <= 66   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V7 <= 70 *   ## |   |   |   [5] V7 > 70   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V2 <= 16   ## |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   [11] V5 > 0 *   ## |   |   |   [12] V2 > 16 *   ## |   [13] V3 > 66   ## |   |   [14] V4 <= 1   ## |   |   |   [15] V5 <= 1 *   ## |   |   |   [16] V5 > 1 *   ## |   |   [17] V4 > 1 *   ##    ## $nodes[[172]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V9 <= 20   ## |   |   |   [4] V4 <= 1 *   ## |   |   |   [5] V4 > 1 *   ## |   |   [6] V9 > 20 *   ## |   [7] V7 > 70   ## |   |   [8] V3 <= 63   ## |   |   |   [9] V4 <= 1   ## |   |   |   |   [10] V6 <= 80 *   ## |   |   |   |   [11] V6 > 80 *   ## |   |   |   [12] V4 > 1 *   ## |   |   [13] V3 > 63   ## |   |   |   [14] V6 <= 80 *   ## |   |   |   [15] V6 > 80 *   ##    ## $nodes[[173]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V5 <= 1 *   ## |   |   |   [5] V5 > 1 *   ## |   |   [6] V6 > 80   ## |   |   |   [7] V9 <= -1 *   ## |   |   |   [8] V9 > -1   ## |   |   |   |   [9] V9 <= 4 *   ## |   |   |   |   [10] V9 > 4 *   ## |   [11] V4 > 1   ## |   |   [12] V2 <= 11   ## |   |   |   [13] V6 <= 80 *   ## |   |   |   [14] V6 > 80 *   ## |   |   [15] V2 > 11 *   ##    ## $nodes[[174]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V9 <= 17   ## |   |   |   |   [5] V9 <= 8   ## |   |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   |   [7] V5 > 0 *   ## |   |   |   |   [8] V9 > 8 *   ## |   |   |   [9] V9 > 17 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 60 *   ## |   |   [13] V7 > 60   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0   ## |   |   |   |   [16] V8 <= 825 *   ## |   |   |   |   [17] V8 > 825 *   ##    ## $nodes[[175]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 80   ## |   |   |   [4] V9 <= 20   ## |   |   |   |   [5] V5 <= 1 *   ## |   |   |   |   [6] V5 > 1 *   ## |   |   |   [7] V9 > 20 *   ## |   |   [8] V6 > 80   ## |   |   |   [9] V9 <= 6 *   ## |   |   |   [10] V9 > 6 *   ## |   [11] V4 > 1   ## |   |   [12] V9 <= -1 *   ## |   |   [13] V9 > -1   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0   ## |   |   |   |   [16] V6 <= 70 *   ## |   |   |   |   [17] V6 > 70 *   ##    ## $nodes[[176]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 64   ## |   |   |   [4] V2 <= 12   ## |   |   |   |   [5] V3 <= 50 *   ## |   |   |   |   [6] V3 > 50   ## |   |   |   |   |   [7] V5 <= 0 *   ## |   |   |   |   |   [8] V5 > 0 *   ## |   |   |   [9] V2 > 12 *   ## |   |   [10] V3 > 64   ## |   |   |   [11] V9 <= 10   ## |   |   |   |   [12] V5 <= 0 *   ## |   |   |   |   [13] V5 > 0 *   ## |   |   |   [14] V9 > 10 *   ## |   [15] V5 > 1   ## |   |   [16] V6 <= 60 *   ## |   |   [17] V6 > 60 *   ##    ## $nodes[[177]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V2 <= 15   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V8 <= 1175   ## |   |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   |   [7] V6 > 80 *   ## |   |   |   |   [8] V8 > 1175 *   ## |   |   |   [9] V5 > 1 *   ## |   |   [10] V2 > 15 *   ## |   [11] V4 > 1   ## |   |   [12] V6 <= 70 *   ## |   |   [13] V6 > 70   ## |   |   |   [14] V8 <= 975 *   ## |   |   |   [15] V8 > 975 *   ##    ## $nodes[[178]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V3 <= 63   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0 *   ## |   |   |   [7] V3 > 63   ## |   |   |   |   [8] V9 <= 17   ## |   |   |   |   |   [9] V6 <= 80 *   ## |   |   |   |   |   [10] V6 > 80 *   ## |   |   |   |   [11] V9 > 17 *   ## |   |   [12] V4 > 1   ## |   |   |   [13] V5 <= 0 *   ## |   |   |   [14] V5 > 0 *   ## |   [15] V5 > 1   ## |   |   [16] V3 <= 62 *   ## |   |   [17] V3 > 62 *   ##    ## $nodes[[179]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V3 <= 51 *   ## |   |   [4] V3 > 51   ## |   |   |   [5] V5 <= 0   ## |   |   |   |   [6] V9 <= 5 *   ## |   |   |   |   [7] V9 > 5 *   ## |   |   |   [8] V5 > 0   ## |   |   |   |   [9] V6 <= 80   ## |   |   |   |   |   [10] V9 <= 14 *   ## |   |   |   |   |   [11] V9 > 14 *   ## |   |   |   |   [12] V6 > 80   ## |   |   |   |   |   [13] V8 <= 875 *   ## |   |   |   |   |   [14] V8 > 875 *   ## |   [15] V5 > 1   ## |   |   [16] V8 <= 413 *   ## |   |   [17] V8 > 413 *   ##    ## $nodes[[180]]   ## [1] root   ## |   [2] V7 <= 60 *   ## |   [3] V7 > 60   ## |   |   [4] V4 <= 1   ## |   |   |   [5] V7 <= 90   ## |   |   |   |   [6] V8 <= 910 *   ## |   |   |   |   [7] V8 > 910   ## |   |   |   |   |   [8] V9 <= -1 *   ## |   |   |   |   |   [9] V9 > -1   ## |   |   |   |   |   |   [10] V2 <= 11 *   ## |   |   |   |   |   |   [11] V2 > 11 *   ## |   |   |   [12] V7 > 90 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V7 <= 80 *   ## |   |   |   [15] V7 > 80   ## |   |   |   |   [16] V9 <= 6 *   ## |   |   |   |   [17] V9 > 6 *   ##    ## $nodes[[181]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V6 <= 70 *   ## |   |   |   [6] V6 > 70   ## |   |   |   |   [7] V3 <= 63   ## |   |   |   |   |   [8] V3 <= 58 *   ## |   |   |   |   |   [9] V3 > 58 *   ## |   |   |   |   [10] V3 > 63 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 80   ## |   |   |   [13] V3 <= 60 *   ## |   |   |   [14] V3 > 60 *   ## |   |   [15] V7 > 80 *   ##    ## $nodes[[182]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V8 <= 925 *   ## |   |   |   [5] V8 > 925   ## |   |   |   |   [6] V5 <= 0 *   ## |   |   |   |   [7] V5 > 0 *   ## |   |   [8] V4 > 1   ## |   |   |   [9] V8 <= 925 *   ## |   |   |   [10] V8 > 925 *   ## |   [11] V5 > 1   ## |   |   [12] V9 <= 11 *   ## |   |   [13] V9 > 11 *   ##    ## $nodes[[183]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V8 <= 588 *   ## |   |   [4] V8 > 588   ## |   |   |   [5] V7 <= 80 *   ## |   |   |   [6] V7 > 80 *   ## |   [7] V5 > 0   ## |   |   [8] V2 <= 12   ## |   |   |   [9] V6 <= 70 *   ## |   |   |   [10] V6 > 70   ## |   |   |   |   [11] V3 <= 64 *   ## |   |   |   |   [12] V3 > 64 *   ## |   |   [13] V2 > 12   ## |   |   |   [14] V9 <= 15   ## |   |   |   |   [15] V4 <= 1 *   ## |   |   |   |   [16] V4 > 1 *   ## |   |   |   [17] V9 > 15 *   ##    ## $nodes[[184]]   ## [1] root   ## |   [2] V3 <= 65   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V8 <= 1060   ## |   |   |   |   [6] V6 <= 80 *   ## |   |   |   |   [7] V6 > 80   ## |   |   |   |   |   [8] V7 <= 80 *   ## |   |   |   |   |   [9] V7 > 80 *   ## |   |   |   [10] V8 > 1060 *   ## |   [11] V3 > 65   ## |   |   [12] V4 <= 1   ## |   |   |   [13] V5 <= 1 *   ## |   |   |   [14] V5 > 1 *   ## |   |   [15] V4 > 1 *   ##    ## $nodes[[185]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V4 <= 1 *   ## |   |   [4] V4 > 1 *   ## |   [5] V6 > 70   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V9 <= 2 *   ## |   |   |   [8] V9 > 2   ## |   |   |   |   [9] V5 <= 0 *   ## |   |   |   |   [10] V5 > 0   ## |   |   |   |   |   [11] V7 <= 70 *   ## |   |   |   |   |   [12] V7 > 70 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V3 <= 59 *   ## |   |   |   [15] V3 > 59 *   ##    ## $nodes[[186]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V8 <= 575 *   ## |   |   [4] V8 > 575   ## |   |   |   [5] V8 <= 1025   ## |   |   |   |   [6] V9 <= 7   ## |   |   |   |   |   [7] V4 <= 1 *   ## |   |   |   |   |   [8] V4 > 1 *   ## |   |   |   |   [9] V9 > 7 *   ## |   |   |   [10] V8 > 1025   ## |   |   |   |   [11] V4 <= 1   ## |   |   |   |   |   [12] V9 <= 2 *   ## |   |   |   |   |   [13] V9 > 2 *   ## |   |   |   |   [14] V4 > 1 *   ## |   [15] V5 > 1   ## |   |   [16] V2 <= 13 *   ## |   |   [17] V2 > 13 *   ##    ## $nodes[[187]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V3 <= 71   ## |   |   |   [4] V9 <= 15   ## |   |   |   |   [5] V9 <= -1 *   ## |   |   |   |   [6] V9 > -1   ## |   |   |   |   |   [7] V2 <= 5 *   ## |   |   |   |   |   [8] V2 > 5   ## |   |   |   |   |   |   [9] V9 <= 8 *   ## |   |   |   |   |   |   [10] V9 > 8 *   ## |   |   |   [11] V9 > 15 *   ## |   |   [12] V3 > 71 *   ## |   [13] V4 > 1   ## |   |   [14] V9 <= 13   ## |   |   |   [15] V5 <= 0 *   ## |   |   |   [16] V5 > 0 *   ## |   |   [17] V9 > 13 *   ##    ## $nodes[[188]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 0 *   ## |   |   [4] V5 > 0   ## |   |   |   [5] V9 <= 24   ## |   |   |   |   [6] V5 <= 1   ## |   |   |   |   |   [7] V7 <= 70 *   ## |   |   |   |   |   [8] V7 > 70 *   ## |   |   |   |   [9] V5 > 1 *   ## |   |   |   [10] V9 > 24 *   ## |   [11] V4 > 1   ## |   |   [12] V5 <= 0 *   ## |   |   [13] V5 > 0   ## |   |   |   [14] V2 <= 12 *   ## |   |   |   [15] V2 > 12 *   ##    ## $nodes[[189]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V7 <= 60 *   ## |   |   [4] V7 > 60   ## |   |   |   [5] V5 <= 0 *   ## |   |   |   [6] V5 > 0   ## |   |   |   |   [7] V3 <= 70   ## |   |   |   |   |   [8] V8 <= 993 *   ## |   |   |   |   |   [9] V8 > 993 *   ## |   |   |   |   [10] V3 > 70 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 90   ## |   |   |   [13] V7 <= 80 *   ## |   |   |   [14] V7 > 80 *   ## |   |   [15] V7 > 90 *   ##    ## $nodes[[190]]   ## [1] root   ## |   [2] V3 <= 70   ## |   |   [3] V7 <= 90   ## |   |   |   [4] V4 <= 1   ## |   |   |   |   [5] V5 <= 0 *   ## |   |   |   |   [6] V5 > 0   ## |   |   |   |   |   [7] V8 <= 1025 *   ## |   |   |   |   |   [8] V8 > 1025 *   ## |   |   |   [9] V4 > 1   ## |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   [11] V5 > 0 *   ## |   |   [12] V7 > 90 *   ## |   [13] V3 > 70   ## |   |   [14] V5 <= 1 *   ## |   |   [15] V5 > 1 *   ##    ## $nodes[[191]]   ## [1] root   ## |   [2] V3 <= 71   ## |   |   [3] V2 <= 21   ## |   |   |   [4] V6 <= 70 *   ## |   |   |   [5] V6 > 70   ## |   |   |   |   [6] V3 <= 64   ## |   |   |   |   |   [7] V5 <= 0 *   ## |   |   |   |   |   [8] V5 > 0   ## |   |   |   |   |   |   [9] V7 <= 80 *   ## |   |   |   |   |   |   [10] V7 > 80 *   ## |   |   |   |   [11] V3 > 64 *   ## |   |   [12] V2 > 21 *   ## |   [13] V3 > 71 *   ##    ## $nodes[[192]]   ## [1] root   ## |   [2] V6 <= 70   ## |   |   [3] V2 <= 7 *   ## |   |   [4] V2 > 7 *   ## |   [5] V6 > 70   ## |   |   [6] V9 <= 5   ## |   |   |   [7] V7 <= 90   ## |   |   |   |   [8] V6 <= 80 *   ## |   |   |   |   [9] V6 > 80 *   ## |   |   |   [10] V7 > 90 *   ## |   |   [11] V9 > 5   ## |   |   |   [12] V3 <= 64   ## |   |   |   |   [13] V3 <= 56 *   ## |   |   |   |   [14] V3 > 56 *   ## |   |   |   [15] V3 > 64 *   ##    ## $nodes[[193]]   ## [1] root   ## |   [2] V5 <= 0   ## |   |   [3] V9 <= 3 *   ## |   |   [4] V9 > 3   ## |   |   |   [5] V2 <= 4 *   ## |   |   |   [6] V2 > 4 *   ## |   [7] V5 > 0   ## |   |   [8] V7 <= 60 *   ## |   |   [9] V7 > 60   ## |   |   |   [10] V2 <= 5 *   ## |   |   |   [11] V2 > 5   ## |   |   |   |   [12] V9 <= 7 *   ## |   |   |   |   [13] V9 > 7 *   ##    ## $nodes[[194]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V5 <= 0   ## |   |   |   [4] V7 <= 80 *   ## |   |   |   [5] V7 > 80 *   ## |   |   [6] V5 > 0   ## |   |   |   [7] V4 <= 1   ## |   |   |   |   [8] V6 <= 80   ## |   |   |   |   |   [9] V9 <= 15 *   ## |   |   |   |   |   [10] V9 > 15 *   ## |   |   |   |   [11] V6 > 80 *   ## |   |   |   [12] V4 > 1   ## |   |   |   |   [13] V7 <= 80 *   ## |   |   |   |   [14] V7 > 80 *   ## |   [15] V5 > 1   ## |   |   [16] V2 <= 13 *   ## |   |   [17] V2 > 13 *   ##    ## $nodes[[195]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V9 <= 27   ## |   |   |   [4] V5 <= 1   ## |   |   |   |   [5] V2 <= 11   ## |   |   |   |   |   [6] V7 <= 70 *   ## |   |   |   |   |   [7] V7 > 70 *   ## |   |   |   |   [8] V2 > 11 *   ## |   |   |   [9] V5 > 1 *   ## |   |   [10] V9 > 27 *   ## |   [11] V4 > 1   ## |   |   [12] V2 <= 12   ## |   |   |   [13] V6 <= 80 *   ## |   |   |   [14] V6 > 80 *   ## |   |   [15] V2 > 12 *   ##    ## $nodes[[196]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V6 <= 70 *   ## |   |   [4] V6 > 70   ## |   |   |   [5] V5 <= 0 *   ## |   |   |   [6] V5 > 0   ## |   |   |   |   [7] V3 <= 59 *   ## |   |   |   |   [8] V3 > 59   ## |   |   |   |   |   [9] V9 <= 8 *   ## |   |   |   |   |   [10] V9 > 8 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 80   ## |   |   |   [13] V9 <= 0 *   ## |   |   |   [14] V9 > 0 *   ## |   |   [15] V7 > 80 *   ##    ## $nodes[[197]]   ## [1] root   ## |   [2] V7 <= 60   ## |   |   [3] V5 <= 1 *   ## |   |   [4] V5 > 1 *   ## |   [5] V7 > 60   ## |   |   [6] V4 <= 1   ## |   |   |   [7] V8 <= 488 *   ## |   |   |   [8] V8 > 488   ## |   |   |   |   [9] V2 <= 15   ## |   |   |   |   |   [10] V5 <= 0 *   ## |   |   |   |   |   [11] V5 > 0 *   ## |   |   |   |   [12] V2 > 15 *   ## |   |   [13] V4 > 1   ## |   |   |   [14] V5 <= 0 *   ## |   |   |   [15] V5 > 0   ## |   |   |   |   [16] V3 <= 65 *   ## |   |   |   |   [17] V3 > 65 *   ##    ## $nodes[[198]]   ## [1] root   ## |   [2] V5 <= 1   ## |   |   [3] V4 <= 1   ## |   |   |   [4] V6 <= 80   ## |   |   |   |   [5] V9 <= 14 *   ## |   |   |   |   [6] V9 > 14 *   ## |   |   |   [7] V6 > 80   ## |   |   |   |   [8] V9 <= 6 *   ## |   |   |   |   [9] V9 > 6 *   ## |   |   [10] V4 > 1   ## |   |   |   [11] V6 <= 80 *   ## |   |   |   [12] V6 > 80 *   ## |   [13] V5 > 1   ## |   |   [14] V9 <= 10 *   ## |   |   [15] V9 > 10 *   ##    ## $nodes[[199]]   ## [1] root   ## |   [2] V4 <= 1   ## |   |   [3] V5 <= 1   ## |   |   |   [4] V3 <= 65   ## |   |   |   |   [5] V9 <= 1 *   ## |   |   |   |   [6] V9 > 1   ## |   |   |   |   |   [7] V3 <= 56 *   ## |   |   |   |   |   [8] V3 > 56 *   ## |   |   |   [9] V3 > 65 *   ## |   |   [10] V5 > 1 *   ## |   [11] V4 > 1   ## |   |   [12] V7 <= 90   ## |   |   |   [13] V5 <= 0 *   ## |   |   |   [14] V5 > 0   ## |   |   |   |   [15] V9 <= 0 *   ## |   |   |   |   [16] V9 > 0 *   ## |   |   [17] V7 > 90 *   ##    ## $nodes[[200]]   ## [1] root   ## |   [2] V7 <= 70   ## |   |   [3] V6 <= 70   ## |   |   |   [4] V9 <= 11 *   ## |   |   |   [5] V9 > 11 *   ## |   |   [6] V6 > 70 *   ## |   [7] V7 > 70   ## |   |   [8] V4 <= 1   ## |   |   |   [9] V2 <= 6 *   ## |   |   |   [10] V2 > 6 *   ## |   |   [11] V4 > 1   ## |   |   |   [12] V3 <= 57 *   ## |   |   |   [13] V3 > 57 *   ##    ##    ## $data   ##     Surv(time, status) inst age sex ph.ecog ph.karno pat.karno   ## 9                  218    1  53   1       1       70        80   ## 10                 166    7  61   1       2       70        70   ## 11                 170    6  57   1       1       80        80   ## 15                 567   12  57   1       1       80        70   ## 17                 613   22  70   1       1       90       100   ## 18                 707   16  63   1       2       50        70   ## 19                  61    1  56   2       2       60        60   ## 21                 301   11  67   1       1       80        80   ## 22                  81    6  49   2       0      100        70   ## 24                 371   15  58   1       0       90       100   ## 26                 520   12  70   2       1       90        80   ## 27                 574    4  60   1       0      100       100   ## 28                 118   13  70   1       3       60        70   ## 29                 390   13  53   1       1       80        70   ## 30                  12    1  74   1       2       70        50   ## 31                 473   12  69   2       1       90        90   ## 32                  26    1  73   1       2       60        70   ## 34                 107   16  60   2       2       50        60   ## 35                  53   12  61   1       2       70       100   ## 37                 814   22  65   1       2       70        60   ## 38                965+   15  66   2       1       70        90   ## 39                  93    1  74   1       2       50        40   ## 40                 731    1  64   2       1       80       100   ## 41                 460    5  70   1       1       80        60   ## 42                 153   11  73   2       2       60        70   ## 43                 433   10  59   2       0       90        90   ## 45                 583    7  68   1       1       60        70   ## 46                  95    7  76   2       2       60        60   ## 47                 303    1  74   1       0       90        70   ## 48                 519    3  63   1       1       80        70   ## 49                 643   13  74   1       0       90        90   ## 50                 765   22  50   2       1       90       100   ## 53                  53   21  68   1       0       90       100   ## 54                 246    1  58   1       0      100        90   ## 55                 689    6  59   1       1       90        80   ## 57                   5    5  65   2       0      100        80   ## 59                 687    3  58   2       1       80        80   ## 60                 345    1  64   2       1       90        80   ## 61                 444   22  75   2       2       70        70   ## 62                 223   12  48   1       1       90        80   ## 64                  60   11  65   2       1       90        80   ## 65                 163    3  69   1       1       80        60   ## 66                  65    3  68   1       2       70        50   ## 68                821+    5  64   2       0       90        70   ## 69                 428   22  68   1       0      100        80   ## 70                 230    6  67   1       1       80       100   ## 71                840+   13  63   1       0       90        90   ## 72                 305    3  48   2       1       80        90   ## 73                  11    5  74   1       2       70       100   ## 75                 226   21  53   2       1       90        80   ## 76                 426   12  71   2       1       90        90   ## 77                 705    1  51   2       0      100        80   ## 78                 363    6  56   2       1       80        70   ## 80                 176    1  73   1       0       90        70   ## 81                 791    4  59   1       0      100        80   ## 82                  95   13  55   1       1       70        90   ## 83                196+   11  42   1       1       80        80   ## 84                 167   21  44   2       1       80        90   ## 85                806+   16  44   1       1       80        80   ## 86                 284    6  71   1       1       80        90   ## 87                 641   22  62   2       1       80        80   ## 88                 147   21  61   1       0      100        90   ## 89                740+   13  44   2       1       90        80   ## 90                 163    1  72   1       2       70        70   ## 91                 655   11  63   1       0      100        90   ## 93                  88    5  66   1       1       90        80   ## 94                 245   10  57   2       1       80        60   ## 96                  30   12  72   1       2       80        60   ## 99                 477   11  64   1       1       90       100   ## 101               559+    1  58   2       0      100       100   ## 102                450    6  69   2       1       80        90   ## 106                156   12  66   1       1       80        90   ## 107               529+   26  54   2       1       80       100   ## 109                429   21  55   1       1      100        80   ## 110                351    3  75   2       2       60        50   ## 111                 15   13  69   1       0       90        70   ## 112                181    1  44   1       1       80        90   ## 113                283   10  80   1       1       80       100   ## 116                 13    1  76   1       2       70        70   ## 117                212    3  49   1       2       70        60   ## 118                524    1  68   1       2       60        70   ## 119                288   16  66   1       2       70        60   ## 120                363   15  80   1       1       80        90   ## 122                199   26  60   2       2       70        80   ## 123                550    3  69   2       1       70        80   ## 124                 54   11  72   1       2       60        60   ## 125                558    1  70   1       0       90        90   ## 126                207   22  66   1       1       80        80   ## 127                 92    7  50   1       1       80        60   ## 128                 60   12  64   1       1       80        90   ## 129               551+   16  77   2       2       80        60   ## 131                293    4  59   2       1       80        80   ## 133                353    6  47   1       0      100        90   ## 135                267    1  67   1       0       90        70   ## 136               511+   22  74   2       2       60        40   ## 139                457    1  54   1       1       90        90   ## 140                337    5  56   1       0      100       100   ## 141                201   21  73   2       2       70        60   ## 142               404+    3  74   1       1       80        70   ## 143                222   26  76   1       2       70        70   ## 144                 62    1  65   2       1       80        90   ## 145               458+   11  57   1       1       80       100   ## 147                353   16  71   1       0      100        80   ## 148                163   16  54   1       1       90        80   ## 149                 31   12  82   1       0      100        90   ## 151                229   13  70   1       1       70        60   ## 155                156   32  55   1       2       70        30   ## 158                291    4  62   1       2       70        60   ## 159                179   12  63   1       1       80        70   ## 160               376+    1  56   2       1       80        90   ## 161               384+   32  62   2       0       90        90   ## 162                268   10  44   2       1       90       100   ## 163               292+   11  69   1       2       60        70   ## 164                142    6  63   1       1       90        80   ## 165               413+    7  64   1       1       80        70   ## 166               266+   16  57   2       0       90        90   ## 168                320   21  46   1       0      100       100   ## 169                181    6  61   1       1       90        90   ## 170                285   12  65   1       0      100        90   ## 171               301+   13  61   1       1       90       100   ## 172                348    2  58   2       0       90        80   ## 173                197    2  56   1       1       90        60   ## 174               382+   16  43   2       0      100        90   ## 175               303+    1  53   1       1       90        80   ## 176               296+   13  59   2       1       80       100   ## 177                180    1  56   1       2       60        80   ## 179                145    1  53   2       1       80        90   ## 180               269+    7  74   2       0      100       100   ## 181               300+   13  60   1       0      100       100   ## 182               284+    1  39   1       0      100        90   ## 185               292+   12  51   2       0       90        80   ## 186               332+   12  45   2       0       90       100   ## 187                285    2  72   2       2       70        90   ## 188               259+    3  58   1       0       90        80   ## 189                110   15  64   1       1       80        60   ## 190                286   22  53   1       0       90        90   ## 191                270   16  72   1       1       80        90   ## 194               225+    1  64   1       1       90        80   ## 195                269   22  71   1       1       90        90   ## 196               225+   12  70   1       0      100       100   ## 197               243+   32  63   2       1       80        90   ## 199               276+    1  52   2       0      100        80   ## 200                135   32  60   1       1       90        70   ## 201                 79   15  64   2       1       90        90   ## 202                 59   22  73   1       1       60        60   ## 203               240+   32  63   2       0       90       100   ## 204               202+    3  50   2       0      100       100   ## 205               235+   26  63   2       0      100        90   ## 208                239   13  50   2       2       60        60   ## 211               252+    1  60   2       0      100        90   ## 212               221+    6  67   1       1       80        70   ## 213               185+   15  69   1       1       90        70   ## 216               222+   11  65   1       1       90        70   ## 218                183   21  76   1       2       80        60   ## 219               211+   11  70   2       2       70        30   ## 220               175+    2  57   2       0       80        80   ## 221               197+   22  67   1       1       80        90   ## 222               203+   11  71   2       1       80        90   ## 225               191+   13  39   1       0       90        90   ## 226               105+   32  75   2       2       60        70   ## 227               174+    6  66   1       1       90       100   ## 228               177+   22  58   2       1       80        90   ##     meal.cal wt.loss   ## 9        825      16   ## 10       271      34   ## 11      1025      27   ## 15      2600      60   ## 17      1150      -5   ## 18      1025      22   ## 19       238      10   ## 21      1025      17   ## 22      1175      -8   ## 24       975      13   ## 26       825       6   ## 27      1025     -13   ## 28      1075      20   ## 29       875      -7   ## 30       305      20   ## 31      1025      -1   ## 32       388      20   ## 34       925     -15   ## 35      1075      10   ## 37       513      28   ## 38       875       4   ## 39      1225      24   ## 40      1175      15   ## 41       975      10   ## 42      1075      11   ## 43       363      27   ## 45      1025       7   ## 46       625     -24   ## 47       463      30   ## 48      1025      10   ## 49      1425       2   ## 50      1175       4   ## 53      1025       0   ## 54      1175       7   ## 55      1300      15   ## 57       338       5   ## 59      1225      10   ## 60      1075      -3   ## 61       438       8   ## 62      1300      68   ## 64      1025       0   ## 65      1125       0   ## 66       825       8   ## 68      1025       3   ## 69      1039       0   ## 70       488      23   ## 71      1175      -1   ## 72       538      29   ## 73      1175       0   ## 75       825       3   ## 76      1075      19   ## 77      1300       0   ## 78      1225      -2   ## 80       169      30   ## 81       768       5   ## 82      1500      15   ## 83      1425       8   ## 84       588      -1   ## 85      1025       1   ## 86      1100      14   ## 87      1150       1   ## 88      1175       4   ## 89       588      39   ## 90       910       2   ## 91       975      -1   ## 93       875       8   ## 94       280      14   ## 96       288       7   ## 99       910       0   ## 101      710      15   ## 102     1175       3   ## 106      875      14   ## 107      975      -3   ## 109      975       5   ## 110      925      11   ## 111      575      10   ## 112     1175       5   ## 113     1030       6   ## 116      413      20   ## 117      675      20   ## 118     1300      30   ## 119      613      24   ## 120      346      11   ## 122      675      10   ## 123      910       0   ## 124      768      -3   ## 125     1025      17   ## 126      925      20   ## 127     1075      13   ## 128      993       0   ## 129      750      28   ## 131      925      52   ## 133     1225       5   ## 135      313       6   ## 136       96      37   ## 139      975      -5   ## 140     1500      15   ## 141     1225     -16   ## 142      413      38   ## 143     1500       8   ## 144     1075       0   ## 145      513      30   ## 147      775       2   ## 148     1225      13   ## 149      413      27   ## 151     1175      -2   ## 155     1025      10   ## 158      475      27   ## 159      538      -2   ## 160      825      17   ## 161      588       8   ## 162     2450       2   ## 163     2450      36   ## 164      875       2   ## 165      413      16   ## 166     1075       3   ## 168      860       4   ## 169      730       0   ## 170     1025       0   ## 171      825       2   ## 172     1225      10   ## 173      768      37   ## 174      338       6   ## 175     1225      12   ## 176     1025       0   ## 177     1225      -2   ## 179      588      13   ## 180      588       0   ## 181      975       5   ## 182     1225      -5   ## 185     1225       0   ## 186      975       5   ## 187      463      20   ## 188     1300       8   ## 189     1025      12   ## 190     1225       8   ## 191      488      14   ## 194      825      33   ## 195     1300      -2   ## 196     1175       6   ## 197      825       0   ## 199      975       0   ## 200     1275       0   ## 201      488      37   ## 202     2200       5   ## 203     1025       0   ## 204      635       1   ## 205      413       0   ## 208     1025      -3   ## 211      488      -2   ## 212      413      23   ## 213     1075       0   ## 216     1025      18   ## 218      825       7   ## 219      131       3   ## 220      725      11   ## 221     1500       2   ## 222     1025       0   ## 225     2350      -5   ## 226     1025       5   ## 227     1075       1   ## 228     1060       0   ##    ## $weights   ## $weights[[1]]   ##   [1] 1 1 0 0 0 1 1 0 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1   ##  [34] 1 0 0 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0   ##  [67] 0 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 1   ## [100] 1 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1   ## [133] 1 1 1 0 0 1 1 0 1 1 1 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 1 0 0   ##    ## $weights[[2]]   ##   [1] 1 1 0 0 1 0 0 0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0   ##  [34] 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 0 0 1 1 0 0 1 1 0 0 1 1 1   ##  [67] 1 0 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1   ## [100] 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 1 0 0   ## [133] 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 0 1 0   ##    ## $weights[[3]]   ##   [1] 1 1 1 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 1 0 1 1 0 1 0 1   ##  [34] 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 1 1 0 1 1 1 0 0 1 0 1 0 0 0 0   ##  [67] 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 1 0 0 0 1 1 1 1 0 0 1 1 1 1   ## [100] 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 0 1 1 0 0 1 0 1 1 1 1 0 1 0 1 1 1 1   ## [133] 1 1 0 1 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1   ##    ## $weights[[4]]   ##   [1] 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 0 0 1 1 0 1 0   ##  [34] 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1   ##  [67] 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1   ## [100] 1 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 1 0 1   ## [133] 1 1 1 0 1 1 0 0 0 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 1 1   ##    ## $weights[[5]]   ##   [1] 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 0   ##  [34] 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0   ##  [67] 0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 1 1   ## [100] 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 1 1 1 1 0   ## [133] 0 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0   ##    ## $weights[[6]]   ##   [1] 1 1 1 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 0 1   ##  [34] 1 1 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1   ##  [67] 1 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0   ## [100] 1 1 0 0 0 0 1 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 1 0 1   ## [133] 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 0 0   ##    ## $weights[[7]]   ##   [1] 0 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 0 1   ##  [34] 0 0 0 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 0 0 1 1 1 1 1 0 0 1 1   ##  [67] 1 0 1 1 1 0 0 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1   ## [100] 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1 0 1 1   ## [133] 0 1 1 1 1 1 0 1 1 0 1 1 0 0 1 1 0 0 1 1 0 1 1 0 1 0 1 1 1 1   ##    ## $weights[[8]]   ##   [1] 0 1 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0   ##  [34] 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 1   ##  [67] 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1   ## [100] 1 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 1 1 0   ## [133] 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 0 0 0 1 1 1 1   ##    ## $weights[[9]]   ##   [1] 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1   ##  [34] 0 1 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1   ##  [67] 0 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1   ## [100] 1 0 0 1 1 0 0 1 1 0 0 1 0 1 1 1 1 0 0 1 1 0 1 1 0 1 0 0 1 1 0 0 1   ## [133] 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 0 1 0 0   ##    ## $weights[[10]]   ##   [1] 1 0 0 1 0 0 1 1 1 1 1 0 1 1 0 1 1 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1   ##  [34] 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 1 0 1 1 1 1 1 1 1   ##  [67] 0 1 0 0 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 0 0 1 1 1 1 0   ## [100] 0 1 0 0 1 1 0 1 1 1 0 0 1 1 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0   ## [133] 0 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1   ##    ## $weights[[11]]   ##   [1] 0 1 0 1 1 0 1 0 1 1 1 0 1 0 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 1   ##  [34] 0 0 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1   ##  [67] 1 1 1 0 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 1   ## [100] 0 0 0 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 0 1 1 0 1 1   ## [133] 1 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0   ##    ## $weights[[12]]   ##   [1] 1 1 1 0 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 0 1 0 1 1 1 1 0 1 0 1 1 1   ##  [34] 0 0 0 1 1 1 0 1 1 0 0 0 1 1 0 1 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1   ##  [67] 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 1 1 1 1 1   ## [100] 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 0 1 1   ## [133] 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1   ##    ## $weights[[13]]   ##   [1] 0 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 0 1 1 0 1 0 0 1 0 0 1   ##  [34] 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 1 0 1   ##  [67] 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 1 0 1   ## [100] 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1   ## [133] 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 1 0 0 1 1 1 0 1 1   ##    ## $weights[[14]]   ##   [1] 0 1 1 1 1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 1 0 0 0   ##  [34] 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1   ##  [67] 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 0 1 1 1   ## [100] 0 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 0   ## [133] 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 0   ##    ## $weights[[15]]   ##   [1] 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 0   ##  [34] 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1   ##  [67] 0 1 1 0 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1   ## [100] 0 0 1 1 1 1 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 1 0   ## [133] 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 0 1   ##    ## $weights[[16]]   ##   [1] 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 1 1 1 0   ##  [34] 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1   ##  [67] 0 1 1 0 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 1 1 0 0 0 1 0 0 1 1   ## [100] 1 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0   ## [133] 0 0 1 0 1 1 1 1 0 0 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 0   ##    ## $weights[[17]]   ##   [1] 1 1 1 0 1 0 1 0 1 1 0 1 0 1 1 1 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 0   ##  [34] 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0   ##  [67] 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1   ## [100] 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 1 0 1 1 1 0 0   ## [133] 0 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0   ##    ## $weights[[18]]   ##   [1] 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 0 0 1 1 1   ##  [34] 1 1 0 1 1 1 1 1 0 0 0 1 0 1 0 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1   ##  [67] 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 1 0   ## [100] 1 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 0 0 1   ## [133] 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 1 0   ##    ## $weights[[19]]   ##   [1] 1 0 0 1 0 0 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1   ##  [34] 0 1 1 1 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1   ##  [67] 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 1 0 1 1   ## [100] 1 0 1 1 0 1 0 1 1 0 0 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1   ## [133] 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0   ##    ## $weights[[20]]   ##   [1] 1 1 0 1 1 0 0 0 0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0   ##  [34] 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 1   ##  [67] 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1   ## [100] 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1   ## [133] 0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 0   ##    ## $weights[[21]]   ##   [1] 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0   ##  [34] 1 0 1 1 0 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 0   ##  [67] 0 0 0 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 1 0 0   ## [100] 0 1 1 0 1 0 1 0 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1   ## [133] 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 1   ##    ## $weights[[22]]   ##   [1] 1 0 1 0 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0   ##  [34] 0 1 1 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 1   ##  [67] 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 0   ## [100] 1 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 0 0 0 1 1 1 1 0 0 1 0 1 0 0 1   ## [133] 1 0 1 1 0 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0   ##    ## $weights[[23]]   ##   [1] 1 0 0 1 0 1 1 1 0 1 0 1 0 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1   ##  [34] 0 1 0 0 1 0 1 1 1 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 0 1 0 0 1   ##  [67] 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1   ## [100] 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1   ## [133] 0 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 1 0 1   ##    ## $weights[[24]]   ##   [1] 0 0 1 1 1 1 0 1 1 0 1 0 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 1 1   ##  [34] 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1   ##  [67] 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0   ## [100] 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 1 0   ## [133] 0 0 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1   ##    ## $weights[[25]]   ##   [1] 1 1 0 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1   ##  [34] 1 0 0 1 0 1 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 0 0   ##  [67] 0 0 1 1 1 0 0 0 1 1 1 0 1 1 1 0 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1   ## [100] 0 1 1 0 1 0 0 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 1 1 0 1 1 0 1   ## [133] 0 1 1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 1 1 0 1 1 1   ##    ## $weights[[26]]   ##   [1] 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 1 0 1 1 1 1 0 0 1 0 1 1 1 0 0 1   ##  [34] 0 1 1 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 0 1 0 0 1 0 1   ##  [67] 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 0 1 1 0 1 0 1 0 1 1 0 1   ## [100] 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 1   ## [133] 0 1 1 1 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 1   ##    ## $weights[[27]]   ##   [1] 1 0 0 0 0 1 1 0 1 0 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1   ##  [34] 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 1 1 0 0 0 1 0 0 1 0 1 1 1 1   ##  [67] 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0   ## [100] 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0   ## [133] 1 1 1 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0   ##    ## $weights[[28]]   ##   [1] 1 1 0 1 1 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1 0 1 1 1 1 0   ##  [34] 1 0 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1   ##  [67] 0 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 0 1 0 1 0 0 1   ## [100] 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 1 0 1 1 0 1 0 1 1 0 1 0 1 0 1   ## [133] 1 1 0 1 1 0 1 1 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 0 1   ##    ## $weights[[29]]   ##   [1] 1 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 1 1 1 0   ##  [34] 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 0 1   ##  [67] 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 0   ## [100] 0 1 1 0 1 1 0 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 1   ## [133] 1 0 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 1 1 0 1 1 1   ##    ## $weights[[30]]   ##   [1] 0 0 1 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 0   ##  [34] 1 1 1 1 1 0 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 1 1 1 1 0 1 0   ##  [67] 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 0 1 1 1 1 1 0 0 1 0 1 1 1 0 0 1 1 1   ## [100] 0 0 0 0 1 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1   ## [133] 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1   ##    ## $weights[[31]]   ##   [1] 1 0 0 1 0 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0   ##  [34] 0 1 1 0 1 1 0 0 1 0 0 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 0 0 0 1 1   ##  [67] 1 1 0 1 1 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0   ## [100] 0 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0   ## [133] 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 1 0 0 0 1   ##    ## $weights[[32]]   ##   [1] 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1   ##  [34] 1 1 0 0 1 1 0 1 0 1 0 0 1 0 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1   ##  [67] 0 1 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1   ## [100] 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 0 0 0 1 1 0 0 1   ## [133] 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 0 1   ##    ## $weights[[33]]   ##   [1] 1 0 0 0 0 0 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1   ##  [34] 0 1 0 1 0 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1   ##  [67] 1 0 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 1   ## [100] 0 0 0 0 1 1 0 1 0 0 1 1 0 1 1 0 1 1 1 0 0 1 0 0 1 1 1 1 0 0 0 1 0   ## [133] 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 0 1 1 0 0 1 1   ##    ## $weights[[34]]   ##   [1] 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1   ##  [34] 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 1 1   ##  [67] 0 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1   ## [100] 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1 0   ## [133] 0 0 0 0 1 0 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1   ##    ## $weights[[35]]   ##   [1] 1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 0 0   ##  [34] 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1 0 0   ##  [67] 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1 1 0 1   ## [100] 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 1 1 1 0 0 1 1 1 1 0 1   ## [133] 0 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 1   ##    ## $weights[[36]]   ##   [1] 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0   ##  [34] 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 0 1 0   ##  [67] 1 0 1 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 1 1 1   ## [100] 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1 1 1 0 0 0 1 1 1 1 0 1 1   ## [133] 1 0 1 1 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 1 1 1 0 1 1 1 0 0   ##    ## $weights[[37]]   ##   [1] 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 1 1 0 0 1 0 1 1 1 1   ##  [34] 0 1 1 0 1 0 1 1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0   ##  [67] 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1   ## [100] 0 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1   ## [133] 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 0 1 1 1 0 1 1 1 1 0 0 1 1   ##    ## $weights[[38]]   ##   [1] 0 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1   ##  [34] 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0   ##  [67] 1 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0   ## [100] 1 0 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 0   ## [133] 1 1 0 1 1 0 1 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 0 0 1 1 1 0 1 0   ##    ## $weights[[39]]   ##   [1] 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1   ##  [34] 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 1 1   ##  [67] 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 1 0 1 1   ## [100] 1 1 1 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 0   ## [133] 1 1 1 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 0 0   ##    ## $weights[[40]]   ##   [1] 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1   ##  [34] 1 0 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 1 0   ##  [67] 0 0 0 0 1 1 1 0 1 0 1 0 1 1 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 1 0 1 1   ## [100] 0 1 0 1 1 1 0 1 0 1 1 1 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1   ## [133] 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 0   ##    ## $weights[[41]]   ##   [1] 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 1 1   ##  [34] 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 1   ##  [67] 0 1 0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 1 0 1 1 0   ## [100] 1 1 1 0 1 1 0 1 0 0 0 1 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0   ## [133] 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 0 1   ##    ## $weights[[42]]   ##   [1] 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 1 1 1   ##  [34] 0 0 1 1 0 0 1 0 0 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 0 0 1 0 1   ##  [67] 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0 0 1 0 1 1 1 0 0 0 0 0   ## [100] 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1 1 0 0 1 0   ## [133] 1 0 0 0 1 1 1 1 1 1 0 0 1 1 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1   ##    ## $weights[[43]]   ##   [1] 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 0 0 0   ##  [34] 1 0 1 0 1 0 0 1 1 1 0 0 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0 0 1 0 1 1   ##  [67] 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1   ## [100] 0 0 1 0 1 1 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1   ## [133] 0 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 0 1 0 1   ##    ## $weights[[44]]   ##   [1] 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0 1 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 0   ##  [34] 1 0 0 1 0 1 1 0 1 0 1 1 1 1 0 0 0 1 0 1 1 0 0 0 1 1 1 0 1 0 1 0 1   ##  [67] 1 0 1 1 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1   ## [100] 0 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1   ## [133] 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1   ##    ## $weights[[45]]   ##   [1] 1 1 0 1 0 1 0 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 0 0 0   ##  [34] 1 0 0 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0   ##  [67] 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 1 1   ## [100] 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 0 1 0 1 0   ## [133] 0 1 0 1 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 0 0   ##    ## $weights[[46]]   ##   [1] 1 1 0 0 0 1 1 1 0 1 1 1 1 0 1 0 1 0 0 1 0 1 0 1 1 0 1 0 0 0 1 1 0   ##  [34] 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1   ##  [67] 1 1 1 0 0 0 1 1 1 0 0 1 0 0 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 1 0   ## [100] 0 0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1   ## [133] 1 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 0 1 1   ##    ## $weights[[47]]   ##   [1] 0 0 0 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1   ##  [34] 1 1 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0   ##  [67] 1 1 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 0   ## [100] 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 0 1 0 0 0   ## [133] 0 0 1 0 1 1 1 0 1 0 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1   ##    ## $weights[[48]]   ##   [1] 0 1 0 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1   ##  [34] 1 1 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 0 1 0 1 1 0   ##  [67] 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 0   ## [100] 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 0 0 0 1 0 1 1   ## [133] 1 1 0 1 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 0 0 1 0 0 1 0 1 0   ##    ## $weights[[49]]   ##   [1] 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 0 0 0 1 0 1 0 1 1   ##  [34] 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 0 0 1 0   ##  [67] 0 1 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 0 0 1 0 1 1 1 1 0 0 0   ## [100] 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1   ## [133] 1 0 1 1 0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1   ##    ## $weights[[50]]   ##   [1] 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0   ##  [34] 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1 1 1 0 1   ##  [67] 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1   ## [100] 1 0 1 0 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 1 1 0 0   ## [133] 1 0 1 0 1 1 0 1 1 0 1 1 0 0 1 0 1 1 0 1 1 0 0 1 0 1 0 0 1 1   ##    ## $weights[[51]]   ##   [1] 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1   ##  [34] 1 1 1 1 0 1 0 1 1 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 0 0 1 1 0 1 1 0 1   ##  [67] 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0   ## [100] 0 1 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 0 0 1 1 1 0 1 0 1 0 1   ## [133] 1 1 0 1 1 0 1 1 0 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 0 0 1 0   ##    ## $weights[[52]]   ##   [1] 1 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 0 1 1 1 1 0 0 1 0   ##  [34] 1 0 0 1 1 0 0 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0   ##  [67] 1 1 1 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 0 0 1   ## [100] 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0 0   ## [133] 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1   ##    ## $weights[[53]]   ##   [1] 1 1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0   ##  [34] 1 0 1 0 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 0 0   ##  [67] 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0   ## [100] 1 0 1 0 1 1 1 1 0 1 1 1 0 0 0 1 0 0 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1   ## [133] 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0   ##    ## $weights[[54]]   ##   [1] 0 1 1 1 0 0 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1   ##  [34] 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1   ##  [67] 0 1 1 0 1 0 0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 0 0 1 0   ## [100] 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1   ## [133] 0 1 1 1 1 0 1 1 0 0 1 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0 1 0   ##    ## $weights[[55]]   ##   [1] 1 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1   ##  [34] 1 0 0 0 0 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1   ##  [67] 0 1 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1   ## [100] 0 0 1 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 0 1   ## [133] 1 0 0 0 1 1 0 1 1 0 0 1 0 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1   ##    ## $weights[[56]]   ##   [1] 1 1 0 0 1 1 0 1 0 0 0 1 1 1 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0   ##  [34] 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 1 1 1   ##  [67] 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0   ## [100] 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 0 0 0 0 1 1   ## [133] 1 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0   ##    ## $weights[[57]]   ##   [1] 0 1 1 0 1 0 1 0 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 0 0 0 1   ##  [34] 0 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1   ##  [67] 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 0 1 1 1 1 0 1   ## [100] 1 0 1 0 0 0 1 0 0 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0   ## [133] 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1   ##    ## $weights[[58]]   ##   [1] 1 1 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1   ##  [34] 0 1 1 0 0 1 1 1 0 0 0 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 0 0   ##  [67] 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0 0 0 0 1 0   ## [100] 1 1 1 1 1 1 1 0 0 1 1 1 0 1 0 1 0 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0   ## [133] 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 0 1   ##    ## $weights[[59]]   ##   [1] 1 1 0 1 0 1 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0   ##  [34] 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0   ##  [67] 1 1 0 0 1 0 0 1 1 1 1 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 0 0 0 0 1   ## [100] 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0   ## [133] 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 0 1 1 1 1 0 0 0 0   ##    ## $weights[[60]]   ##   [1] 1 1 0 1 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 1 1   ##  [34] 1 1 1 0 1 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1   ##  [67] 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1   ## [100] 0 1 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1   ## [133] 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 0 0 1 1 1 1 1 1 0 0 0 0   ##    ## $weights[[61]]   ##   [1] 0 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 0 0 1 0 0 1 0 1 0 0 1 1 1   ##  [34] 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0   ##  [67] 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 0 1 1 0 0 0 0 1 1 0   ## [100] 0 1 0 1 0 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 1 1 0 0   ## [133] 1 1 1 0 0 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1   ##    ## $weights[[62]]   ##   [1] 0 0 0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 0 0   ##  [34] 0 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1   ##  [67] 0 0 1 1 1 0 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 0 0 1 1 0 1   ## [100] 1 1 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 1 1 1   ## [133] 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 0 1 1 0 1 0 1 0 0 0   ##    ## $weights[[63]]   ##   [1] 1 1 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 1 1 0 0 0 1 1 0 1 0 1 1 1 0   ##  [34] 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1 1 1 0   ##  [67] 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 0 1   ## [100] 1 0 0 1 1 0 0 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1   ## [133] 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0   ##    ## $weights[[64]]   ##   [1] 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1   ##  [34] 0 0 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1   ##  [67] 1 0 0 0 1 1 0 0 0 1 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1   ## [100] 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 0 1   ## [133] 0 1 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 0 1 0   ##    ## $weights[[65]]   ##   [1] 0 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 1   ##  [34] 1 0 1 1 0 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 0 0 0 0 0 1   ##  [67] 1 1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 1 1   ## [100] 0 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1   ## [133] 1 1 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 1   ##    ## $weights[[66]]   ##   [1] 0 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1   ##  [34] 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 1 0 1 1 0 0 1 0 1 1   ##  [67] 0 1 0 1 1 0 1 0 1 0 1 1 0 1 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 1 0 0 1   ## [100] 1 1 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1   ## [133] 1 0 1 1 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1   ##    ## $weights[[67]]   ##   [1] 0 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 0 1 0 0   ##  [34] 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 1 0 1 0 0 1   ##  [67] 1 1 1 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0   ## [100] 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 1 1 1 0 0 1 1   ## [133] 1 1 0 0 0 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 0 0 1 1 0 1 1 0 1   ##    ## $weights[[68]]   ##   [1] 1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 1   ##  [34] 1 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 1 0 0   ##  [67] 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0 1   ## [100] 1 1 0 0 0 1 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1   ## [133] 0 1 1 1 1 1 0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 1 1 0 0 1 0 0 1 1   ##    ## $weights[[69]]   ##   [1] 0 1 0 1 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 0 0 1   ##  [34] 0 0 0 1 1 1 0 1 1 0 1 0 1 1 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1   ##  [67] 0 0 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1   ## [100] 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1   ## [133] 1 0 1 0 1 1 0 0 1 1 0 0 0 1 0 1 1 0 1 0 1 1 1 1 0 0 1 1 1 1   ##    ## $weights[[70]]   ##   [1] 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 0 1 1   ##  [34] 0 1 0 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 0   ##  [67] 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 1 1 1 1 1 0 1   ## [100] 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0   ## [133] 0 0 1 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0   ##    ## $weights[[71]]   ##   [1] 1 0 1 1 1 1 0 1 0 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1 1 0 1 1 1 0 1 0 1   ##  [34] 0 0 0 1 1 1 1 0 0 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 0 0 0 0 0 1 0 1 0   ##  [67] 1 1 1 0 1 1 0 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 0   ## [100] 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1   ## [133] 0 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 0 1   ##    ## $weights[[72]]   ##   [1] 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1   ##  [34] 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1   ##  [67] 0 1 1 1 1 0 0 1 0 0 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 0 1 1 0 1 1 0   ## [100] 0 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0   ## [133] 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1   ##    ## $weights[[73]]   ##   [1] 1 0 1 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1   ##  [34] 1 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1   ##  [67] 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 1 1 0 0 1   ## [100] 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 0 1 0 0 0 1 1 1   ## [133] 1 1 1 1 1 0 1 0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1   ##    ## $weights[[74]]   ##   [1] 1 0 1 1 1 1 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 1   ##  [34] 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 0 1 0 1 0   ##  [67] 1 1 0 1 1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0   ## [100] 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 0 1 1 1 0   ## [133] 0 0 0 1 0 1 1 0 0 1 1 1 1 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 1   ##    ## $weights[[75]]   ##   [1] 1 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1   ##  [34] 1 1 0 1 0 1 1 0 0 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 0 0   ##  [67] 1 1 0 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1   ## [100] 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 1   ## [133] 0 1 1 0 1 0 0 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0   ##    ## $weights[[76]]   ##   [1] 0 1 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1 1   ##  [34] 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0   ##  [67] 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 1 1   ## [100] 1 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1   ## [133] 0 0 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1 0 1 0 0 1 0 1   ##    ## $weights[[77]]   ##   [1] 1 0 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1   ##  [34] 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 0 1 1 1 1 0 1 0 1 1 0 0 0 1 0 1 1 1   ##  [67] 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1 0   ## [100] 1 1 1 1 0 1 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1   ## [133] 0 0 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 0   ##    ## $weights[[78]]   ##   [1] 0 0 1 1 0 0 1 1 0 1 1 1 0 0 0 1 0 1 0 1 0 1 1 1 1 0 1 1 0 0 0 1 0   ##  [34] 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 1   ##  [67] 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 0 0   ## [100] 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1   ## [133] 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0   ##    ## $weights[[79]]   ##   [1] 0 0 0 1 1 1 1 1 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 0 1 1 1 0 0   ##  [34] 1 1 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1 1 0 0 1 1 0   ##  [67] 1 1 1 0 1 1 0 1 1 0 0 0 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 0   ## [100] 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 1 0 0 1 1 0 1 1 1 0 0 1 1 0 1   ## [133] 1 1 1 0 1 1 1 1 0 1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0   ##    ## $weights[[80]]   ##   [1] 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1   ##  [34] 0 0 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1   ##  [67] 1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 0   ## [100] 0 1 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 0 1 0 0 1 1   ## [133] 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 0   ##    ## $weights[[81]]   ##   [1] 1 0 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0   ##  [34] 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 0 1 1   ##  [67] 0 0 0 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 0 1 0 1 1 1 1 0 1   ## [100] 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 0 1 1 1 0 1 1 0 0 1 1   ## [133] 1 1 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1 1   ##    ## $weights[[82]]   ##   [1] 1 1 0 1 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0   ##  [34] 1 0 1 0 0 0 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 1 0 1 0 0 1 1   ##  [67] 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1   ## [100] 1 0 0 1 0 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 0 1   ## [133] 0 1 1 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0   ##    ## $weights[[83]]   ##   [1] 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0   ##  [34] 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0   ##  [67] 1 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 0 0   ## [100] 1 0 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1 1   ## [133] 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0   ##    ## $weights[[84]]   ##   [1] 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0   ##  [34] 1 1 1 0 1 0 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 0 1 0 1 0 1 1 1 1   ##  [67] 0 1 0 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1   ## [100] 1 0 1 1 1 1 0 1 1 0 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0   ## [133] 0 1 1 0 0 1 1 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 0 1   ##    ## $weights[[85]]   ##   [1] 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1   ##  [34] 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 1 1 0 1 0 0   ##  [67] 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 1 1   ## [100] 0 0 1 1 1 0 0 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 0 0 1   ## [133] 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 0 0 1 1 0   ##    ## $weights[[86]]   ##   [1] 1 1 0 0 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1   ##  [34] 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1   ##  [67] 1 0 0 1 0 0 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 1 0 0 1 1 0 1 1 0 0 0 0   ## [100] 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0 0   ## [133] 1 0 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1   ##    ## $weights[[87]]   ##   [1] 0 1 0 0 1 0 1 0 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1   ##  [34] 1 1 0 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1   ##  [67] 1 0 1 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 0 0 0 1 0 1 0   ## [100] 1 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1   ## [133] 1 1 0 0 1 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0   ##    ## $weights[[88]]   ##   [1] 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 0 0 1 1   ##  [34] 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 1 0 1 1   ##  [67] 0 0 1 1 0 1 0 1 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 1 1 0 1 1 0 0 1 0 1   ## [100] 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 0 0 0 0   ## [133] 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0   ##    ## $weights[[89]]   ##   [1] 0 0 1 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1   ##  [34] 0 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0   ##  [67] 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0   ## [100] 1 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 1 1 1 0   ## [133] 0 1 0 0 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 0 1 0   ##    ## $weights[[90]]   ##   [1] 0 1 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1   ##  [34] 0 1 1 1 1 1 0 0 1 1 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 1 1 0 0 0 0 1   ##  [67] 1 1 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0   ## [100] 1 1 0 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 1 0 1 1 0 0 0 1 0 1 0 0   ## [133] 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1   ##    ## $weights[[91]]   ##   [1] 1 1 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1 0   ##  [34] 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1   ##  [67] 1 0 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 1 0 1 0 1 1 0 0   ## [100] 1 0 0 1 0 1 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 1 0 1 0 1 1 1 1   ## [133] 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 1 1 1 1 0 1 0 0 1 0 1 1 1 1   ##    ## $weights[[92]]   ##   [1] 1 0 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1   ##  [34] 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 1 0 0 0 0 1 1 0 0 1 1 0 1 0 1 0 0 0   ##  [67] 0 0 0 1 1 0 0 1 1 0 1 1 1 1 1 0 0 0 1 1 1 0 0 1 1 1 0 1 0 0 1 0 0   ## [100] 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 0   ## [133] 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0   ##    ## $weights[[93]]   ##   [1] 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 1 0 0 1 1 1   ##  [34] 1 1 0 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 1   ##  [67] 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 0 1 1 0 0 1 1 0 0 1 0   ## [100] 0 0 0 1 1 1 1 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 1   ## [133] 0 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0   ##    ## $weights[[94]]   ##   [1] 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0   ##  [34] 1 0 0 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0   ##  [67] 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1   ## [100] 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 0 0 0 1 1 1   ## [133] 1 1 0 0 0 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0   ##    ## $weights[[95]]   ##   [1] 1 0 0 1 0 0 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 1 0   ##  [34] 0 0 1 1 1 1 0 0 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1   ##  [67] 1 1 0 0 1 1 1 1 0 0 0 1 1 0 1 1 1 0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1   ## [100] 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1   ## [133] 0 1 1 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1   ##    ## $weights[[96]]   ##   [1] 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1   ##  [34] 0 0 1 0 0 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1   ##  [67] 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1   ## [100] 1 1 0 1 0 0 1 0 0 0 1 0 0 0 1 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 0   ## [133] 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 1   ##    ## $weights[[97]]   ##   [1] 1 1 1 0 0 0 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 0   ##  [34] 1 0 1 1 1 0 0 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 1   ##  [67] 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 1 0 1 1 1 1 1 0 0   ## [100] 0 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1   ## [133] 1 1 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 1 1 0 1 1   ##    ## $weights[[98]]   ##   [1] 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1   ##  [34] 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 1   ##  [67] 1 0 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0   ## [100] 0 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 0   ## [133] 0 0 0 1 0 1 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 0   ##    ## $weights[[99]]   ##   [1] 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0   ##  [34] 1 0 0 0 1 0 1 1 0 0 1 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 0 0 1 1   ##  [67] 0 0 0 1 1 1 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0   ## [100] 1 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 1 1   ## [133] 0 1 1 0 1 0 1 1 1 1 0 0 0 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 1 1   ##    ## $weights[[100]]   ##   [1] 0 1 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0   ##  [34] 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1   ##  [67] 1 1 1 0 1 1 0 1 1 0 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1   ## [100] 0 1 1 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 1 1 1   ## [133] 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 1 0   ##    ## $weights[[101]]   ##   [1] 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0   ##  [34] 1 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 1 0   ##  [67] 1 1 1 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1   ## [100] 1 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0   ## [133] 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 0 0 0 0   ##    ## $weights[[102]]   ##   [1] 0 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 1 1 1 0   ##  [34] 1 0 0 0 0 1 1 1 0 1 0 1 1 0 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 0 1   ##  [67] 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 0 1 1   ## [100] 1 1 1 1 1 0 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 0 1 0   ## [133] 0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 1 0 1   ##    ## $weights[[103]]   ##   [1] 1 1 0 0 0 1 1 0 1 1 0 1 1 1 1 1 1 1 0 0 1 0 0 0 0 1 1 0 1 1 0 1 1   ##  [34] 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0   ##  [67] 1 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 1   ## [100] 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1   ## [133] 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0   ##    ## $weights[[104]]   ##   [1] 1 0 0 1 1 1 0 1 0 0 0 1 0 1 0 1 1 0 1 0 1 1 0 0 0 1 0 0 1 0 1 1 1   ##  [34] 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 0   ##  [67] 1 1 0 1 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 0   ## [100] 0 1 1 1 1 1 1 0 0 1 0 0 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1   ## [133] 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 0 0 0 1 1 1   ##    ## $weights[[105]]   ##   [1] 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1   ##  [34] 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1 1 0 0 1 0 1 0 1   ##  [67] 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1   ## [100] 0 0 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0   ## [133] 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0   ##    ## $weights[[106]]   ##   [1] 1 0 0 1 1 0 1 1 1 1 1 1 0 0 0 1 1 0 0 1 1 1 0 1 0 0 1 1 0 1 1 1 0   ##  [34] 1 1 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1   ##  [67] 1 0 0 1 1 1 1 1 1 0 0 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 1 1 1   ## [100] 1 1 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1   ## [133] 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 0 1 0 1   ##    ## $weights[[107]]   ##   [1] 1 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 0 1   ##  [34] 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0   ##  [67] 0 1 1 0 1 0 0 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 1 1 1 1   ## [100] 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 1 0 0 1 1 1 1   ## [133] 0 1 1 0 1 1 0 1 1 0 1 0 1 1 0 1 0 1 1 0 0 0 1 1 1 0 1 1 1 0   ##    ## $weights[[108]]   ##   [1] 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 0 0 1   ##  [34] 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 0 1 1 0 0 1 0 1 1 1 1 1 1   ##  [67] 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1 1 0 1 1 1 0   ## [100] 1 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0   ## [133] 0 1 1 1 0 1 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1 0 0 0 1   ##    ## $weights[[109]]   ##   [1] 1 0 0 0 1 0 0 0 0 1 1 0 1 1 1 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 0 0 1   ##  [34] 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1   ##  [67] 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 0 1 1 0   ## [100] 0 0 0 1 1 1 0 1 1 1 0 0 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 1   ## [133] 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 1 0 1 1   ##    ## $weights[[110]]   ##   [1] 1 1 1 1 0 1 1 1 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 0 0 0 1   ##  [34] 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1   ##  [67] 0 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 0 0 1 1 0 0 0 0 0 1 1 0 1 1 1 0 0   ## [100] 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0   ## [133] 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 0 1 0 1   ##    ## $weights[[111]]   ##   [1] 1 1 1 1 1 0 1 0 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 1 1 1   ##  [34] 0 1 1 1 1 0 0 1 0 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1   ##  [67] 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 0   ## [100] 0 0 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1   ## [133] 1 0 0 0 0 1 1 1 0 1 1 0 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0   ##    ## $weights[[112]]   ##   [1] 1 1 0 1 1 0 0 0 0 0 1 0 1 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 1 1   ##  [34] 1 1 1 1 1 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 1   ##  [67] 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 0 0 1   ## [100] 1 1 1 1 0 1 1 0 1 0 1 1 0 0 1 1 0 0 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1   ## [133] 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 0 0 0 1 1 0 0 1 1 0 0 0 1 1 0   ##    ## $weights[[113]]   ##   [1] 1 0 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0   ##  [34] 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1 0 0 1 1 1   ##  [67] 1 1 0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1   ## [100] 1 1 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 0   ## [133] 1 1 1 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 0   ##    ## $weights[[114]]   ##   [1] 1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 0 1 0 1 0 0   ##  [34] 1 1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 0 0 0 1   ##  [67] 0 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 1 1 1   ## [100] 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0   ## [133] 1 0 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1   ##    ## $weights[[115]]   ##   [1] 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 1 1   ##  [34] 1 0 1 0 0 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1   ##  [67] 0 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 1 1 1 1 0 1 1   ## [100] 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 0 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0   ## [133] 1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 1   ##    ## $weights[[116]]   ##   [1] 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1   ##  [34] 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 1 1 0 0   ##  [67] 1 1 1 0 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0   ## [100] 1 1 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1   ## [133] 1 1 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1   ##    ## $weights[[117]]   ##   [1] 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1   ##  [34] 1 1 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   ##  [67] 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 1 1 0 1 0   ## [100] 1 0 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 0 1 1 1   ## [133] 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1   ##    ## $weights[[118]]   ##   [1] 0 0 1 1 1 1 0 1 0 1 1 0 1 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 1 1 1 0 1   ##  [34] 0 0 1 0 1 1 0 1 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0   ##  [67] 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 0 1 1   ## [100] 0 0 1 0 0 0 0 0 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1   ## [133] 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1   ##    ## $weights[[119]]   ##   [1] 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1   ##  [34] 1 0 1 0 0 1 0 1 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 1 1 1   ##  [67] 1 1 1 1 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1   ## [100] 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1   ## [133] 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 0 1 0 0 1 1 0 1 0 1   ##    ## $weights[[120]]   ##   [1] 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 0 1 1 1   ##  [34] 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 1 1 0   ##  [67] 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0   ## [100] 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1   ## [133] 0 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1   ##    ## $weights[[121]]   ##   [1] 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0   ##  [34] 0 0 1 1 1 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 0 1 0 0 0 0 1 0 1 1 0 0 1   ##  [67] 0 1 0 1 0 0 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 0 0   ## [100] 1 0 1 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1   ## [133] 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 1 1 1 1 1 0 1 1 1 1 1   ##    ## $weights[[122]]   ##   [1] 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 1 0 0   ##  [34] 1 1 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 1 1 1 0   ##  [67] 1 1 0 1 0 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0   ## [100] 1 1 0 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0   ## [133] 0 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 0 1 1   ##    ## $weights[[123]]   ##   [1] 1 0 0 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 0 0 1 1 1 0 0 0 1 0 1 0 1 1   ##  [34] 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 1 1 0   ##  [67] 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0   ## [100] 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 0 0 0 1 0   ## [133] 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1   ##    ## $weights[[124]]   ##   [1] 1 1 1 0 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 0 1 1 1 0 1 0   ##  [34] 0 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0   ##  [67] 1 0 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 0   ## [100] 1 1 0 0 0 1 0 1 1 1 1 0 1 1 0 0 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0   ## [133] 1 0 1 0 0 0 1 1 0 0 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 0 1 0 0   ##    ## $weights[[125]]   ##   [1] 1 1 0 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0   ##  [34] 1 0 1 1 0 1 1 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1   ##  [67] 0 0 1 1 0 1 1 0 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 0 1 1 0 1 1 1 0 1 0   ## [100] 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1   ## [133] 0 0 1 0 1 1 0 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 0 1 0 0 1 0 1 0   ##    ## $weights[[126]]   ##   [1] 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0   ##  [34] 0 1 1 0 1 1 0 0 1 0 0 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 0 0 0 1   ##  [67] 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 0   ## [100] 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 1 1 0 0   ## [133] 1 0 0 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 0 1 1 0 1 0 1 1 1 0 0 1   ##    ## $weights[[127]]   ##   [1] 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 1 1 0 0 0 0 1 1 1 1 1   ##  [34] 1 1 1 0 1 1 0 0 0 1 1 1 0 0 1 1 0 1 1 0 1 0 0 0 0 0 1 1 0 1 1 1 1   ##  [67] 1 1 1 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 1 1 0 0 1 1 1 0   ## [100] 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0   ## [133] 0 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0   ##    ## $weights[[128]]   ##   [1] 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 0 0   ##  [34] 1 0 0 0 1 1 0 1 0 0 0 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1   ##  [67] 0 1 1 0 1 1 1 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0   ## [100] 1 1 0 1 0 0 1 0 1 1 1 1 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 0 0 1   ## [133] 1 1 1 0 1 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1   ##    ## $weights[[129]]   ##   [1] 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0 0 1 0 0 1 0 1   ##  [34] 1 1 0 0 0 0 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1   ##  [67] 0 1 0 1 1 1 0 0 1 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 0 1 0 1 0 1 0 1   ## [100] 0 1 1 1 0 0 0 1 1 1 1 1 0 0 1 1 0 0 0 1 1 0 1 1 1 0 1 0 1 0 0 1 1   ## [133] 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 1 1 0 0   ##    ## $weights[[130]]   ##   [1] 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 0 0 1 0 0 1 0 1 1 1 1 1 1 1 0 1 0 1   ##  [34] 1 1 0 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0 0 0 1 1 0 1 1 0 1 1 0 1 1   ##  [67] 1 0 0 1 0 1 1 0 0 1 0 1 0 0 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 1 1 0   ## [100] 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 0 1 1 0 0   ## [133] 1 1 1 1 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 1 0 1 0 0 1 0 1 1 0 0   ##    ## $weights[[131]]   ##   [1] 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 0   ##  [34] 1 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 0 1 0   ##  [67] 0 1 1 1 1 0 1 0 1 1 0 1 0 1 0 0 1 0 1 1 1 0 1 1 1 0 1 0 0 1 0 0 1   ## [100] 1 0 0 0 1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1   ## [133] 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1   ##    ## $weights[[132]]   ##   [1] 1 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1   ##  [34] 1 1 0 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 1 0 0 0 1   ##  [67] 1 0 1 1 1 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 1   ## [100] 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 1 1   ## [133] 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1   ##    ## $weights[[133]]   ##   [1] 1 0 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 0 1 0 1 1 1 1   ##  [34] 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 0 1 0 0 1 0 0 1   ##  [67] 1 1 0 1 1 0 0 0 1 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1   ## [100] 1 1 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 1 1 1 0 1 1 0   ## [133] 1 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 0   ##    ## $weights[[134]]   ##   [1] 0 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 0   ##  [34] 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1   ##  [67] 1 1 1 0 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 1 0   ## [100] 0 0 1 0 1 1 0 1 0 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1   ## [133] 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0   ##    ## $weights[[135]]   ##   [1] 1 0 1 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1   ##  [34] 0 0 0 0 1 0 1 1 1 1 0 1 0 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1   ##  [67] 0 1 0 0 1 1 1 1 1 0 1 0 1 0 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1   ## [100] 1 0 1 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1   ## [133] 1 1 0 1 0 1 1 1 1 1 0 0 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1 0 0   ##    ## $weights[[136]]   ##   [1] 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1   ##  [34] 0 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 0   ##  [67] 0 1 0 0 1 1 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1   ## [100] 0 1 1 1 1 0 1 1 0 0 1 0 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 0 1 1 0   ## [133] 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0   ##    ## $weights[[137]]   ##   [1] 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 1 0 0 1 1   ##  [34] 0 0 1 1 1 1 1 0 1 0 1 0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 1 0 0 0 1 1 1   ##  [67] 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 1 0 1 1 0   ## [100] 1 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 0 1 1   ## [133] 0 0 1 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 0 0 0 1 1 1 0 0 0 0   ##    ## $weights[[138]]   ##   [1] 0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 1 1 0 0 1   ##  [34] 0 0 1 1 0 1 0 0 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1   ##  [67] 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 1 0 1 1 0 0 0 1 1 1 1 0 1 1   ## [100] 0 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1   ## [133] 0 0 1 1 0 0 0 1 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 1 0 1   ##    ## $weights[[139]]   ##   [1] 1 1 1 1 0 0 0 1 1 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 1 1 0 1 0   ##  [34] 1 1 0 0 1 0 1 0 1 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 0 0 1 0   ##  [67] 1 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 1 0 1   ## [100] 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0   ## [133] 1 1 1 0 1 1 1 0 0 0 1 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 0 0   ##    ## $weights[[140]]   ##   [1] 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 1 1 0 1 1 1 0   ##  [34] 1 0 0 1 1 1 0 1 1 1 0 1 0 1 1 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 1 1 0   ##  [67] 0 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 1 1 0 1 0 1   ## [100] 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1   ## [133] 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 0   ##    ## $weights[[141]]   ##   [1] 1 1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1   ##  [34] 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 1 1 1 1 0 0 1 0 0 1 0 0 1   ##  [67] 0 1 1 0 1 1 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0   ## [100] 0 1 1 0 1 1 0 1 1 1 1 0 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1   ## [133] 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1   ##    ## $weights[[142]]   ##   [1] 1 1 0 1 0 1 0 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 0 0 1 1 0 1 0 0 1   ##  [34] 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1   ##  [67] 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 0 0 1 1   ## [100] 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 1   ## [133] 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0   ##    ## $weights[[143]]   ##   [1] 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1   ##  [34] 0 1 0 1 0 1 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0   ##  [67] 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 0 1 0 1   ## [100] 1 1 0 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1   ## [133] 1 1 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 0 0 1 1 1 1   ##    ## $weights[[144]]   ##   [1] 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 1   ##  [34] 1 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1   ##  [67] 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1   ## [100] 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0 0 0 1 0 1 0   ## [133] 0 0 0 0 1 0 1 1 1 0 0 1 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 0 1 1   ##    ## $weights[[145]]   ##   [1] 0 1 1 1 0 1 0 1 0 0 0 0 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 0   ##  [34] 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 0 0   ##  [67] 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 1   ## [100] 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0   ## [133] 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1   ##    ## $weights[[146]]   ##   [1] 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 1 1 1   ##  [34] 0 0 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0   ##  [67] 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 1   ## [100] 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 1 0 1 1 0 0 1 1   ## [133] 0 1 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 0 1   ##    ## $weights[[147]]   ##   [1] 1 1 1 1 1 1 0 0 1 0 1 0 1 0 0 0 0 1 0 1 1 1 0 0 1 0 1 1 0 1 0 1 0   ##  [34] 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 0   ##  [67] 1 0 1 0 1 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 1 0 0 0 1 1 1 0 0 1   ## [100] 0 1 1 1 1 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1   ## [133] 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1   ##    ## $weights[[148]]   ##   [1] 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1 1   ##  [34] 1 1 1 0 1 0 0 0 0 1 0 0 1 0 1 1 1 0 0 0 0 1 0 1 0 1 1 1 1 1 1 1 0   ##  [67] 0 1 1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1   ## [100] 0 1 0 1 0 0 0 1 1 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1 1   ## [133] 0 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 1 1 1 0 1 1   ##    ## $weights[[149]]   ##   [1] 1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1   ##  [34] 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 0 1 1 0 0 1 0 1   ##  [67] 1 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 0 1 0 1   ## [100] 1 1 0 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 0 1 1 0 1 1 0 1   ## [133] 1 1 0 1 1 0 1 1 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1 1 0 1 0 1 0 0   ##    ## $weights[[150]]   ##   [1] 0 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1   ##  [34] 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 0 1 1 1 0 1 0 0 1 1 0 1 1 0 1 1 0 1   ##  [67] 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 1 1   ## [100] 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1   ## [133] 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1   ##    ## $weights[[151]]   ##   [1] 1 0 1 1 0 0 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 0 0   ##  [34] 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1   ##  [67] 1 1 0 1 0 1 1 0 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 0   ## [100] 0 1 0 1 0 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0   ## [133] 1 0 1 1 0 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 0 1 0 1 1 0 1   ##    ## $weights[[152]]   ##   [1] 1 0 0 1 1 1 1 1 0 0 1 1 0 0 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0 0 0   ##  [34] 1 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1   ##  [67] 0 1 1 1 1 0 0 0 0 1 1 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0   ## [100] 1 1 1 0 1 0 1 1 0 0 1 1 0 0 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0   ## [133] 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0   ##    ## $weights[[153]]   ##   [1] 1 1 1 0 1 1 0 0 0 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1   ##  [34] 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1   ##  [67] 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1 1 1 1   ## [100] 1 0 1 0 0 1 1 0 1 0 1 1 0 0 0 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 1 1 1   ## [133] 1 0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1   ##    ## $weights[[154]]   ##   [1] 0 1 1 1 0 1 1 0 0 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1   ##  [34] 1 0 0 1 1 0 1 1 0 1 0 1 0 0 1 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1   ##  [67] 1 0 0 0 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 0 1   ## [100] 1 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 0   ## [133] 0 1 1 1 1 0 0 0 1 1 1 0 0 0 1 1 0 1 1 1 0 0 0 1 1 0 1 1 0 1   ##    ## $weights[[155]]   ##   [1] 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 0 1 1 0 0   ##  [34] 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1   ##  [67] 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 0 1 0 0 1 1 1 0 0 1 1 1 1 1 0   ## [100] 0 1 0 0 1 1 0 0 0 1 0 0 1 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 0   ## [133] 0 1 0 0 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1   ##    ## $weights[[156]]   ##   [1] 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 1 0 1   ##  [34] 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 0 0 0 0 1 1 0 1   ##  [67] 1 0 0 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 0 0 0   ## [100] 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 0 1 1 1 1   ## [133] 1 1 1 1 0 0 1 1 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1   ##    ## $weights[[157]]   ##   [1] 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 0 1 1 1 0 1   ##  [34] 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 1 1 0 0 0 0 1 1 0 1 1   ##  [67] 1 1 0 1 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1   ## [100] 1 1 0 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 1 1 0 1 1 0 0   ## [133] 0 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 1 0   ##    ## $weights[[158]]   ##   [1] 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1   ##  [34] 0 1 1 1 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0   ##  [67] 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0   ## [100] 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1 1 1   ## [133] 0 0 0 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1   ##    ## $weights[[159]]   ##   [1] 1 1 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1   ##  [34] 0 1 1 1 0 0 0 1 0 1 1 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0 0 1   ##  [67] 0 0 1 0 0 0 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1   ## [100] 0 1 1 1 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 0 1 0 1 0 1   ## [133] 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1   ##    ## $weights[[160]]   ##   [1] 1 1 1 0 1 0 0 1 0 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 0 1 0 0 0   ##  [34] 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 0 1 0 1 1 1 1 0 1   ##  [67] 1 0 1 0 0 0 0 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 0   ## [100] 1 1 1 0 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 1 1   ## [133] 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1   ##    ## $weights[[161]]   ##   [1] 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 1 1 0 1 0 0 1 1 1 0   ##  [34] 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 1 0 0 0 0 1 1   ##  [67] 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1   ## [100] 1 0 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 1   ## [133] 0 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0   ##    ## $weights[[162]]   ##   [1] 1 1 1 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1   ##  [34] 1 1 1 1 0 0 0 0 1 1 1 1 0 1 1 0 1 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0   ##  [67] 1 0 0 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 0 0 1 1 0 1 0 0 1 1   ## [100] 1 1 1 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1   ## [133] 1 0 1 0 1 0 1 1 1 0 1 1 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1   ##    ## $weights[[163]]   ##   [1] 1 0 1 1 0 0 1 1 0 0 1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 0 1 1 0   ##  [34] 1 0 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1   ##  [67] 0 1 1 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 0 1 1 1 0 0 1 1   ## [100] 1 1 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 1 0 1 1 0 0 1 1 0 0 1 0 1 1 0 1   ## [133] 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 0 0 1 1 1 1 0 0 1 1 1 1 0   ##    ## $weights[[164]]   ##   [1] 1 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 1 0 1 0 0 0 1 1 1 1 0 1   ##  [34] 1 0 0 0 1 0 0 0 1 0 1 1 0 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1   ##  [67] 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1   ## [100] 0 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1   ## [133] 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1   ##    ## $weights[[165]]   ##   [1] 0 1 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1 1 1 1 0 1 0 1 1 0 0 0 1 1 1 1   ##  [34] 0 1 1 0 1 0 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1   ##  [67] 0 1 1 1 0 1 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 1   ## [100] 0 1 1 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1   ## [133] 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1   ##    ## $weights[[166]]   ##   [1] 0 1 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 1   ##  [34] 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 0 1 1 0 0   ##  [67] 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0   ## [100] 0 1 0 1 1 0 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1   ## [133] 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1   ##    ## $weights[[167]]   ##   [1] 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 0   ##  [34] 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1   ##  [67] 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 1   ## [100] 1 0 1 1 1 0 1 0 0 1 0 0 0 0 0 1 1 1 0 1 0 1 1 0 1 0 0 1 1 1 0 0 1   ## [133] 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1   ##    ## $weights[[168]]   ##   [1] 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 0   ##  [34] 1 0 1 1 1 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 1 1 0 0 1 0 0 0   ##  [67] 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0   ## [100] 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 1 1 0 1 1   ## [133] 1 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1   ##    ## $weights[[169]]   ##   [1] 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 1 1 1 1   ##  [34] 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1   ##  [67] 1 0 1 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1   ## [100] 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 1   ## [133] 0 1 0 0 1 0 0 1 0 1 1 1 0 1 1 0 1 0 1 0 1 1 0 0 1 1 1 1 1 1   ##    ## $weights[[170]]   ##   [1] 1 1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0   ##  [34] 1 0 0 1 1 1 1 1 0 1 0 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1   ##  [67] 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1   ## [100] 0 1 1 0 0 0 1 1 1 0 1 0 0 0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 1   ## [133] 1 1 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 0   ##    ## $weights[[171]]   ##   [1] 0 1 1 1 1 1 0 1 0 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0   ##  [34] 1 1 1 1 1 0 0 0 0 1 1 0 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 0 1 0   ##  [67] 0 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0   ## [100] 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 1 1 1 1 1 1   ## [133] 0 1 1 0 1 0 1 0 0 1 0 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 1   ##    ## $weights[[172]]   ##   [1] 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 1 1 1   ##  [34] 0 1 1 1 0 1 1 0 0 0 0 1 1 1 1 1 0 0 1 1 1 0 1 0 0 1 1 0 1 1 0 1 1   ##  [67] 1 0 1 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 0 1 1 0 1 0 1 1 0 1 1   ## [100] 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0   ## [133] 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0   ##    ## $weights[[173]]   ##   [1] 0 0 1 0 1 1 1 0 0 1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 0 1   ##  [34] 1 1 1 0 0 1 1 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 0   ##  [67] 1 0 0 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1   ## [100] 1 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0   ## [133] 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 0   ##    ## $weights[[174]]   ##   [1] 0 0 0 0 1 1 1 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 1 1 1 0   ##  [34] 1 0 0 1 0 1 0 0 1 1 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1   ##  [67] 1 1 0 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1   ## [100] 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 1   ## [133] 1 1 0 0 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 1 0 1 0 1 1 0 1 1 1   ##    ## $weights[[175]]   ##   [1] 0 0 1 1 0 0 0 1 1 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1   ##  [34] 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 1 0 1 0 0 1 1 1 1   ##  [67] 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1   ## [100] 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1 1 1   ## [133] 1 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 1 1 1   ##    ## $weights[[176]]   ##   [1] 1 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1   ##  [34] 1 0 1 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 0 0 0 1 1 1 0 0 1 1 1 0   ##  [67] 1 1 0 1 1 0 1 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 0 0 0 1 1 0 1 0 1 0   ## [100] 1 0 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1 1 0   ## [133] 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1   ##    ## $weights[[177]]   ##   [1] 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0   ##  [34] 1 0 1 1 1 1 0 1 0 1 0 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1   ##  [67] 0 0 0 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 0 1 0 1 0 1   ## [100] 1 0 0 1 0 1 1 1 0 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 0   ## [133] 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1   ##    ## $weights[[178]]   ##   [1] 1 1 1 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 1   ##  [34] 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1   ##  [67] 1 1 0 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1   ## [100] 1 1 0 1 1 1 0 1 1 0 0 0 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1   ## [133] 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1   ##    ## $weights[[179]]   ##   [1] 0 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 0 1 1 0   ##  [34] 0 1 1 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 0 0 1 1 1 1   ##  [67] 1 1 1 0 1 0 0 0 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1   ## [100] 0 1 1 0 1 1 0 0 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1   ## [133] 0 1 1 0 1 1 1 0 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 0   ##    ## $weights[[180]]   ##   [1] 0 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1 0 0 1 1 0 0   ##  [34] 0 0 1 0 1 0 1 0 1 0 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1   ##  [67] 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 0 1 0 0 1   ## [100] 1 0 1 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1   ## [133] 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0   ##    ## $weights[[181]]   ##   [1] 0 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0   ##  [34] 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 1   ##  [67] 1 0 0 1 0 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 0   ## [100] 0 0 0 1 0 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 1   ## [133] 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1   ##    ## $weights[[182]]   ##   [1] 1 1 0 1 0 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 0 1 1 0 1   ##  [34] 0 1 0 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 1 1   ##  [67] 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 0 0 0 1 0 0   ## [100] 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 1   ## [133] 1 1 0 1 1 1 0 1 0 0 0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1   ##    ## $weights[[183]]   ##   [1] 1 0 1 0 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 0 0 0 0 1 1 1 1 1 1   ##  [34] 1 0 1 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0 0   ##  [67] 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 0 1 0 1 1 1   ## [100] 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 1   ## [133] 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1   ##    ## $weights[[184]]   ##   [1] 1 1 1 1 0 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 0 0   ##  [34] 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0 1 1 1 1 0   ##  [67] 1 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 1 1   ## [100] 0 0 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1   ## [133] 0 1 0 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 0 1 1 1 1 1 0 1   ##    ## $weights[[185]]   ##   [1] 1 1 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 0 0 1 0 1 1   ##  [34] 0 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 0 1 1 0   ##  [67] 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 1 1   ## [100] 1 0 1 1 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1   ## [133] 0 1 1 1 1 0 0 1 0 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1 0 1 0 1   ##    ## $weights[[186]]   ##   [1] 1 0 1 0 1 0 1 0 1 0 1 1 1 1 0 0 0 0 0 1 1 0 0 0 1 1 1 1 1 0 1 0 1   ##  [34] 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1   ##  [67] 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1   ## [100] 1 0 1 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 1   ## [133] 0 0 0 1 1 1 1 0 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 0 1 1 1 1 0 1   ##    ## $weights[[187]]   ##   [1] 0 1 0 1 1 1 0 0 1 1 0 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1   ##  [34] 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 0 1 0 1 1 0 1 1 1 0 0 0 0 0 1 1 1 1   ##  [67] 0 0 0 1 1 1 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1   ## [100] 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 0 1 1 0   ## [133] 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 0 1 1   ##    ## $weights[[188]]   ##   [1] 1 0 0 0 1 0 0 1 1 0 0 1 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0   ##  [34] 0 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 0 1 1 1 0 0 0 1 0 0 1 1   ##  [67] 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0   ## [100] 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 0 1 1   ## [133] 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 0 1 1 1 0 1 0 0 0   ##    ## $weights[[189]]   ##   [1] 0 1 1 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1   ##  [34] 0 0 1 0 1 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1   ##  [67] 0 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1   ## [100] 1 1 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1   ## [133] 0 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 1 0 1 0 1 0 0 0 0 1 1   ##    ## $weights[[190]]   ##   [1] 1 0 0 0 1 1 1 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 1 0   ##  [34] 1 1 0 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 1 0   ##  [67] 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 0 0 0 0 1 1 0 1 1 0 1 1   ## [100] 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0   ## [133] 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 0 1   ##    ## $weights[[191]]   ##   [1] 1 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 1 1 1 0 1 0 1 1 1 0 0 0 1 1 0 1   ##  [34] 0 0 0 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1 0   ##  [67] 1 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 1 0 1 1 1 1 0 1   ## [100] 1 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 1   ## [133] 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1   ##    ## $weights[[192]]   ##   [1] 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 1 0 0   ##  [34] 1 1 0 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 0 0   ##  [67] 1 1 0 0 1 1 1 1 0 1 1 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 1 1 0 1 1 0 0   ## [100] 0 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0   ## [133] 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1 1 0   ##    ## $weights[[193]]   ##   [1] 1 0 0 1 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 0 0   ##  [34] 1 1 1 0 1 1 1 0 1 0 0 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 1 1 1 0 1 1 1   ##  [67] 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   ## [100] 0 1 0 0 0 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1   ## [133] 1 0 1 1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1   ##    ## $weights[[194]]   ##   [1] 0 1 1 1 0 0 0 1 1 1 1 1 1 0 0 1 0 0 0 1 1 1 1 0 1 1 0 1 1 0 1 0 0   ##  [34] 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1   ##  [67] 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 0 1   ## [100] 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 1 1 1 1 1 1   ## [133] 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 1 0 1   ##    ## $weights[[195]]   ##   [1] 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1 0 1 0   ##  [34] 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1   ##  [67] 1 1 0 0 1 1 1 0 1 1 0 1 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 1   ## [100] 1 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0 0   ## [133] 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 1 1 1 0   ##    ## $weights[[196]]   ##   [1] 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0   ##  [34] 1 1 1 1 1 0 1 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 1 1 0 0 0 1   ##  [67] 0 1 1 0 0 1 0 1 1 1 0 1 1 0 1 1 1 1 1 0 1 0 0 1 0 1 1 0 1 1 1 1 1   ## [100] 1 0 0 1 0 0 1 0 1 1 0 1 1 0 0 1 1 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1   ## [133] 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1   ##    ## $weights[[197]]   ##   [1] 0 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 0   ##  [34] 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 1 1 1 0 0 0 1 1 1 0 0 0   ##  [67] 1 1 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 1 0 1 1 1 0 1 1   ## [100] 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 0 1 0   ## [133] 1 0 1 1 1 1 1 1 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0   ##    ## $weights[[198]]   ##   [1] 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0 0 1 0 0 0 1 0 1 1 0 1   ##  [34] 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 0 1   ##  [67] 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 1   ## [100] 1 0 0 1 1 1 0 1 1 0 0 0 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0   ## [133] 1 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 0   ##    ## $weights[[199]]   ##   [1] 1 0 0 1 1 1 0 1 1 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 0   ##  [34] 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 1   ##  [67] 0 0 0 1 1 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 0   ## [100] 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 0 0   ## [133] 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0   ##    ## $weights[[200]]   ##   [1] 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1   ##  [34] 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1   ##  [67] 1 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 0   ## [100] 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 0 0 1 0   ## [133] 1 0 1 0 1 0 1 0 0 1 0 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 1   ##    ##    ## $fitted   ##     idx (response)   ## 1     1        218   ## 2     2        166   ## 3     3        170   ## 4     4        567   ## 5     5        613   ## 6     6        707   ## 7     7         61   ## 8     8        301   ## 9     9         81   ## 10   10        371   ## 11   11        520   ## 12   12        574   ## 13   13        118   ## 14   14        390   ## 15   15         12   ## 16   16        473   ## 17   17         26   ## 18   18        107   ## 19   19         53   ## 20   20        814   ## 21   21       965+   ## 22   22         93   ## 23   23        731   ## 24   24        460   ## 25   25        153   ## 26   26        433   ## 27   27        583   ## 28   28         95   ## 29   29        303   ## 30   30        519   ## 31   31        643   ## 32   32        765   ## 33   33         53   ## 34   34        246   ## 35   35        689   ## 36   36          5   ## 37   37        687   ## 38   38        345   ## 39   39        444   ## 40   40        223   ## 41   41         60   ## 42   42        163   ## 43   43         65   ## 44   44       821+   ## 45   45        428   ## 46   46        230   ## 47   47       840+   ## 48   48        305   ## 49   49         11   ## 50   50        226   ## 51   51        426   ## 52   52        705   ## 53   53        363   ## 54   54        176   ## 55   55        791   ## 56   56         95   ## 57   57       196+   ## 58   58        167   ## 59   59       806+   ## 60   60        284   ## 61   61        641   ## 62   62        147   ## 63   63       740+   ## 64   64        163   ## 65   65        655   ## 66   66         88   ## 67   67        245   ## 68   68         30   ## 69   69        477   ## 70   70       559+   ## 71   71        450   ## 72   72        156   ## 73   73       529+   ## 74   74        429   ## 75   75        351   ## 76   76         15   ## 77   77        181   ## 78   78        283   ## 79   79         13   ## 80   80        212   ## 81   81        524   ## 82   82        288   ## 83   83        363   ## 84   84        199   ## 85   85        550   ## 86   86         54   ## 87   87        558   ## 88   88        207   ## 89   89         92   ## 90   90         60   ## 91   91       551+   ## 92   92        293   ## 93   93        353   ## 94   94        267   ## 95   95       511+   ## 96   96        457   ## 97   97        337   ## 98   98        201   ## 99   99       404+   ## 100 100        222   ## 101 101         62   ## 102 102       458+   ## 103 103        353   ## 104 104        163   ## 105 105         31   ## 106 106        229   ## 107 107        156   ## 108 108        291   ## 109 109        179   ## 110 110       376+   ## 111 111       384+   ## 112 112        268   ## 113 113       292+   ## 114 114        142   ## 115 115       413+   ## 116 116       266+   ## 117 117        320   ## 118 118        181   ## 119 119        285   ## 120 120       301+   ## 121 121        348   ## 122 122        197   ## 123 123       382+   ## 124 124       303+   ## 125 125       296+   ## 126 126        180   ## 127 127        145   ## 128 128       269+   ## 129 129       300+   ## 130 130       284+   ## 131 131       292+   ## 132 132       332+   ## 133 133        285   ## 134 134       259+   ## 135 135        110   ## 136 136        286   ## 137 137        270   ## 138 138       225+   ## 139 139        269   ## 140 140       225+   ## 141 141       243+   ## 142 142       276+   ## 143 143        135   ## 144 144         79   ## 145 145         59   ## 146 146       240+   ## 147 147       202+   ## 148 148       235+   ## 149 149        239   ## 150 150       252+   ## 151 151       221+   ## 152 152       185+   ## 153 153       222+   ## 154 154        183   ## 155 155       211+   ## 156 156       175+   ## 157 157       197+   ## 158 158       203+   ## 159 159       191+   ## 160 160       105+   ## 161 161       174+   ## 162 162       177+   ##    ## $terms   ## Surv(time, status) ~ inst + age + sex + ph.ecog + ph.karno +    ##     pat.karno + meal.cal + wt.loss   ## attr(,\"variables\")   ## list(Surv(time, status), inst, age, sex, ph.ecog, ph.karno, pat.karno,    ##     meal.cal, wt.loss)   ## attr(,\"factors\")   ##                    inst age sex ph.ecog ph.karno pat.karno meal.cal   ## Surv(time, status)    0   0   0       0        0         0        0   ## inst                  1   0   0       0        0         0        0   ## age                   0   1   0       0        0         0        0   ## sex                   0   0   1       0        0         0        0   ## ph.ecog               0   0   0       1        0         0        0   ## ph.karno              0   0   0       0        1         0        0   ## pat.karno             0   0   0       0        0         1        0   ## meal.cal              0   0   0       0        0         0        1   ## wt.loss               0   0   0       0        0         0        0   ##                    wt.loss   ## Surv(time, status)       0   ## inst                     0   ## age                      0   ## sex                      0   ## ph.ecog                  0   ## ph.karno                 0   ## pat.karno                0   ## meal.cal                 0   ## wt.loss                  1   ## attr(,\"term.labels\")   ## [1] \"inst\"      \"age\"       \"sex\"       \"ph.ecog\"   \"ph.karno\"    ## [6] \"pat.karno\" \"meal.cal\"  \"wt.loss\"     ## attr(,\"order\")   ## [1] 1 1 1 1 1 1 1 1   ## attr(,\"intercept\")   ## [1] 1   ## attr(,\"response\")   ## [1] 1   ## attr(,\".Environment\")   ## <environment: 0x556e2eeeab38>   ## attr(,\"Formula_with_dot\")   ## Surv(time, status) ~ .   ## <environment: 0x556e2eeeab38>   ## attr(,\"Formula_without_dot\")   ## Surv(time, status) ~ inst + age + sex + ph.ecog + ph.karno +    ##     pat.karno + meal.cal + wt.loss   ## <environment: 0x556e2eeeab38>   ## attr(,\"dot\")   ## [1] \"sequential\"   ##    ## $info   ## $info$call   ## partykit::cforest(formula = formula, data = data, weights = weights,    ##     control = partykit::ctree_control(minsplit = 20L, maxdepth = Inf,    ##         teststat = \"quadratic\", testtype = \"Univariate\", mincriterion = 0,    ##         saveinfo = FALSE), ntree = 200, mtry = 3)   ##    ## $info$control   ## $info$control$criterion   ## [1] \"p.value\"   ##    ## $info$control$logmincriterion   ## [1] -Inf   ##    ## $info$control$minsplit   ## [1] 20   ##    ## $info$control$minbucket   ## [1] 7   ##    ## $info$control$minprob   ## [1] 0.01   ##    ## $info$control$maxvar   ## [1] Inf   ##    ## $info$control$stump   ## [1] FALSE   ##    ## $info$control$nmax   ##  yx   z    ## Inf Inf    ##    ## $info$control$lookahead   ## [1] FALSE   ##    ## $info$control$mtry   ## [1] 3   ##    ## $info$control$maxdepth   ## [1] Inf   ##    ## $info$control$multiway   ## [1] FALSE   ##    ## $info$control$splittry   ## [1] 2   ##    ## $info$control$maxsurrogate   ## [1] 0   ##    ## $info$control$numsurrogate   ## [1] FALSE   ##    ## $info$control$majority   ## [1] FALSE   ##    ## $info$control$caseweights   ## [1] TRUE   ##    ## $info$control$applyfun   ## function (X, FUN, ...)    ## {   ##     FUN <- match.fun(FUN)   ##     if (!is.vector(X) || is.object(X))    ##         X <- as.list(X)   ##     .Internal(lapply(X, FUN))   ## }   ## <bytecode: 0x556e25a1af20>   ## <environment: namespace:base>   ##    ## $info$control$saveinfo   ## [1] FALSE   ##    ## $info$control$bonferroni   ## [1] FALSE   ##    ## $info$control$update   ## [1] FALSE   ##    ## $info$control$selectfun   ## function (model, trafo, data, subset, weights, whichvar, ctrl)    ## {   ##     args <- list(...)   ##     ctrl[names(args)] <- args   ##     .select(model, trafo, data, subset, weights, whichvar, ctrl,    ##         FUN = .ctree_test)   ## }   ## <bytecode: 0x556e36722b78>   ## <environment: 0x556e2ed8ea80>   ##    ## $info$control$splitfun   ## function (model, trafo, data, subset, weights, whichvar, ctrl)    ## {   ##     args <- list(...)   ##     ctrl[names(args)] <- args   ##     .split(model, trafo, data, subset, weights, whichvar, ctrl,    ##         FUN = .ctree_test)   ## }   ## <bytecode: 0x556e36726cc8>   ## <environment: 0x556e2ed8eb60>   ##    ## $info$control$svselectfun   ## function (model, trafo, data, subset, weights, whichvar, ctrl)    ## {   ##     args <- list(...)   ##     ctrl[names(args)] <- args   ##     .select(model, trafo, data, subset, weights, whichvar, ctrl,    ##         FUN = .ctree_test)   ## }   ## <bytecode: 0x556e36722b78>   ## <environment: 0x556e2ed8ec40>   ##    ## $info$control$svsplitfun   ## function (model, trafo, data, subset, weights, whichvar, ctrl)    ## {   ##     args <- list(...)   ##     ctrl[names(args)] <- args   ##     .split(model, trafo, data, subset, weights, whichvar, ctrl,    ##         FUN = .ctree_test)   ## }   ## <bytecode: 0x556e36726cc8>   ## <environment: 0x556e2ed8ed90>   ##    ## $info$control$teststat   ## [1] \"quadratic\"   ##    ## $info$control$splitstat   ## [1] \"quadratic\"   ##    ## $info$control$splittest   ## [1] FALSE   ##    ## $info$control$pargs   ## $maxpts   ## [1] 25000   ##    ## $abseps   ## [1] 0.001   ##    ## $releps   ## [1] 0   ##    ## attr(,\"class\")   ## [1] \"GenzBretz\"   ##    ## $info$control$testtype   ## [1] \"Univariate\"   ##    ## $info$control$nresample   ## [1] 9999   ##    ## $info$control$tol   ## [1] 1.490116e-08   ##    ## $info$control$intersplit   ## [1] FALSE   ##    ## $info$control$MIA   ## [1] FALSE   ##    ##    ##    ## $trafo   ## function (subset, weights, info, estfun, object, ...)    ## list(estfun = Y, unweighted = TRUE)   ## <bytecode: 0x556e2e912058>   ## <environment: 0x556e2ed8cc40>   ##    ## $predictf   ## ~inst + age + sex + ph.ecog + ph.karno + pat.karno + meal.cal +    ##     wt.loss   ## attr(,\"variables\")   ## list(inst, age, sex, ph.ecog, ph.karno, pat.karno, meal.cal,    ##     wt.loss)   ## attr(,\"factors\")   ##           inst age sex ph.ecog ph.karno pat.karno meal.cal wt.loss   ## inst         1   0   0       0        0         0        0       0   ## age          0   1   0       0        0         0        0       0   ## sex          0   0   1       0        0         0        0       0   ## ph.ecog      0   0   0       1        0         0        0       0   ## ph.karno     0   0   0       0        1         0        0       0   ## pat.karno    0   0   0       0        0         1        0       0   ## meal.cal     0   0   0       0        0         0        1       0   ## wt.loss      0   0   0       0        0         0        0       1   ## attr(,\"term.labels\")   ## [1] \"inst\"      \"age\"       \"sex\"       \"ph.ecog\"   \"ph.karno\"    ## [6] \"pat.karno\" \"meal.cal\"  \"wt.loss\"     ## attr(,\"order\")   ## [1] 1 1 1 1 1 1 1 1   ## attr(,\"intercept\")   ## [1] 1   ## attr(,\"response\")   ## [1] 0   ## attr(,\".Environment\")   ## <environment: 0x556e2eeeab38>   ## attr(,\"Formula_with_dot\")   ## Surv(time, status) ~ .   ## <environment: 0x556e2eeeab38>   ## attr(,\"Formula_without_dot\")   ## Surv(time, status) ~ inst + age + sex + ph.ecog + ph.karno +    ##     pat.karno + meal.cal + wt.loss   ## <environment: 0x556e2eeeab38>   ## attr(,\"dot\")   ## [1] \"sequential\"   ##    ## attr(,\"class\")   ## [1] \"cforest\"      \"constparties\" \"parties\" predict(     rf_fit,      lung_test,      type = \"survival\",      eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.886    ## 2        500         0.303    ## 3       1000         0.0443 predict(rf_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1        337   ## 2        267   ## 3        230   ## 4        201   ## 5        226 library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] rf_spec <-      rand_forest(trees = 200) %>%     set_engine(\"aorsf\") %>%      set_mode(\"censored regression\")    rf_spec ## Random Forest Model Specification (censored regression)   ##    ## Main Arguments:   ##   trees = 200   ##    ## Computational engine: aorsf set.seed(1)      rf_fit <- rf_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   rf_fit ## parsnip model object   ##    ## ---------- Oblique random survival forest   ##    ##      Linear combinations: Accelerated Cox regression   ##           N observations: 162   ##                 N events: 278   ##                  N trees: 200   ##       N predictors total: 8   ##    N predictors per node: 3   ##  Average leaves per tree: 17.175   ## Min observations in leaf: 5   ##       Min events in leaf: 1   ##           OOB stat value: 0.62   ##            OOB stat type: Harrell's C-index   ##      Variable importance: anova   ##    ## ----------------------------------------- predict(     rf_fit,      lung_test,      type = \"survival\",      eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.917    ## 2        500         0.397    ## 3       1000         0.0538 predict(rf_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       397.   ## 2       277.   ## 3       240.   ## 4       228.   ## 5       226."},{"path":"https://censored.tidymodels.org/dev/articles/examples.html","id":"survival_reg-models","dir":"Articles","previous_headings":"","what":"survival_reg() models","title":"Fitting and Predicting with censored","text":"’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time, linear predictor, quantile, hazard. ’ll model survival lung cancer patients. can define model specific parameters: Now create model fit object: holdout data can predicted survival probability different time points well event time, linear predictor, quantile, hazard. ’ll model survival lung cancer patients. can define model: Now create model fit object: holdout data can predicted survival probability different time points well event time, linear predictor, quantile, hazard.","code":"library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] sr_spec <-      survival_reg(dist = \"weibull\") %>%     set_engine(\"survival\") %>%      set_mode(\"censored regression\")    sr_spec ## Parametric Survival Regression Model Specification (censored regression)   ##    ## Main Arguments:   ##   dist = weibull   ##    ## Computational engine: survival set.seed(1)   sr_fit <- sr_spec %>% fit(Surv(time, status) ~ ., data = lung_train)   sr_fit ## parsnip model object   ##    ## Call:   ## survival::survreg(formula = Surv(time, status) ~ ., data = data,    ##     dist = ~\"weibull\", model = TRUE)   ##    ## Coefficients:   ##   (Intercept)          inst           age           sex       ph.ecog    ##  6.2802499155  0.0191302849 -0.0085917372  0.4249655608 -0.5022975982    ##      ph.karno     pat.karno      meal.cal       wt.loss    ## -0.0085852225  0.0058753359  0.0001003211  0.0127001420    ##    ## Scale= 0.6902035    ##    ## Loglik(model)= -795.2   Loglik(intercept only)= -811.4   ##    Chisq= 32.41 on 8 degrees of freedom, p= 7.85e-05    ## n= 162 predict(     sr_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.912    ## 2        500         0.386    ## 3       1000         0.0742 predict(sr_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       517.   ## 2       283.   ## 3       361.   ## 4       268.   ## 5       313. predict(sr_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1              6.25   ## 2              5.64   ## 3              5.89   ## 4              5.59   ## 5              5.75 predict(sr_fit, lung_test, type = \"quantile\") ## # A tibble: 5 × 1   ##   .pred_quantile   ##        <qtls(9)>   ## 1          [401]   ## 2          [219]   ## 3          [280]   ## 4          [208]   ## 5          [243] predict(sr_fit, lung_test, type = \"hazard\", eval_time = c(100, 500, 1000)) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_hazard   ##        <dbl>        <dbl>   ## 1        100      0.00134   ## 2        500      0.00276   ## 3       1000      0.00377 library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] sr_spec <-      survival_reg(dist = \"weibull\") %>%     set_engine(\"flexsurv\") %>%      set_mode(\"censored regression\")    sr_spec ## Parametric Survival Regression Model Specification (censored regression)   ##    ## Main Arguments:   ##   dist = weibull   ##    ## Computational engine: flexsurv set.seed(1)   sr_fit <- sr_spec %>%      fit(Surv(time, status) ~ age + sex + ph.ecog, data = lung_train)   sr_fit ## parsnip model object   ##    ## Call:   ## flexsurv::flexsurvreg(formula = Surv(time, status) ~ age + sex +    ##     ph.ecog, data = data, dist = ~\"weibull\")   ##    ## Estimates:    ##          data mean  est        L95%       U95%       se          ## shape           NA   1.39e+00   1.21e+00   1.61e+00   1.02e-01   ## scale           NA   5.74e+02   1.99e+02   1.65e+03   3.10e+02   ## age       6.24e+01  -9.02e-03  -2.50e-02   6.95e-03   8.15e-03   ## sex       1.38e+00   4.02e-01   1.17e-01   6.87e-01   1.45e-01   ## ph.ecog   9.51e-01  -3.17e-01  -5.13e-01  -1.21e-01   1.00e-01   ##          exp(est)   L95%       U95%        ## shape           NA         NA         NA   ## scale           NA         NA         NA   ## age       9.91e-01   9.75e-01   1.01e+00   ## sex       1.50e+00   1.12e+00   1.99e+00   ## ph.ecog   7.28e-01   5.99e-01   8.86e-01   ##    ## N = 162,  Events: 116,  Censored: 46   ## Total time at risk: 49401   ## Log-likelihood = -800.356, df = 5   ## AIC = 1610.712 predict(     sr_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.889    ## 2        500         0.330    ## 3       1000         0.0543 predict(sr_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       424.   ## 2       341.   ## 3       292.   ## 4       336.   ## 5       327. predict(sr_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1              6.14   ## 2              5.92   ## 3              5.77   ## 4              5.91   ## 5              5.88 predict(sr_fit, lung_test, type = \"quantile\") ## # A tibble: 5 × 1   ##   .pred_quantile   ##        <qtls(9)>   ## 1          [357]   ## 2          [287]   ## 3          [246]   ## 4          [283]   ## 5          [276] predict(sr_fit, lung_test, type = \"hazard\", eval_time = c(100, 500, 1000)) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_hazard   ##        <dbl>        <dbl>   ## 1        100      0.00164   ## 2        500      0.00309   ## 3       1000      0.00406 library(tidymodels)   library(censored)   tidymodels_prefer()      data(cancer)      lung <- lung %>% drop_na()   lung_train <- lung[-c(1:5), ]   lung_test <- lung[1:5, ] sr_spec <-      survival_reg() %>%     set_engine(\"flexsurvspline\") %>%      set_mode(\"censored regression\")    sr_spec ## Parametric Survival Regression Model Specification (censored regression)   ##    ## Computational engine: flexsurvspline set.seed(1)   sr_fit <- sr_spec %>%      fit(Surv(time, status) ~ age + sex + ph.ecog, data = lung_train)   sr_fit ## parsnip model object   ##    ## Call:   ## flexsurv::flexsurvspline(formula = Surv(time, status) ~ age +    ##     sex + ph.ecog, data = data)   ##    ## Estimates:    ##          data mean  est        L95%       U95%       se          ## gamma0          NA   -8.85681  -10.78595   -6.92767    0.98427   ## gamma1          NA    1.39431    1.19358    1.59504    0.10241   ## age       62.41358    0.01258   -0.00968    0.03484    0.01136   ## sex        1.38272   -0.56080   -0.95517   -0.16643    0.20121   ## ph.ecog    0.95062    0.44213    0.17197    0.71230    0.13784   ##          exp(est)   L95%       U95%        ## gamma0          NA         NA         NA   ## gamma1          NA         NA         NA   ## age        1.01266    0.99037    1.03545   ## sex        0.57075    0.38475    0.84668   ## ph.ecog    1.55602    1.18764    2.03867   ##    ## N = 162,  Events: 116,  Censored: 46   ## Total time at risk: 49401   ## Log-likelihood = -800.356, df = 5   ## AIC = 1610.712 predict(     sr_fit,      lung_test,      type = \"survival\",     eval_time = c(100, 500, 1000)   ) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_survival   ##        <dbl>          <dbl>   ## 1        100         0.889    ## 2        500         0.330    ## 3       1000         0.0543 predict(sr_fit, lung_test, type = \"time\") ## # A tibble: 5 × 1   ##   .pred_time   ##        <dbl>   ## 1       424.   ## 2       341.   ## 3       292.   ## 4       336.   ## 5       327. predict(sr_fit, lung_test, type = \"linear_pred\") ## # A tibble: 5 × 1   ##   .pred_linear_pred   ##               <dbl>   ## 1             -8.56   ## 2             -8.26   ## 3             -8.04   ## 4             -8.24   ## 5             -8.20 predict(sr_fit, lung_test, type = \"quantile\") ## # A tibble: 5 × 1   ##   .pred_quantile   ##        <qtls(9)>   ## 1          [357]   ## 2          [287]   ## 3          [246]   ## 4          [283]   ## 5          [276] predict(sr_fit, lung_test, type = \"hazard\", eval_time = c(100, 500, 1000)) %>%      slice(1) %>%      tidyr::unnest(col = .pred) ## # A tibble: 3 × 2   ##   .eval_time .pred_hazard   ##        <dbl>        <dbl>   ## 1        100      0.00164   ## 2        500      0.00309   ## 3       1000      0.00406"},{"path":"https://censored.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author. Hannah Frick. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://censored.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E, Frick H (2025). censored: 'parsnip' Engines Survival Models. R package version 0.3.2.9000, https://censored.tidymodels.org, https://github.com/tidymodels/censored.","code":"@Manual{,   title = {censored: 'parsnip' Engines for Survival Models},   author = {Emil Hvitfeldt and Hannah Frick},   year = {2025},   note = {R package version 0.3.2.9000,     https://censored.tidymodels.org},   url = {https://github.com/tidymodels/censored}, }"},{"path":"https://censored.tidymodels.org/dev/index.html","id":"censored-","dir":"","previous_headings":"","what":"parsnip Engines for Survival Models","title":"parsnip Engines for Survival Models","text":"censored parsnip extension package provides engines various models censored regression survival analysis.","code":""},{"path":"https://censored.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"parsnip Engines for Survival Models","text":"can install released version censored CRAN : development version GitHub :","code":"install.packages(\"censored\") # install.packages(\"pak\") pak::pak(\"tidymodels/censored\")"},{"path":"https://censored.tidymodels.org/dev/index.html","id":"available-models-engines-and-prediction-types","dir":"","previous_headings":"","what":"Available models, engines, and prediction types","title":"parsnip Engines for Survival Models","text":"censored provides engines models following table. examples, please see Fitting Predicting censored. time event can predicted type = \"time\", survival probability type = \"survival\", linear predictor type = \"linear_pred\", quantiles event time distribution type = \"quantile\", hazard type = \"hazard\".","code":""},{"path":"https://censored.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"parsnip Engines for Survival Models","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/aorsf_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper function for aorsf objects — aorsf_internal","title":"Internal helper function for aorsf objects — aorsf_internal","text":"Internal helper function aorsf objects","code":""},{"path":"https://censored.tidymodels.org/dev/reference/aorsf_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper function for aorsf objects — aorsf_internal","text":"","code":"survival_prob_orsf(object, new_data, eval_time, time = deprecated())"},{"path":"https://censored.tidymodels.org/dev/reference/aorsf_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper function for aorsf objects — aorsf_internal","text":"object parsnip model_fit object resulting rand_forest() engine = \"aorsf\". new_data data frame predicted. eval_time vector times predict survival probability. time Deprecated favor eval_time. vector times predict survival probability.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/aorsf_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal helper function for aorsf objects — aorsf_internal","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/aorsf_internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal helper function for aorsf objects — aorsf_internal","text":"","code":"mod <- rand_forest() %>%   set_engine(\"aorsf\") %>%   set_mode(\"censored regression\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = na.omit(lung)) preds <- survival_prob_orsf(mod, lung[1:3, ], eval_time = c(250, 100))"},{"path":"https://censored.tidymodels.org/dev/reference/blackboost_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted trees via mboost — blackboost_train","title":"Boosted trees via mboost — blackboost_train","text":"blackboost_train() wrapper blackboost() function mboost package fits tree-based models model arguments main function.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/blackboost_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted trees via mboost — blackboost_train","text":"","code":"blackboost_train(   formula,   data,   family,   weights = NULL,   teststat = \"quadratic\",   testtype = \"Teststatistic\",   mincriterion = 0,   minsplit = 10,   minbucket = 4,   maxdepth = 2,   saveinfo = FALSE,   ... )"},{"path":"https://censored.tidymodels.org/dev/reference/blackboost_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted trees via mboost — blackboost_train","text":"formula symbolic description model fitted. data data frame containing variables model. family mboost::Family() object. weights optional vector weights used fitting process. teststat character specifying type test statistic applied variable selection. testtype character specifying compute distribution test statistic. first three options refer p-values criterion, \"Teststatistic\" uses raw statistic criterion. \"Bonferroni\" \"Univariate\" relate p-values asymptotic distribution (adjusted unadjusted). Bonferroni-adjusted Monte-Carlo p-values computed \"Bonferroni\" \"MonteCarlo\" given. mincriterion value test statistic 1 - p-value must exceeded order implement split. minsplit minimum sum weights node order considered splitting. minbucket minimum sum weights terminal node. maxdepth maximum depth tree. default maxdepth = Inf means restrictions applied tree sizes. saveinfo Logical. Store information variable selection procedure info slot partynode. ... arguments pass.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/blackboost_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosted trees via mboost — blackboost_train","text":"fitted blackboost model.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/blackboost_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosted trees via mboost — blackboost_train","text":"","code":"blackboost_train(Surv(time, status) ~ age + ph.ecog,   data = lung[-14, ], family = mboost::CoxPH() ) #>  #> \t Model-based Boosting #>  #> Call: #> mboost::blackboost(formula = formula, data = data, family = family,     control = mboost::boost_control(), tree_controls = partykit::ctree_control(teststat = \"quadratic\",         testtype = \"Teststatistic\", mincriterion = 0, minsplit = 10,         minbucket = 4, maxdepth = 2, saveinfo = FALSE)) #>  #>  #> \t Cox Partial Likelihood  #>  #> Loss function:   #>  #> Number of boosting iterations: mstop = 100  #> Step size:  0.1  #> Offset:  0  #> Number of baselearners:  1  #>"},{"path":"https://censored.tidymodels.org/dev/reference/censored-package.html","id":null,"dir":"Reference","previous_headings":"","what":"censored: parsnip Engines for Survival Models — censored-package","title":"censored: parsnip Engines for Survival Models — censored-package","text":"censored provides engines survival models parsnip package. models include parametric survival models, proportional hazards models, decision trees, boosted trees, bagged trees, random forests. See \"Fitting Predicting censored\" article various examples. See examples classic survival models fit censored.","code":""},{"path":[]},{"path":"https://censored.tidymodels.org/dev/reference/censored-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"censored: parsnip Engines for Survival Models — censored-package","text":"Maintainer: Hannah Frick hannah@posit.co (ORCID) Authors: Emil Hvitfeldt emil.hvitfeldt@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://censored.tidymodels.org/dev/reference/censored-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"censored: parsnip Engines for Survival Models — censored-package","text":"","code":"# Accelerated Failure Time (AFT) model  fit_aft <- survival_reg(dist = \"weibull\") %>%   set_engine(\"survival\") %>%   fit(Surv(time, status) ~ age + sex + ph.karno, data = lung) predict(fit_aft, lung[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       355. #> 2       374. #> 3       416.   # Cox's Proportional Hazards model  fit_cox <- proportional_hazards() %>%   set_engine(\"survival\") %>%   fit(Surv(time, status) ~ age + sex + ph.karno, data = lung) predict(fit_cox, lung[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       325. #> 2       343. #> 3       379.   # Andersen-Gill model for recurring events  fit_ag <- proportional_hazards() %>%   set_engine(\"survival\") %>%   fit(Surv(tstart, tstop, status) ~ treat + inherit + age + strata(hos.cat),     data = cgd   ) predict(fit_ag, cgd[1:3, ], type = \"time\") #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       319. #> 2       319. #> 3       319."},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for glmnet for censored — coxnet_train","title":"Wrapper for glmnet for censored — coxnet_train","text":"used directly users.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for glmnet for censored — coxnet_train","text":"","code":"coxnet_train(   formula,   data,   alpha = 1,   lambda = NULL,   weights = NULL,   ...,   call = caller_env() )"},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for glmnet for censored — coxnet_train","text":"formula model formula. data data. alpha elasticnet mixing parameter, \\(0\\le\\alpha\\le 1\\). penalty defined $$(1-\\alpha)/2||\\beta||_2^2+\\alpha||\\beta||_1.$$ alpha=1 lasso penalty, alpha=0 ridge penalty. lambda user supplied lambda sequence. Typical usage program compute lambda sequence based nlambda lambda.min.ratio. Supplying value lambda overrides . WARNING: use care. Avoid supplying single value lambda (predictions CV use predict() instead).  Supply instead decreasing sequence lambda values. glmnet relies warms starts speed, often faster fit whole path compute single fit. weights observation weights. Can total counts responses proportion matrices. Default 1 observation ... additional parameters passed glmnet::glmnet. call call used errors warnings.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for glmnet for censored — coxnet_train","text":"fitted glmnet model.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper for glmnet for censored — coxnet_train","text":"wrapper translates formula interface glmnet's matrix due stratification can specified. glmnet requires response stratified via glmnet::stratifySurv(). censored allows specification via survival::strata() term right-hand side formula. formula used generate stratification information needed stratifying response. formula without strata term used generating model matrix glmnet. wrapper retains original formula pre-processing elements including training data allow predictions fitted model.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/coxnet_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for glmnet for censored — coxnet_train","text":"","code":"coxnet_mod <- coxnet_train(Surv(time, status) ~ age + sex, data = lung)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxnet.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"wrapper survival probabilities coxnet models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"","code":"survival_prob_coxnet(   object,   new_data,   eval_time,   time = deprecated(),   output = \"surv\",   penalty = NULL,   multi = FALSE,   ... )"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"object parsnip model_fit object resulting proportional_hazards() engine = \"glmnet\". new_data Data prediction. eval_time vector integers prediction times. time Deprecated favor eval_time. vector integers prediction times. output One \"surv\" \"haz\". penalty Penalty value(s). multi Allow multiple penalty values? Defaults FALSE. ... Options pass survival::survfit().","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with coxnet models — survival_prob_coxnet","text":"","code":"cox_mod <- proportional_hazards(penalty = 0.1) %>%   set_engine(\"glmnet\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_prob_coxnet(cox_mod, new_data = lung[1:3, ], eval_time = 300) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","title":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","text":"wrapper survival probabilities coxph models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","text":"","code":"survival_prob_coxph(   object,   x = deprecated(),   new_data,   eval_time,   time = deprecated(),   output = \"surv\",   interval = \"none\",   conf.int = 0.95,   ... )"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","text":"object parsnip model_fit object resulting proportional_hazards() engine = \"survival\". x Deprecated. model coxph(). new_data Data prediction eval_time vector integers prediction times. time Deprecated favor eval_time. vector integers prediction times. output One \"surv\", \"conf\", \"haz\". interval Add confidence interval survival probability? Options \"none\" \"confidence\". conf.int confidence level. ... Options pass survival::survfit()","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_coxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with coxph models — survival_prob_coxph","text":"","code":"cox_mod <- proportional_hazards() %>%    set_engine(\"survival\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_prob_coxph(cox_mod, new_data = lung[1:3, ], eval_time = 300) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_mboost.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","title":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","text":"wrapper survival probabilities mboost models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_mboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","text":"","code":"survival_prob_mboost(object, new_data, eval_time, time = deprecated())"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_mboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","text":"object parsnip model_fit object resulting boost_tree() engine = \"mboost\". new_data Data prediction. eval_time vector integers prediction times. time Deprecated favor eval_time. vector integers prediction times.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_mboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_mboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with mboost models — survival_prob_mboost","text":"","code":"mod <- boost_tree() %>%   set_engine(\"mboost\") %>%   set_mode(\"censored regression\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_prob_mboost(mod, new_data = lung[1:3, ], eval_time = 300) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_partykit.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","title":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","text":"wrapper survival probabilities partykit models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_partykit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","text":"","code":"survival_prob_partykit(   object,   new_data,   eval_time,   time = deprecated(),   output = \"surv\" )"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_partykit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","text":"object parsnip model_fit object resulting decision_tree() engine = \"partykit\" rand_forest() engine = \"partykit\". new_data data frame predicted. eval_time vector times predict survival probability. time Deprecated favor eval_time. vector times predict survival probability. output Type output. Can either \"surv\" \"haz\".","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_partykit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_partykit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with partykit models — survival_prob_partykit","text":"","code":"tree <- decision_tree() %>%   set_mode(\"censored regression\") %>%   set_engine(\"partykit\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = lung) survival_prob_partykit(tree, lung[1:3, ], eval_time = 100) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]> forest <- rand_forest() %>%   set_mode(\"censored regression\") %>%   set_engine(\"partykit\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = lung[1:100, ]) survival_prob_partykit(forest, lung[1:3, ], eval_time = 100) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_pecRpart.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","title":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","text":"wrapper survival probabilities pecRpart models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_pecRpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","text":"","code":"survival_prob_pecRpart(object, new_data, eval_time)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_pecRpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","text":"object parsnip model_fit object resulting decision_tree() engine = \"rpart\". new_data Data prediction. eval_time vector integers prediction times.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_pecRpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_pecRpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with pecRpart models — survival_prob_pecRpart","text":"","code":"mod <- decision_tree() %>%    set_mode(\"censored regression\") %>%     set_engine(\"rpart\") %>%     fit(Surv(time, status) ~ ., data = lung) survival_prob_pecRpart(mod, new_data = lung[1:3, ], eval_time = 300) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survbagg.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","title":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","text":"wrapper survival probabilities survbagg models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survbagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","text":"","code":"survival_prob_survbagg(object, new_data, eval_time, time = deprecated())"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survbagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","text":"object parsnip model_fit object resulting bag_tree() engine = \"rpart\". new_data Data prediction. eval_time vector prediction times. time Deprecated favor eval_time. vector prediction times.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survbagg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","text":"vctrs list tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survbagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival probabilities with survbagg models — survival_prob_survbagg","text":"","code":"bagged_tree <- bag_tree() %>%   set_engine(\"rpart\") %>%   set_mode(\"censored regression\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = lung) survival_prob_survbagg(bagged_tree, lung[1:3, ], eval_time = 100) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function helps for parametric survival models — survival_prob_survreg","title":"Internal function helps for parametric survival models — survival_prob_survreg","text":"Internal function helps parametric survival models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function helps for parametric survival models — survival_prob_survreg","text":"","code":"survival_prob_survreg(object, new_data, eval_time, time = deprecated())  hazard_survreg(object, new_data, eval_time)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function helps for parametric survival models — survival_prob_survreg","text":"object parsnip model_fit object resulting survival_reg() engine = \"survival\". new_data data frame. eval_time vector time points. time Deprecated favor eval_time. vector time points.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function helps for parametric survival models — survival_prob_survreg","text":"tibble list column nested tibbles.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_prob_survreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function helps for parametric survival models — survival_prob_survreg","text":"","code":"mod <- survival_reg() %>%    set_engine(\"survival\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_prob_survreg(mod, lung[1:3, ], eval_time = 100) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]> hazard_survreg(mod, lung[1:3, ], eval_time = 100) #> # A tibble: 3 × 1 #>   .pred            #>   <list>           #> 1 <tibble [1 × 2]> #> 2 <tibble [1 × 2]> #> 3 <tibble [1 × 2]>"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxnet.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival times with coxnet models — survival_time_coxnet","title":"A wrapper for survival times with coxnet models — survival_time_coxnet","text":"wrapper survival times coxnet models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival times with coxnet models — survival_time_coxnet","text":"","code":"survival_time_coxnet(object, new_data, penalty = NULL, multi = FALSE, ...)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival times with coxnet models — survival_time_coxnet","text":"object parsnip model_fit object resulting proportional_hazards() engine = \"glmnet\". new_data Data prediction. penalty Penalty value(s). multi Allow multiple penalty values? ... Options pass survival::survfit().","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival times with coxnet models — survival_time_coxnet","text":"vector.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival times with coxnet models — survival_time_coxnet","text":"","code":"cox_mod <- proportional_hazards(penalty = 0.1) %>%   set_engine(\"glmnet\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_time_coxnet(cox_mod, new_data = lung[1:3, ], penalty = 0.1) #> [1]       NA 425.4722       NA"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival times with coxph models — survival_time_coxph","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"wrapper survival times coxph models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"","code":"survival_time_coxph(object, new_data)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"object parsnip model_fit object resulting proportional_hazards() engine = \"survival\". new_data Data prediction","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"vector.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_coxph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival times with coxph models — survival_time_coxph","text":"","code":"cox_mod <- proportional_hazards() %>%    set_engine(\"survival\") %>%   fit(Surv(time, status) ~ ., data = lung) survival_time_coxph(cox_mod, new_data = lung[1:3, ]) #> [1]       NA 470.5813       NA"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_mboost.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for mean survival times with mboost models — survival_time_mboost","title":"A wrapper for mean survival times with mboost models — survival_time_mboost","text":"wrapper mean survival times mboost models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_mboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for mean survival times with mboost models — survival_time_mboost","text":"","code":"survival_time_mboost(object, new_data)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_mboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for mean survival times with mboost models — survival_time_mboost","text":"object parsnip model_fit object resulting boost_tree() engine = \"mboost\". new_data Data prediction","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_mboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for mean survival times with mboost models — survival_time_mboost","text":"tibble.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_mboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for mean survival times with mboost models — survival_time_mboost","text":"","code":"boosted_tree <- boost_tree() %>%   set_engine(\"mboost\") %>%   set_mode(\"censored regression\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = lung[-14, ]) survival_time_mboost(boosted_tree, new_data = lung[1:3, ]) #> # A tibble: 3 × 1 #>   .pred_time #>        <dbl> #> 1       370. #> 2       337. #> 3       540."},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_survbagg.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for survival times with survbagg models — survival_time_survbagg","title":"A wrapper for survival times with survbagg models — survival_time_survbagg","text":"wrapper survival times survbagg models","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_survbagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for survival times with survbagg models — survival_time_survbagg","text":"","code":"survival_time_survbagg(object, new_data)"},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_survbagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for survival times with survbagg models — survival_time_survbagg","text":"object parsnip model_fit object resulting bag_tree() engine = \"rpart\". new_data Data prediction","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_survbagg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for survival times with survbagg models — survival_time_survbagg","text":"vector.","code":""},{"path":"https://censored.tidymodels.org/dev/reference/survival_time_survbagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for survival times with survbagg models — survival_time_survbagg","text":"","code":"bagged_tree <- bag_tree() %>%   set_engine(\"rpart\") %>%   set_mode(\"censored regression\") %>%   fit(Surv(time, status) ~ age + ph.ecog, data = lung) survival_time_survbagg(bagged_tree, lung[1:3, ]) #> [1] 310 350 394"},{"path":"https://censored.tidymodels.org/dev/reference/time_to_million.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of days before a movie grosses $1M USD — time_to_million","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"data somewhat biased random sample 551 movies released 2015 2018. Columns include","code":""},{"path":"https://censored.tidymodels.org/dev/reference/time_to_million.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"time_to_million tibble","code":""},{"path":"https://censored.tidymodels.org/dev/reference/time_to_million.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of days before a movie grosses $1M USD — time_to_million","text":"title: character string movie title. time: number days movie earns million US dollars. event: binary value whether movie reached goal. 94% movies observed events. released: date field release date. distributor: factor name distributor. released_theaters: maximum number theaters movie played first two weeks release. year: release year. rated: factor Motion Picture Association film rating. runtime: length movie (minutes). set indicators columns movie genre (e.g. action, crime, etc.). set indicators language (e.g., english, hindi, etc.). set indicators countries movie released (e.g., uk, japan, etc.)","code":""},{"path":[]},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"breaking-change-development-version","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"censored (development version)","text":"format quantile predictions now follows new requirements parsnip (#339, tidymodels/parsnip/#1209).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"censored-032","dir":"Changelog","previous_headings":"","what":"censored 0.3.2","title":"censored 0.3.2","text":"CRAN release: 2024-06-11 censored now depends survival >= 3.7-0 allows us use also predictions survival probabilities infinite evaluation time points. means : Survival probabilities eval_time = Inf now always set 0 confidence intervals infinite evaluation times now always set NA. applies proportional_hazards()bag_tree() models well models partykit engine, decision_tree() rand_forest() (#320).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"censored-031","dir":"Changelog","previous_headings":"","what":"censored 0.3.1","title":"censored 0.3.1","text":"CRAN release: 2024-04-19 Internal changes predict() methods flexsurv models, preparation upcoming flexsurv release (#317).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"censored-030","dir":"Changelog","previous_headings":"","what":"censored 0.3.0","title":"censored 0.3.0","text":"CRAN release: 2024-01-31","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"censored 0.3.0","text":"multi_predict() now available prediction types proportional_hazards() models \"glmnet\" engine, newly also type = \"time\" type = \"raw\" (#277, #282). Random forests \"aorsf\" engine can now predict survival time, .e., predict(type = \"time\") now available (#308).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"breaking-change-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking change","title":"censored 0.3.0","text":"survival_prob_*(), survival_time_*(), hazard_*() helper functions now take parsnip model_fit object main input, instead engine fit case previously (#302).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"censored 0.3.0","text":"extract_fit_engine() now works properly proportional hazards models fitted \"glmnet\" engine (#266). multi_predict(type = \"survival\") proportional_hazards(engine = \"glmnet\") models: used single penalty value, value now included results. previously omitted (#267, #282). proportional_hazards(engine = \"glmnet\") models now don’t pretend able deal sparse matrices (#291). Fixed bug proportional_hazards(engine = \"glmnet\") prediction didn’t work workflow() formula preprocessor (#264).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"other-0-3-0","dir":"Changelog","previous_headings":"","what":"Other","title":"censored 0.3.0","text":"helper functions survival_time_coxnet() survival_prob_coxnet() gain multi argument allow multiple values penalty (#278, #279).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"censored-020","dir":"Changelog","previous_headings":"","what":"censored 0.2.0","title":"censored 0.2.0","text":"CRAN release: 2023-04-13","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"cross-package-changes-with-parsnip-0-2-0","dir":"Changelog","previous_headings":"","what":"Cross-package changes with parsnip","title":"censored 0.2.0","text":"new eval_time argument replaces time argument time points predict survival probability hazard. time argument deprecated (#244). matrix interface fitting, fit_xy(), now works censored regression models (#225, #234, #247, #251). Improved error messages throughout package (#248).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"new-engines-0-2-0","dir":"Changelog","previous_headings":"","what":"New engines","title":"censored 0.2.0","text":"Added new \"aorsf\" engine rand_forest() accelerated oblique random survival forests aorsf package (@bcjaeger, #211). Added new flexsurvspline engine survival_reg() (@mattwarkentin, #213).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"censored 0.2.0","text":"Predictions type \"linear_pred\" survival_reg(engine = \"flexsurv\") now correct scale distributions natural scale unrestricted scale location parameter identical, e.g. dist = \"lnorm\" (#229). Predictions type \"linear_pred\" proportional_hazards(engine = \"glmnet\") via multi_predict() now sign via predict() (#242). Predictions survival probability survival_reg(engine = \"flexsurv\") single time point now nested correctly (#254). Predictions survival probability decision_tree(engine = \"rpart\") single observation now work (#256). Predictions type \"quantile\" survival_reg(engine = \"survival\") single observation now work (#257). Fixed bug printing coxnet models, .e., proportional_hazards() models fitted \"glmnet\" engine (#249).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"internal-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"censored 0.2.0","text":"Predictions survival probabilities now calculated via summary.survfit() proportional_hazards() models \"survival\" \"glmnet\" engines, bag_tree() models \"rpart\" engine, decision_tree() models \"partykit\" engines, well rand_forest() models \"partykit\" engine (#221, #224). Added internal survfit_summary_*() helper functions (#216).","code":""},{"path":"https://censored.tidymodels.org/dev/news/index.html","id":"censored-011","dir":"Changelog","previous_headings":"","what":"censored 0.1.1","title":"censored 0.1.1","text":"CRAN release: 2022-09-30 boosted trees \"mboost\" engine, survival probabilities can now predicted time = -Inf. always 1. time = Inf now predicts survival probability 0 (#215). Updated tests model arguments update() methods (#208). Internal re-organisation code (#206, 209). Added NEWS.md file track changes package.","code":""}]
