% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boost_tree_mboost.R
\name{details_boost_tree_mboost}
\alias{details_boost_tree_mboost}
\title{Boosted trees}
\description{
\code{\link[mboost:blackboost]{mboost::blackboost()}} fits a series of decision trees forming an ensemble.
Each tree depends on the results of previous trees. All trees in the
ensemble are combined to produce a final prediction.
}
\details{
For this engine, there is a single mode: censored regression
\subsection{Tuning Parameters}{

This model has no tuning parameters.
}

\subsection{Translation from parsnip to the original package (censored regression)}{\if{html}{\out{<div class="sourceCode r">}}\preformatted{boost_tree() \%>\% 
  set_engine("mboost") \%>\% 
  set_mode("censored regression") \%>\% 
  translate()
}\if{html}{\out{</div>}}\preformatted{## Boosted Tree Model Specification (censored regression)
## 
## Computational engine: mboost 
## 
## Model fit template:
## censored::blackboost_train(formula = missing_arg(), data = missing_arg(), 
##     family = new("boost_family", ngradient = function (y, f, 
##         w) 
##     \{
##         time <- y[, 1]
##         storage.mode(time) <- "double"
##         event <- y[, 2]
##         storage.mode(event) <- "integer"
##         if (length(w) == 1) 
##             w <- rep(w, length(time))
##         storage.mode(w) <- "double"
##         if (length(f) == 1) 
##             f <- rep(f, length(time))
##         storage.mode(f) <- "double"
##         w[is.na(f)] <- 0
##         f[is.na(f)] <- 0
##         .Call("ngradientCoxPLik", time, event, f, w, PACKAGE = "mboost")
##     \}, risk = function (y, f, w = 1) 
##     -sum(plloss(y, f, w), na.rm = TRUE), offset = function (y, 
##         w = 1) 
##     0, check_y = function (y) 
##     \{
##         if (!inherits(y, "Surv")) 
##             stop("response is not an object of class ", sQuote("Surv"), 
##                 " but ", sQuote("family = CoxPH()"))
##         y
##     \}, weights = function (w) 
##     \{
##         switch(weights, any = TRUE, none = isTRUE(all.equal(unique(w), 
##             1)), zeroone = isTRUE(all.equal(unique(w + abs(w - 
##             1)), 1)), case = isTRUE(all.equal(unique(w - floor(w)), 
##             0)))
##     \}, nuisance = function () 
##     return(NA), response = function (f) 
##     NA, rclass = function (f) 
##     NA, name = "Cox Partial Likelihood", charloss = ""))
}

\code{\link[=blackboost_train]{blackboost_train()}} is a wrapper around
\code{\link[mboost:blackboost]{mboost::blackboost()}} (and other functions)
that makes it easier to run this model.
}

\subsection{Preprocessing requirements}{

This engine does not require any special encoding of the predictors.
Categorical predictors can be partitioned into groups of factor levels
(e.g. \verb{\{a, c\}} vs \verb{\{b, d\}}) when splitting at a node. Dummy variables
are not required for this model.
}

\subsection{References}{
\itemize{
\item Buehlmann P, Hothorn T. 2007. Boosting algorithms: regularization,
prediction and model fitting. \emph{Statistical Science}, 22(4), 477–505.
\item Kuhn, M, and K Johnson. 2013. \emph{Applied Predictive Modeling}.
Springer.
}
}
}
\keyword{internal}
